[{"id": "golangci-lint", "name": "golangci-lint", "description": "Fast linters runner for Go.", "entry": "golangci-lint run --fix", "types": ["go"], "language": "golang", "pass_filenames": false}]
[{"id": "golangci-lint", "name": "golangci-lint", "description": "Fast linters runner for Go.", "entry": "make static", "types": ["go"], "language": "golang", "pass_filenames": false}]
[{"id": "yapf", "name": "yapf", "description": "A formatter for Python files.", "entry": "yapf", "args": ["-i", "-vv"], "language": "python", "types": ["python"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "golangci-lint", "name": "golangci-lint", "description": "Fast linters runner for Go.", "entry": "golangci-lint run --fix", "types": ["go"], "language": "golang", "pass_filenames": false}]
[{"id": "standard", "name": "standard", "entry": "standard --fix", "language": "node", "files": "\\.(js|jsx|mjs|cjs)$"}]
[{"id": "clj-kondo", "name": "clj-kondo", "description": "`clj-kondo` is a command-line utility for enforcing style consistency across Clojure projects.", "entry": "clj-kondo --lint", "language": "system", "types": ["clojure"]}, {"id": "clj-kondo-docker", "name": "clj-kondo (via docker)", "description": "`clj-kondo` is a command-line utility for enforcing style consistency across Clojure projects.", "entry": "cljkondo/clj-kondo:{{version}}", "args": ["clj-kondo", "--lint"], "language": "docker_image", "types": ["clojure"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "poetry-check", "name": "poetry-check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "pass_filenames": false, "files": "^(.*/)?pyproject\\.toml$"}, {"id": "poetry-lock", "name": "poetry-lock", "description": "run poetry lock to update lock file", "entry": "poetry lock", "language": "python", "pass_filenames": false, "files": "^(.*/)?(poetry\\.lock|pyproject\\.toml)$"}, {"id": "poetry-export", "name": "poetry-export", "description": "run poetry export to sync lock file with requirements.txt", "entry": "poetry export", "language": "python", "pass_filenames": false, "files": "^(.*/)?poetry\\.lock$", "args": ["-f", "requirements.txt", "-o", "requirements.txt"]}, {"id": "poetry-install", "name": "poetry-install", "description": "run poetry install to install dependencies from the lock file", "entry": "poetry install", "language": "python", "pass_filenames": false, "stages": ["post-checkout", "post-merge"], "always_run": true}]
[{"id": "swiftlint", "name": "SwiftLint", "description": "Check Swift files for issues with SwiftLint", "entry": "swiftlint --quiet", "language": "swift", "types": ["swift"]}]
[{"id": "conventional-commits", "name": "Conventional Commits Minder", "entry": "contrib/scripts/conventional-commits", "language": "script", "description": "Conventional Commits Enforcement at the `git commit` client-side level", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "yapf", "name": "yapf", "description": "A formatter for Python files.", "entry": "yapf", "args": ["-i"], "language": "python", "types": ["python"]}]
[{"id": "rubocop", "name": "rubocop", "description": "Enforce the community Ruby Style Guide with RuboCop", "entry": "rubocop", "language": "ruby", "types": ["ruby"], "args": ["--autocorrect", "--force-exclusion"]}]
[{"id": "gitleaks", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "gitleaks protect --verbose --redact --staged", "language": "golang", "pass_filenames": false}, {"id": "gitleaks-docker", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "zricethezav/gitleaks protect --verbose --redact --staged", "language": "docker_image"}]
[{"id": "validate_manifest", "name": "validate pre-commit manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit validate-manifest", "language": "python", "files": "^\\.pre-commit-hooks\\.yaml$"}]
[{"id": "sourcery", "name": "Sourcery", "description": "Meta-programming for Swift, stop writing boilerplate code.", "language": "swift", "entry": "sourcery", "require_serial": true, "pass_filenames": false, "always_run": true}]
[{"id": "buf-generate", "name": "buf generate", "language": "golang", "entry": "buf generate", "types": ["proto"], "pass_filenames": false}, {"id": "buf-breaking", "name": "buf breaking", "language": "golang", "entry": "buf breaking", "types": ["proto"], "pass_filenames": false}, {"id": "buf-lint", "name": "buf lint", "language": "golang", "entry": "buf lint", "types": ["proto"], "pass_filenames": false}, {"id": "buf-format", "name": "buf format", "language": "golang", "entry": "buf format -w --exit-code", "types": ["proto"], "pass_filenames": false}, {"id": "buf-mod-update", "name": "buf mod update", "language": "golang", "entry": "buf mod update", "files": "(buf\\.lock|buf\\.yaml)", "pass_filenames": false}, {"id": "buf-mod-prune", "name": "buf mod prune", "language": "golang", "entry": "buf mod prune", "files": "(buf\\.lock|buf\\.yaml)", "pass_filenames": false}]
[{"id": "tanka-format", "name": "tkfmt", "description": "Automatically format jsonnet files.", "entry": "tk", "args": ["fmt"], "language": "golang", "files": "\\.(jsonnet|libsonnet)$", "minimum_pre_commit_version": "2.10.1"}]
[{"id": "doctoc", "name": "doctoc", "language": "node", "entry": "doctoc", "types": ["markdown"]}]
[{"id": "dasel-validate-docker", "name": "Validate JSON, YAML, XML, TOML files", "description": "Validate JSON files", "language": "docker_image", "types_or": ["json", "yaml", "xml", "toml"], "entry": "ghcr.io/tomwright/dasel", "args": ["validate"]}, {"id": "dasel-validate-bin", "name": "Validate JSON, YAML, XML, TOML", "description": "Validate JSON, YAML, XML, TOML files", "language": "system", "types_or": ["json", "yaml", "xml", "toml"], "entry": "dasel", "args": ["validate"]}, {"id": "dasel-validate", "name": "Validate JSON, YAML, XML, TOML", "description": "Validate JSON, YAML, XML, TOML files", "language": "golang", "types_or": ["json", "yaml", "xml", "toml"], "entry": "dasel", "args": ["validate"]}]
[{"id": "semgrep", "name": "semgrep", "entry": "semgrep", "language": "python", "args": ["--disable-version-check", "--quiet", "--skip-unknown-extensions"]}, {"id": "semgrep-ci", "name": "semgrep", "entry": "semgrep", "language": "python", "pass_filenames": false, "args": ["ci", "--dry-run", "--baseline-commit", "HEAD"]}, {"id": "semgrep-docker-develop", "name": "semgrep", "description": "This hook runs semgrep:develop", "language": "docker_image", "entry": "-e SEMGREP_LOG_FILE=/tmp/out.log -e SEMGREP_VERSION_CACHE_PATH=/tmp/cache returntocorp/semgrep:develop semgrep"}, {"id": "semgrep-docker", "name": "semgrep", "description": "This hook runs semgrep (a.k.a. semgrep:latest)", "language": "docker_image", "entry": "-e SEMGREP_LOG_FILE=/tmp/out.log -e SEMGREP_VERSION_CACHE_PATH=/tmp/cache returntocorp/semgrep:latest semgrep"}]
[{"id": "pyre-check", "name": "pyre-check", "description": "pyre-check: Performant type-checking for python.", "entry": "pyre check", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "wily", "name": "wily", "description": "`wily` is a command-line application for tracking, reporting on complexity of Python tests and applications.", "entry": "wily", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "trufflehog", "name": "TruffleHog", "description": "Detect secrets in your data with TruffleHog.", "entry": "trufflehog git file://. --since-commit HEAD --only-verified --fail", "language": "golang", "pass_filenames": false}]
[{"id": "pylint", "name": "pylint", "entry": "pylint", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "write-good", "name": "write-good", "description": "Check docs for English prose with write-good", "entry": "write-good", "language": "node", "files": "\\.(rst|md|markdown|mdown|mkdn)$"}]
[{"id": "cfn-python-lint", "name": "AWS CloudFormation Linter", "description": "cfn-lint is a tool for finding issues with CloudFormation templates", "entry": "cfn-lint", "language": "python", "files": "\\.(json|yaml|yml)$"}, {"id": "cfn-lint", "name": "AWS CloudFormation Linter", "description": "cfn-lint is a tool for finding issues with CloudFormation templates", "entry": "cfn-lint", "language": "python", "files": "\\.(json|yaml|yml)$"}, {"id": "cfn-lint-rc", "name": "AWS CloudFormation Linter", "description": "cfn-lint is a tool for finding issues with CloudFormation templates", "entry": "cfn-lint", "language": "python", "pass_filenames": false}]
[{"id": "infracost_breakdown", "name": "Infracost breakdown", "description": "Check terraform infrastructure cost", "entry": "hooks/infracost_breakdown.sh", "language": "script", "require_serial": true, "files": "\\.(tf(vars)?|hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "hooks/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf|\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_without_aggregate_type_defaults", "name": "Terraform docs (without aggregate type defaults)", "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_replace", "name": "Terraform docs (overwrite README.md)", "description": "Overwrite content of README.md with terraform-docs.", "require_serial": true, "entry": "terraform_docs_replace", "language": "python", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "hooks/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_providers_lock", "name": "Lock terraform provider versions", "description": "Updates provider signatures in dependency lock files.", "require_serial": true, "entry": "hooks/terraform_providers_lock.sh", "language": "script", "files": "(\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "require_serial": true, "entry": "hooks/terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format.", "entry": "hooks/terragrunt_fmt.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files.", "entry": "hooks/terragrunt_validate.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "require_serial": true, "entry": "hooks/terraform_tfsec.sh", "language": "script"}, {"id": "checkov", "name": "checkov (deprecated, use \"terraform_checkov\")", "description": "Runs checkov on Terraform templates.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terraform_checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "hooks/terraform_checkov.sh", "language": "script", "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terraform_wrapper_module_for_each", "name": "Terraform wrapper with for_each in module", "description": "Generate Terraform wrappers with for_each in module.", "entry": "hooks/terraform_wrapper_module_for_each.sh", "language": "script", "pass_filenames": false, "always_run": false, "require_serial": true, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$"}, {"id": "terrascan", "name": "terrascan", "description": "Runs terrascan on Terraform templates.", "language": "script", "entry": "hooks/terrascan.sh", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "tfupdate", "name": "tfupdate", "description": "Runs tfupdate on Terraform templates.", "language": "script", "entry": "hooks/tfupdate.sh", "args": ["--args=terraform"], "files": "\\.tf$", "require_serial": true}]
[{"id": "ejson", "name": "ejson encrypt", "description": "Encrypts ejson files", "entry": "ejson encrypt", "language": "golang", "files": "ejson"}]
[{"id": "ripsecrets", "name": "ripsecrets", "description": "Prevent committing secret keys into your source code", "entry": "ripsecrets", "language": "rust", "types": ["text"], "args": ["--strict-ignore"], "require_serial": true, "minimum_pre_commit_version": "0"}, {"id": "ripsecrets-system", "name": "ripsecrets", "description": "Prevent committing secret keys into your source code", "entry": "ripsecrets", "language": "system", "types": ["text"], "args": ["--strict-ignore"], "require_serial": true, "minimum_pre_commit_version": "0"}]
[{"id": "djlint", "name": "djLint linting", "entry": "djlint", "types_or": ["html"], "language": "python"}, {"id": "djlint-django", "name": "djLint linting for Django", "entry": "djlint --profile=django", "types_or": ["html"], "language": "python"}, {"id": "djlint-jinja", "name": "djLint linting for Jinja", "entry": "djlint --profile=jinja", "types_or": ["jinja"], "language": "python"}, {"id": "djlint-nunjucks", "name": "djLint linting for Nunjucks", "entry": "djlint --profile=nunjucks", "types_or": ["nunjucks"], "language": "python"}, {"id": "djlint-handlebars", "name": "djLint linting for Handlebars/Mustache", "entry": "djlint --profile=handlebars", "types_or": ["handlebars"], "language": "python"}, {"id": "djlint-golang", "name": "djLint linting for Golang templates", "entry": "djlint --profile=golang", "types_or": ["gotmpl"], "language": "python"}, {"id": "djlint-reformat", "name": "djLint formatting", "entry": "djlint --reformat", "types_or": ["html"], "language": "python"}, {"id": "djlint-reformat-django", "name": "djLint formatting for Django", "entry": "djlint --reformat --profile=django", "types_or": ["html"], "language": "python"}, {"id": "djlint-reformat-jinja", "name": "djLint formatting for Jinja", "entry": "djlint --reformat --profile=jinja", "types_or": ["jinja"], "language": "python"}, {"id": "djlint-reformat-nunjucks", "name": "djLint formatting for Nunjucks", "entry": "djlint --reformat --profile=nunjucks", "types_or": ["nunjucks"], "language": "python"}, {"id": "djlint-reformat-handlebars", "name": "djLint formatting for Handlebars/Mustache", "entry": "djlint --reformat --profile=handlebars", "types_or": ["handlebars"], "language": "python"}, {"id": "djlint-reformat-golang", "name": "djLint formatting for Golang templates", "entry": "djlint --reformat --profile=golang", "types_or": ["gotmpl"], "language": "python"}]
[{"id": "ansible-review", "name": "Ansible-review", "description": "This hook runs ansible-review.", "entry": "ansible-review", "language": "python", "files": "\\.(yaml|yml)$"}]
[{"id": "tfsec", "name": "TFSec", "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues.", "language": "golang", "entry": "tfsec", "pass_filenames": false}, {"id": "tfsec-docker", "name": "TFSec Docker", "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues, uses projects official docker image.", "language": "docker_image", "entry": "aquasec/tfsec-alpine", "pass_filenames": false}, {"id": "tfsec-system", "name": "TFSec system", "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues, uses systems installed tfsec.", "language": "system", "entry": "tfsec", "pass_filenames": false}]
[{"id": "config-validate", "name": "Validate CircleCI config", "entry": "circleci config validate --skip-update-check", "language": "golang", "files": ".circleci/config.yml"}]
[{"id": "check-manifest", "name": "check-manifest", "description": "Check the completeness of MANIFEST.in for Python packages.", "entry": "check-manifest", "language": "python", "language_version": "python3", "pass_filenames": false, "always_run": true}]
[{"id": "checkov", "name": "Checkov", "description": "This hook runs checkov.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "checkov_diff", "name": "Checkov Diff", "description": "This hook runs checkov against all changed files.", "entry": "checkov --enable-secret-scan-all-files -f", "language": "python", "require_serial": true}, {"id": "checkov_secrets", "name": "Checkov Secrets", "description": "This hook looks for secrets with checkov.", "entry": "checkov --framework secrets --enable-secret-scan-all-files -f", "language": "python", "always_run": true, "require_serial": true}]
[{"id": "helm-docs", "args": [], "description": "Uses 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "git-hook/helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "script", "name": "Helm Docs", "require_serial": true}, {"id": "helm-docs-built", "args": [], "description": "Uses auto built 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "golang", "name": "Helm Docs Built", "require_serial": true}]
[{"id": "nitpick", "name": "nitpick fix (auto fixing files)", "description": "Fix configuration files (TOML/INI/JSON/etc.) directly, according to the Nitpick style", "entry": "nitpick fix", "language": "python"}, {"id": "nitpick-fix", "name": "nitpick fix (auto fixing files)", "description": "Fix configuration files (TOML/INI/JSON/etc.) directly, according to the Nitpick style", "entry": "nitpick fix", "language": "python"}, {"id": "nitpick-check", "name": "nitpick check (check files only)", "description": "Only check configuration files (TOML/INI/JSON/etc.) and print the violations, according to the Nitpick style", "entry": "nitpick check", "language": "python"}]
[{"id": "export-requirements-docs", "name": "Convert pyproject.toml to requirements.txt", "description": "Generate requirements.txt pyproject.toml for backwards compatibility with dev requirements.", "language": "system", "entry": "poetry export -E docs -f requirements.txt -o requirements.txt --without-hashes", "files": "^pyproject.toml$", "pass_filenames": false}]
[{"id": "hadolint-docker", "name": "Lint Dockerfiles", "description": "Runs hadolint Docker image to lint Dockerfiles", "language": "docker_image", "types": ["dockerfile"], "entry": "ghcr.io/hadolint/hadolint hadolint"}, {"id": "hadolint", "name": "Lint Dockerfiles", "description": "Runs hadolint to lint Dockerfiles", "language": "system", "types": ["dockerfile"], "entry": "hadolint"}]
[{"id": "CredSweeper", "name": "CredSweeper", "description": "Advanced credential scanner", "entry": "python -m credsweeper --path", "language": "python", "types": ["text"]}]
[{"id": "databooks-meta", "name": "databooks-meta", "description": "Remove Jupyter notebook metadata using `databooks`.", "entry": "databooks meta --yes", "language": "python", "minimum_pre_commit_version": "2.9.2", "types": ["jupyter"]}, {"id": "databooks-assert", "name": "databooks-assert", "description": "Assert Jupyter notebook metadata values using `databooks`.", "entry": "databooks assert --expr \"True\"", "language": "python", "minimum_pre_commit_version": "2.9.2", "types": ["jupyter"]}]
[{"id": "setuptools-odoo-make-default", "name": "Generate default setup.py for an addons directory", "always_run": true, "entry": "setuptools-odoo-make-default", "args": ["--addons-dir=.", "--clean"], "language": "python", "pass_filenames": false}, {"id": "setuptools-odoo-get-requirements", "name": "Generate requirements.txt for an addons directory", "entry": "setuptools-odoo-get-requirements", "args": ["--output=requirements.txt"], "language": "python", "pass_filenames": false, "files": "(__manifest__\\.py|__openerp__\\.py|__terp__\\.py|setup\\.py)$"}]
[{"id": "sp-repo-review", "name": "sp-repo-review", "description": "Check for configuration best practices", "entry": "repo-review .", "language": "python", "types_or": ["text"], "pass_filenames": false, "minimum_pre_commit_version": "2.9.0"}]
[{"id": "pdm-lock-check", "name": "pdm-lock-check", "description": "run pdm lock --check to validate config", "entry": "pdm lock --check", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}, {"id": "pdm-export", "name": "pdm-export-lock", "description": "export locked packages to requirements.txt or setup.py", "entry": "pdm export", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pdm.lock$"}]
[{"args": ["git-hook", "pre-commit"], "entry": "dvc", "id": "dvc-pre-commit", "language": "python", "language_version": "python3", "name": "DVC pre-commit", "require_serial": true, "stages": ["commit"], "verbose": true}, {"args": ["git-hook", "pre-push"], "entry": "dvc", "id": "dvc-pre-push", "language": "python", "language_version": "python3", "name": "DVC pre-push", "require_serial": true, "stages": ["push"]}, {"always_run": true, "args": ["git-hook", "post-checkout"], "entry": "dvc", "id": "dvc-post-checkout", "language": "python", "language_version": "python3", "minimum_pre_commit_version": "2.2.0", "name": "DVC post-checkout", "require_serial": true, "stages": ["post-checkout"]}]
[{"id": "hacking", "name": "hacking", "description": "Runs hacking, the OpenStack blend of flake8", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true, "additional_dependencies": [".[pep257]"]}]
[{"id": "reorder-python-imports", "name": "Reorder python imports", "description": "This hook reorders imports in python files.", "entry": "reorder-python-imports", "language": "python", "types": ["python"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "nbstripout", "name": "nbstripout", "description": "nbstripout: strip output from Jupyter and IPython notebooks", "entry": "nbstripout", "language": "python", "types": ["jupyter"]}]
[{"id": "futurize", "name": "futurize", "description": "Futurize your Py2 code to ensure it is runnable on Py3.", "language": "python", "types": ["python"], "entry": "futurize -w -n --no-diffs", "args": ["--stage1"]}, {"id": "pasteurize", "name": "pasteurize", "description": "Pasteurize your Py3 code to ensure it is runnable on Py2.", "language": "python", "language_version": "python3", "types": ["python"], "entry": "pasteurize -w -n --no-diffs"}]
[{"id": "markdownlint", "name": "markdownlint", "description": "Checks the style of Markdown/Commonmark files.", "entry": "markdownlint", "language": "node", "types": ["markdown"], "minimum_pre_commit_version": "0.15.0"}, {"id": "markdownlint-fix", "name": "markdownlint-fix", "description": "Fixes the style of Markdown/Commonmark files.", "entry": "markdownlint --fix", "language": "node", "types": ["markdown"], "minimum_pre_commit_version": "0.15.0"}, {"id": "markdownlint-docker", "name": "markdownlint-docker", "description": "Checks the style of Markdown/Commonmark files.", "entry": "ghcr.io/igorshubovych/markdownlint-cli", "language": "docker_image", "types": ["markdown"], "minimum_pre_commit_version": "0.15.0"}, {"id": "markdownlint-fix-docker", "name": "markdownlint-fix-docker", "description": "Fixes the style of Markdown/Commonmark files.", "entry": "ghcr.io/igorshubovych/markdownlint-cli --fix", "language": "docker_image", "types": ["markdown"], "minimum_pre_commit_version": "0.15.0"}]
[{"id": "orion_ci", "name": "orion_ci", "description": "Checks validity of CI matrix for Orion CI tasks", "entry": "ci-check", "language": "python", "files": "^\\.taskcluster\\.yml$"}]
[{"id": "pyupgrade", "name": "pyupgrade", "description": "Automatically upgrade syntax for newer versions.", "entry": "pyupgrade", "language": "python", "types": ["python"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "teyit", "name": "teyit", "description": "Unittest assertion formatter", "entry": "teyit", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "pytype", "name": "Pytype", "description": "A static type analyzer for Python code.", "entry": "pytype", "language": "system", "types": ["python"], "args": ["--jobs=auto", "--keep-going"], "files": "\\.py$"}]
[{"id": "license-finder", "name": "Audit licenses of dependencies", "entry": "license_finder", "language": "ruby", "pass_filenames": false, "description": "LicenseFinder works with your package managers to find dependencies, detect the licenses of the packages in them, compare those licenses against a user-defined list of permitted licenses, and give you an actionable exception report.\n"}]
[{"id": "talisman-commit", "name": "talisman", "entry": "talisman --githook pre-commit", "stages": ["commit"], "pass_filenames": false, "types": ["text"], "language": "golang"}, {"id": "talisman-push", "name": "talisman", "entry": "talisman --githook pre-push", "stages": ["push"], "pass_filenames": false, "types": ["text"], "language": "golang"}]
[{"id": "modernize", "name": "modernize", "description": "Modernizes Python code for eventual Python 3 migration.", "entry": "modernize", "args": ["--write", "--fix=default", "--nobackups"], "language": "python", "types": ["python"]}, {"id": "python-modernize", "name": "modernize (deprecated)", "description": "Deprecated in favour of `id: modernize`", "entry": "modernize", "args": ["--write", "--fix=default", "--nobackups"], "language": "python", "types": ["python"]}]
[{"id": "yaspeller", "name": "yaspeller", "entry": "yaspeller", "language": "node", "types": ["text"]}]
[{"id": "flake8", "name": "flake8", "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "darker", "name": "darker", "description": "Black reformatting to Python files only in regions changed since last commit", "entry": "darker -r :PRE-COMMIT:", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "sourcery", "name": "sourcery", "description": "Magically refactor Python", "language": "python", "additional_dependencies": ["sourcery==1.8.0"], "entry": "sourcery review --check", "types": ["python"]}]
[{"id": "zimports", "name": "zimports", "description": "Python import rewriter", "entry": "zimports", "language": "python", "types": ["python"]}]
[{"id": "pip-compile", "name": "pip-compile", "description": "Automatically compile requirements.", "entry": "pip-compile", "language": "python", "files": "^requirements\\.(in|txt)$", "pass_filenames": false}]
[{"id": "pgsanity_lint", "name": "pgsanity lint", "description": "This hook runs pgsanity-lint for linting postgresql SQL files", "entry": "pgsanity", "types": ["file", "sql"], "language": "python"}]
[{"id": "gray", "name": "gray", "description": "Gray: Less uncompromising Python code formatter.", "entry": "gray", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "antsibull-changelog-lint", "name": "antsibull-changelog lint", "description": "Lint antsibull-changelog fragments", "entry": "antsibull-changelog lint", "language": "python", "files": "^changelogs/fragments/.*\\.ya?ml$"}, {"id": "antsibull-changelog-lint-changelog-yaml", "name": "antsibull-changelog lint-changelog-yaml", "description": "Lint antsibull-changelog changelog.yaml", "entry": "antsibull-changelog lint-changelog-yaml", "language": "python", "files": "^changelogs/changelog.ya?ml$"}]
[{"id": "dotnet-format", "name": "dotnet format", "language": "dotnet", "types_or": ["c#", "vb"], "entry": "dotnet-format --include"}]
[{"id": "oxipng", "name": "oxipng", "description": "Multithreaded PNG optimizer written in Rust.", "entry": "oxipng", "language": "rust", "types": ["png"], "require_serial": true}]
[{"id": "sync_with_poetry", "name": "Sync with Poetry", "description": "Automatically sync pre-commit repos with package versions in poetry.lock", "entry": "swp", "language": "python", "files": "poetry.lock"}]
[{"id": "swiftformat", "name": "SwiftFormat", "description": "Check swift files for formating issues with SwiftFormat", "entry": "swiftformat", "language": "swift", "types": ["swift"]}]
[{"id": "ggshield", "name": "ggshield (pre-commit)", "entry": "ggshield", "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks.", "stages": ["commit"], "args": ["secret", "scan", "pre-commit"], "language": "python", "pass_filenames": false}, {"id": "ggshield-iac", "name": "ggshield-iac (pre-commit)", "entry": "ggshield", "description": "Runs ggshield Infra as Code Security to detect IaC vulnerabilities and policy breaks.", "stages": ["commit"], "args": ["iac", "scan", "pre-commit"], "language": "python", "pass_filenames": false}, {"id": "ggshield-sca", "name": "ggshield-sca (pre-commit)", "entry": "ggshield", "description": "Runs ggshield Software Composition Analysis to detect vulnerabilities introduced by dependencies.", "stages": ["commit"], "args": ["sca", "scan", "pre-commit"], "language": "python", "pass_filenames": false}, {"id": "docker-ggshield", "name": "ggshield (pre-commit,docker)", "language": "docker_image", "entry": "-e GITGUARDIAN_API_KEY gitguardian/ggshield:latest ggshield secret scan pre-commit", "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks in docker images.", "pass_filenames": false}, {"id": "ggshield-push", "name": "ggshield (pre-push)", "entry": "ggshield", "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks.", "args": ["secret", "scan", "pre-push"], "stages": ["push"], "language": "python", "pass_filenames": false}, {"id": "ggshield-iac-push", "name": "ggshield-iac (pre-push)", "entry": "ggshield", "description": "Runs ggshield Infra as Code Security to detect IaC vulnerabilities and policy breaks.", "args": ["iac", "scan", "pre-push"], "stages": ["push"], "language": "python", "pass_filenames": false}, {"id": "ggshield-sca-push", "name": "ggshield-sca (pre-push)", "entry": "ggshield", "description": "Runs ggshield Software Composition Analysis to detect vulnerabilities introduced by dependencies.", "args": ["sca", "scan", "pre-push"], "stages": ["push"], "language": "python", "pass_filenames": false}, {"id": "docker-ggshield-push", "name": "ggshield (pre-push,docker)", "language": "docker_image", "entry": "-e GITGUARDIAN_API_KEY gitguardian/ggshield:latest ggshield secret scan pre-push", "description": "Runs ggshield to detect hardcoded secrets, security vulnerabilities and policy breaks in docker images.", "pass_filenames": false}]
[{"id": "vale", "name": "vale", "description": "Run vale on your text", "entry": "vale", "language": "golang", "types": ["text"]}]
[{"id": "isort", "name": "isort", "entry": "isort", "require_serial": true, "language": "python", "types_or": ["cython", "pyi", "python"], "args": ["--filter-files"], "minimum_pre_commit_version": "2.9.2"}]
[{"id": "datree-docker", "name": "datree test, run within docker", "description": "Prevent Kubernetes misconfigurations from reaching production", "types": ["file", "yaml"], "language": "docker_image", "pass_filenames": true, "args": ["test", "--only-k8s-files"], "entry": "--user root datree/datree:latest"}, {"id": "datree-system", "name": "datree test, run using datree installed", "description": "Prevent Kubernetes misconfigurations from reaching production", "types": ["file", "yaml"], "language": "system", "pass_filenames": true, "args": ["test", "--only-k8s-files"], "entry": "datree"}]
[{"id": "shed", "name": "shed", "entry": "shed", "language": "python", "types": ["file"], "files": ".*\\.(py|pyi|md|rst)"}]
[{"id": "clang-format", "name": "clang-format", "entry": "clang-format-hook", "description": "Formats C, C++, Objective-C, and Java code", "types_or": ["c", "c++", "c#", "objective-c", "java"], "language": "python"}, {"id": "clang-tidy", "name": "clang-tidy", "entry": "clang-tidy-hook", "description": "Find warnings/errors in C, C++, and Objective-C code", "types_or": ["c", "c++", "c#", "objective-c"], "language": "python"}, {"id": "oclint", "name": "oclint", "entry": "oclint-hook", "description": "Find warnings/errors in C, C++, and Objective-C code", "types_or": ["c", "c++", "c#", "objective-c"], "language": "python"}, {"id": "uncrustify", "name": "uncrustify", "entry": "uncrustify-hook", "description": "Formats C, C++, Objective-C, Java, D, and Vala code", "types_or": ["c", "c++", "c#", "objective-c", "java"], "language": "python"}, {"id": "cppcheck", "name": "cppcheck", "entry": "cppcheck-hook", "description": "Find warnings/errors in C, C++, and Objective-C code", "types_or": ["c", "c++", "c#", "objective-c"], "language": "python"}, {"id": "cpplint", "name": "cpplint", "entry": "cpplint-hook", "description": "Find warnings/errors in C/CPP code", "types_or": ["c", "c++", "c#", "objective-c", "cuda"], "language": "python"}, {"id": "include-what-you-use", "name": "include-what-you-use", "entry": "include-what-you-use-hook", "description": "Runs Include-What-You-Use (iwyu) in C/CPP code", "types_or": ["c", "c++", "c#", "objective-c", "cuda"], "language": "python"}]
[{"id": "bibtex-tidy", "name": "bibtex-tidy", "entry": "bibtex-tidy", "language": "node", "types": ["bib"], "files": ""}]
[{"id": "cruft", "name": "cruft", "entry": "cruft check", "require_serial": true, "language": "python", "types": ["python"], "pass_filenames": false}]
[{"id": "autopep8", "name": "autopep8", "description": "A tool that automatically formats Python code to conform to the PEP 8 style guide.", "entry": "autopep8", "language": "python", "types": ["python"], "args": ["-i"]}]
[{"id": "woke", "name": "woke", "entry": "scripts/pre-commit.sh", "language": "script", "description": "Runs `woke`"}, {"id": "woke-from-source", "name": "woke", "entry": "woke", "args": ["--exit-1-on-failure"], "language": "golang", "description": "Runs `woke`, building it from source on demand"}]
[{"id": "anti-trojan-source", "name": "Detect unicode bidi attacks", "description": "Detect trojan source attacks that employ unicode bidi attacks to inject malicious code", "entry": "anti-trojan-source", "language": "node"}]
[{"id": "conventional-commits", "name": "Conventional Commits Minder", "entry": "contrib/scripts/conventional-commits", "language": "script", "description": "Conventional Commits Enforcement at the `git commit` client-side level", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "conventional-commits", "name": "conventional-commits", "description": "Util to validate commit message", "entry": "git-conventional-commits commit-msg-hook", "stages": ["commit-msg"], "language": "node"}]
[{"id": "dbt-osmosis", "name": "dbt-osmosis", "entry": "dbt-osmosis yaml refactor -C", "description": "Run dbt-osmosis on a dbt project.", "language": "python", "require_serial": true, "types_or": ["yaml", "sql"]}]
[{"id": "gitlab-ci-linter", "name": "gitlab ci linter", "description": "Check the .gitlab-ci.yml for valid syntax", "entry": "gitlab-ci-linter", "language": "golang", "types": ["yaml"], "files": ".gitlab-ci.yml$"}]
[{"id": "pep257", "name": "pep257", "entry": "pep257", "language": "python", "files": "\\.py$"}]
[{"id": "validate_config", "name": "Validate Pre-Commit Config", "description": "This validator validates a pre-commit hooks config file", "entry": "pre-commit-validate-config", "language": "python", "files": "^\\.pre-commit-config\\.yaml$"}, {"id": "validate_manifest", "name": "Validate Pre-Commit Manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit-validate-manifest", "language": "python", "files": "^(\\.pre-commit-hooks\\.yaml|hooks\\.yaml)$"}]
[{"id": "ash", "name": "use ASH for checking", "description": "Runs various code scanners in separate Docker containers", "entry": "ash", "verbose": true, "stages": ["commit", "merge-commit", "push", "manual"], "language": "script", "pass_filenames": false, "types_or": ["yaml", "json", "shell", "bash", "python"]}]
[{"id": "jupytext", "name": "jupytext", "description": "Runs jupytext on all notebooks and paired files.", "language": "python", "entry": "jupytext --pre-commit-mode", "require_serial": true, "types_or": ["jupyter", "markdown", "python"]}]
[{"id": "refurb", "name": "refurb", "description": "A tool for refurbishing and modernizing Python codebases.", "entry": "refurb", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "gitown", "name": "gitown", "entry": "gitown", "language": "python", "stages": ["commit"], "description": "Keep your CODEOWNERS file up to date to streamline code review process."}]
[{"id": "kics", "name": "Checkmarx Kics", "description": "This hook runs kics.", "entry": "kics scan -p .", "language": "golang", "pass_filenames": false, "always_run": false, "types_or": ["terraform", "dockerfile", "yaml", "json"], "exclude": "^.*\\.terraform.*$", "require_serial": true}, {"id": "kics-scan", "name": "Checkmarx Kics Scan", "language": "docker", "entry": "kics scan -p /src --no-progress"}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}, {"id": "isort", "name": "isort", "entry": "isort", "language": "python", "types": ["python"], "args": [], "additional_dependencies": []}, {"id": "mypy", "name": "mypy", "entry": "mypy", "language": "python", "types": ["python"], "args": ["--ignore-missing-imports", "--scripts-are-modules"], "require_serial": true, "additional_dependencies": []}, {"id": "flake8", "name": "flake8", "entry": "flake8", "language": "python", "types": ["python"], "additional_dependencies": []}]
[{"id": "validate-sam", "name": "validate-sam", "description": "Validate SAM templates with sam local.", "entry": "validate-sam.sh", "language": "script", "files": "template.yml"}, {"id": "validate-cf", "name": "validate-cf", "description": "Validate CloudFormation templates.", "entry": "validate-cf.sh", "language": "script"}, {"id": "lint-cf", "name": "lint-cf", "description": "Lint Cloudformation templates.", "entry": "lint-cf.sh", "language": "script", "verbose": true}, {"id": "go-vet", "name": "go-vet", "description": "Run go vet across all directories", "entry": "go-vet.sh", "language": "script"}]
[{"id": "my-cmd", "name": "my-cmd", "entry": "my-cmd.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run '$ARGS[0] [$ARGS[1:]] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "my-cmd-mod", "name": "my-cmd-mod", "entry": "my-cmd-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); $ARGS[0] [$ARGS[1:]] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "my-cmd-pkg", "name": "my-cmd-pkg", "entry": "my-cmd-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run '$ARGS[0] [$ARGS[1:]] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "my-cmd-repo", "name": "my-cmd-repo", "entry": "my-cmd-repo.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run '$ARGS[0] [$ARGS[1:]]' in the repo root folder", "pass_filenames": false}, {"id": "my-cmd-repo-mod", "name": "my-cmd-repo-mod", "entry": "my-cmd-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); $ARGS[0] [$ARGS[1:]] /...' for each module in the repo", "pass_filenames": false}, {"id": "my-cmd-repo-pkg", "name": "my-cmd-repo-pkg", "entry": "my-cmd-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run '$ARGS[0] [$ARGS[1:]] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-build-mod", "name": "go-build-mod", "entry": "go-build-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); go build -o /dev/null [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-build-pkg", "name": "go-build-pkg", "entry": "go-build-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go build -o /dev/null [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-build-repo-mod", "name": "go-build-repo-mod", "entry": "go-build-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); go build -o /dev/null [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-build-repo-pkg", "name": "go-build-repo-pkg", "entry": "go-build-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go build -o /dev/null [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-critic", "name": "go-critic", "entry": "go-critic.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'gocritic check [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-fmt", "name": "go-fmt", "entry": "go-fmt.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'gofmt -l -d [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-fmt-repo", "name": "go-fmt-repo", "entry": "go-fmt-repo.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'gofmt -l -d [$ARGS] .' in repo root folder", "pass_filenames": false}, {"id": "go-fumpt", "name": "go-fumpt", "entry": "go-fumpt.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'fumpt -l -d [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-fumpt-repo", "name": "go-fumpt-repo", "entry": "go-fumpt-repo.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'fumpt -l -d [$ARGS] .' in repo root folder", "pass_filenames": false}, {"id": "go-imports", "name": "go-imports", "entry": "go-imports.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'goimports -l -d [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-imports-repo", "name": "go-imports-repo", "entry": "go-imports-repo.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'goimports -l -d [$ARGS] .' in repo root folder", "pass_filenames": false}, {"id": "go-lint", "name": "go-lint", "entry": "go-lint.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'golint -set_exit_status [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "go-mod-tidy.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); go mod tidy [$ARGS]' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-mod-tidy-repo", "name": "go-mod-tidy-repo", "entry": "go-mod-tidy-repo.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); go mod tidy [$ARGS]' for each module in the repo", "pass_filenames": false}, {"id": "go-returns", "name": "go-returns", "entry": "go-returns.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'goreturns -l -d [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-returns-repo", "name": "go-returns-repo", "entry": "go-returns-repo.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'goreturns -l -d [$ARGS] .' in repo root folder", "pass_filenames": false}, {"id": "go-revive", "name": "go-revive", "entry": "go-revive.sh", "files": "(\\.go$)|(\\brevive\\.toml$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'revive [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "go-revive-mod", "name": "go-revive-mod", "entry": "go-revive-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)|(\\brevive\\.toml$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); revive [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-revive-repo-mod", "name": "go-revive-repo-mod", "entry": "go-revive-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)|(\\brevive\\.toml$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); revive [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-sec-mod", "name": "go-sec-mod", "entry": "go-sec-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); gosec [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-sec-pkg", "name": "go-sec-pkg", "entry": "go-sec-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'gosec [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-sec-repo-mod", "name": "go-sec-repo-mod", "entry": "go-sec-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); gosec [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-sec-repo-pkg", "name": "go-sec-repo-pkg", "entry": "go-sec-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'gosec [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-staticcheck-mod", "name": "go-staticcheck-mod", "entry": "go-staticcheck-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); staticcheck [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-staticcheck-pkg", "name": "go-staticcheck-pkg", "entry": "go-staticcheck-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'staticcheck [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-staticcheck-repo-mod", "name": "go-staticcheck-repo-mod", "entry": "go-staticcheck-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); staticcheck [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-staticcheck-repo-pkg", "name": "go-staticcheck-repo-pkg", "entry": "go-staticcheck-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'staticcheck [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-structslop-mod", "name": "go-structslop-mod", "entry": "go-structslop-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); structslop [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-structslop-pkg", "name": "go-structslop-pkg", "entry": "go-structslop-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'structslop [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-structslop-repo-mod", "name": "go-structslop-repo-mod", "entry": "go-structslop-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); structslop [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-structslop-repo-pkg", "name": "go-structslop-repo-pkg", "entry": "go-structslop-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'structslop [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-test-mod", "name": "go-test-mod", "entry": "go-test-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); go test [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-test-pkg", "name": "go-test-pkg", "entry": "go-test-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go test [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-test-repo-mod", "name": "go-test-repo-mod", "entry": "go-test-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); go test [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-test-repo-pkg", "name": "go-test-repo-pkg", "entry": "go-test-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go test [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-vet-mod", "name": "go-vet-mod", "entry": "go-vet-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); go vet [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-vet-pkg", "name": "go-vet-pkg", "entry": "go-vet-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go vet [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "go-vet-repo-mod", "name": "go-vet-repo-mod", "entry": "go-vet-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); go vet [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "go-vet-repo-pkg", "name": "go-vet-repo-pkg", "entry": "go-vet-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go vet [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "go-vet", "name": "go-vet", "entry": "go-vet.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'go vet [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}, {"id": "golangci-lint-mod", "name": "golangci-lint-mod", "entry": "golangci-lint-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root $FILE); golangci-lint run [$ARGS] ./...' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "golangci-lint-pkg", "name": "golangci-lint-pkg", "entry": "golangci-lint-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'golangci-lint run [$ARGS] ./$(dirname $FILE)' for each staged .go file", "pass_filenames": true, "require_serial": true}, {"id": "golangci-lint-repo-mod", "name": "golangci-lint-repo-mod", "entry": "golangci-lint-repo-mod.sh", "files": "(\\.go$)|(\\bgo\\.mod$)", "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'cd $(mod_root); golangci-lint run [$ARGS] ./...' for each module in the repo", "pass_filenames": false}, {"id": "golangci-lint-repo-pkg", "name": "golangci-lint-repo-pkg", "entry": "golangci-lint-repo-pkg.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'golangci-lint run [$ARGS] ./...' in repo root folder", "pass_filenames": false}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "golangci-lint.sh", "types": ["go"], "exclude": "(^|/)vendor/", "language": "script", "description": "Run 'golangci-lint run [$ARGS] $FILE' for each staged .go file", "pass_filenames": true}]
[{"id": "towncrier-check", "name": "towncrier-check", "description": "Check towncrier changelog updates", "entry": "towncrier --draft", "pass_filenames": false, "types": ["text"], "files": "newsfragments/", "language": "python"}, {"id": "towncrier-update", "name": "towncrier-update", "description": "Update changelog with towncrier", "entry": "towncrier", "pass_filenames": false, "args": ["--yes"], "files": "newsfragments/", "language": "python"}]
[{"id": "pdoc", "name": "pdoc", "description": "pdoc: Auto-generate API documentation for Python projects", "entry": "pdoc", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "action-validator", "name": "action validator", "entry": "bin/run-action-validator", "files": ".github/workflows/.*\\.ya?ml", "language": "script", "description": "Validate GitHub Actions workflows"}]
[{"id": "check-flux-helm-values", "name": "Check flux helm values", "description": "Verify that values used by flux HelmReleases are ok.", "entry": "check-flux-helm-values", "language": "python", "files": "^[^.].*\\.yaml$"}]
[{"id": "k8t-validate", "name": "k8t validate", "description": "This hook validates k8t manifests", "entry": "k8t", "args": ["validate"], "language": "python", "pass_filenames": false, "always_run": true}, {"id": "k8t-generate", "name": "k8t generate", "description": "This hook generates k8t manifests", "entry": "pre_commit_hooks/k8t-generate", "language": "script", "pass_filenames": false, "always_run": true, "args": ["-o", "k8t-generated.yaml"]}]
[{"id": "bundler-audit", "name": "Patch-level verification for bundler", "description": "Check for vulnerable gem versions and insecure sources", "entry": "run-bundle-audit", "language": "ruby", "pass_filenames": false, "files": "Gemfile.lock", "args": ["--update"]}, {"id": "check-mailmap", "name": "Detect if an email address needs to be added to mailmap", "language": "script", "entry": "pre_commit_hooks/check-mailmap", "always_run": true, "exclude": ".*"}, {"id": "fasterer", "name": "Suggest speed improvements in Ruby", "description": "Use fasterer to suggest speed improvements in Ruby", "entry": "run-fasterer", "language": "ruby", "types": ["ruby"]}, {"id": "forbid-binary", "name": "Forbid binaries", "description": "Forbid binary files from being committed", "entry": "pre_commit_hooks/forbid-binary", "language": "script", "types": ["binary"]}, {"id": "forbid-space-in-indent", "name": "Forbid spaces in indentation", "description": "Forbid spaces in indentation", "entry": "pre_commit_hooks/forbid-space-in-indent", "language": "script"}, {"id": "git-check", "name": "Check for conflict markers and core.whitespace errors", "description": "Use git to check for conflict markers and core.whitespace errors, respecting .gitattributes", "entry": "pre_commit_hooks/git-check", "language": "script"}, {"id": "git-dirty", "name": "Check if the git tree is dirty", "description": "Detect if git tree contains modified, staged, or untracked files", "entry": "pre_commit_hooks/git-dirty", "language": "script"}, {"id": "markdownlint", "name": "Check markdown files", "description": "Check markdown files and flag style issues", "entry": "run-mdl", "language": "ruby", "types": ["markdown"]}, {"id": "protect-first-parent", "name": "Protect first parent", "description": "Protect first parent from foxtrot merges", "entry": "pre_commit_hooks/protect-first-parent", "language": "script", "always_run": true, "pass_filenames": false}, {"id": "reek", "name": "Find ruby code smells", "description": "Use reek to find ruby code smells", "entry": "run-reek", "language": "ruby", "types": ["ruby"]}, {"id": "require-ascii", "name": "Check file encoding", "description": "Ensure file is ascii-encoded", "entry": "require-ascii.py", "language": "python", "types": ["text"]}, {"id": "rubocop", "name": "Check Ruby style with rubocop and rubocop-rspec", "description": "Enforce Ruby style guide with rubocop and rubocop-rspec", "entry": "run-rubocop", "language": "ruby", "types": ["ruby"]}, {"id": "shellcheck", "name": "Test shell scripts with shellcheck", "description": "Shell scripts conform to shellcheck", "entry": "pre_commit_hooks/shellcheck", "language": "script", "types": ["shell"], "args": ["-e", "SC1091"]}, {"id": "script-must-have-extension", "name": "Non-executable shell script filename ends in .sh", "description": "Non-executable shell script filename ends in .sh", "entry": "pre_commit_hooks/script_must_have_extension", "language": "script", "types": ["shell", "non-executable"]}, {"id": "script-must-not-have-extension", "name": "Executable shell script omits the filename extension", "description": "Executable shell script omits the filename extension", "entry": "pre_commit_hooks/script_must_not_have_extension", "language": "script", "types": ["shell", "executable"]}, {"id": "shfmt", "name": "Check shell style with shfmt", "language": "script", "entry": "pre_commit_hooks/shfmt", "types": ["shell"]}]
[{"id": "check-column-desc-are-same", "name": "Check column descriptions are same", "description": "Check the models have same descriptions for same column names.", "entry": "check-column-desc-are-same", "language": "python", "files": ".*\\.(yml|yaml)$"}, {"id": "check-column-name-contract", "name": "Check column name contract", "description": "Check column name abides to contract.", "entry": "check-column-name-contract", "language": "python", "types": ["sql"]}, {"id": "check-macro-has-description", "name": "Check the macro has description", "description": "Ensures that the macro has description in properties file.", "entry": "check-macro-has-description", "language": "python", "types_or": ["yaml", "sql"], "require_serial": true}, {"id": "check-macro-arguments-have-desc", "name": "Check the macro arguments have description", "description": "Ensures that the macro has arguments with descriptions in properties file.", "entry": "check-macro-arguments-have-desc", "language": "python", "types_or": ["yaml", "sql"], "require_serial": true}, {"id": "check-model-columns-have-desc", "name": "Check the model columns have description", "description": "Ensures that the model has columns with descriptions in properties file.", "entry": "check-model-columns-have-desc", "language": "python", "types_or": ["yaml", "sql"], "require_serial": true}, {"id": "check-model-has-all-columns", "name": "Check the model has all columns in properties file", "description": "Ensures that all columns in database are specified in properties file.", "entry": "check-model-has-all-columns", "language": "python", "types": ["sql"]}, {"id": "check-model-has-description", "name": "Check the model has description", "description": "Ensures that the model has description in properties file.", "entry": "check-model-has-description", "language": "python", "types_or": ["yaml", "sql"], "require_serial": true}, {"id": "check-model-has-meta-keys", "name": "Check the model has keys in the meta part", "description": "Ensures that the model has a list of valid meta keys.", "entry": "check-model-has-meta-keys", "language": "python", "types_or": ["yaml", "sql"], "require_serial": true}, {"id": "check-model-has-properties-file", "name": "Check the model has properties file", "description": "Ensures that the model has properties file (schema file).", "entry": "check-model-has-properties-file", "language": "python", "types": ["sql"]}, {"id": "check-model-has-tests-by-group", "name": "Check the model has a number of tests from a group of tests.", "description": "Ensures that the model has a number of tests from a group of tests.", "entry": "check-model-has-tests-by-group", "language": "python", "types": ["sql"]}, {"id": "check-model-has-tests-by-name", "name": "Check the model tests by a test name", "description": "Ensures that the model has a number of tests of a certain name (e.g. data, unique).", "entry": "check-model-has-tests-by-name", "language": "python", "types": ["sql"]}, {"id": "check-model-has-tests-by-type", "name": "Check the model tests by a test type", "description": "Ensures that the model has a number of tests of a certain type (data, schema).", "entry": "check-model-has-tests-by-type", "language": "python", "types": ["sql"]}, {"id": "check-model-has-tests", "name": "Check the model has a tests", "description": "Ensures that the model has a number of tests.", "entry": "check-model-has-tests", "language": "python", "types": ["sql"]}, {"id": "check-model-name-contract", "name": "Check model name contract", "description": "Check model name abides to contract.", "entry": "check-model-name-contract", "language": "python", "types": ["sql"]}, {"id": "check-model-parents-and-childs", "name": "Check the model has a parents/childs", "description": "Ensures the model has a specific number (max/min) of parents or/and childs.", "entry": "check-model-parents-and-childs", "language": "python", "types": ["sql"]}, {"id": "check-model-tags", "name": "Check the model has valid tags", "description": "Ensures that the model has only valid tags from the provided list.", "entry": "check-model-tags", "language": "python", "types": ["sql"]}, {"id": "check-script-has-no-table-name", "name": "Check the script has not table name", "description": "Ensures that the script is using only source or ref macro to specify the table name.", "entry": "check-script-has-no-table-name", "language": "python", "types": ["sql"]}, {"id": "check-script-ref-and-source", "name": "Check the script has existing refs and sources", "description": "Ensures that the script contains only existing sources or macros.", "entry": "check-script-ref-and-source", "language": "python", "types": ["sql"]}, {"id": "check-script-semicolon", "name": "Check the script does not contain a semicolon", "description": "Ensure that the script does not have a semicolon at the end of the file.", "entry": "check-script-semicolon", "language": "python", "types": ["sql"]}, {"id": "check-source-childs", "name": "Check the source has a specific number (max/min) of childs.", "description": "Ensures the source has a specific number (max/min) of childs.", "entry": "check-source-childs", "language": "python", "types": ["sql"]}, {"id": "check-source-columns-have-desc", "name": "Check for source column descriptions", "description": "Ensures that the source has columns with descriptions in the properties file.", "entry": "check-source-columns-have-desc", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-all-columns", "name": "Check the source has all columns in the properties file", "description": "Ensures that all columns in the database are specified in the properties file.", "entry": "check-source-has-all-columns", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-table-has-description", "name": "Check the source table has description", "description": "Ensures that the source table has description in properties file.", "entry": "check-source-table-has-description", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-freshness", "name": "Check the source has the freshness", "description": "Ensures that the source has freshness options.", "entry": "check-source-has-freshness", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-loader", "name": "Check the source has loader option", "description": "Ensures that the source has loader option.", "entry": "check-source-has-loader", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-meta-keys", "name": "Check the source has keys in the meta part", "description": "Ensures that the source has a list of valid meta keys.", "entry": "check-source-has-meta-keys", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-tests-by-name", "name": "Check the source tests by test name", "description": "Ensures that the source has a number of tests of a certain name (e.g. data, unique).", "entry": "check-source-has-tests-by-name", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-tests-by-type", "name": "Check the source tests by test type", "description": "Ensures that the source has a number of tests of a certain type (data, schema).", "entry": "check-source-has-tests-by-type", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-has-tests", "name": "Check the source has tests", "description": "Ensures that the source has a number of tests.", "entry": "check-source-has-tests", "language": "python", "types_or": ["yaml"]}, {"id": "check-source-tags", "name": "Check the source has valid tags", "description": "Ensures that the source has only valid tags from the provided list.", "entry": "check-source-tags", "language": "python", "types_or": ["yaml"]}, {"id": "dbt-clean", "name": "dbt clean", "description": "Deletes all folders specified in the clean-targets.", "entry": "dbt-clean", "language": "python", "pass_filenames": false}, {"id": "dbt-compile", "name": "dbt compile", "description": "Generates executable SQL from source model, test, and analysis files.", "entry": "dbt-compile", "language": "python", "types": ["sql"], "require_serial": true}, {"id": "dbt-deps", "name": "dbt deps", "description": "Pulls the most recent version of the dependencies listed in your packages.yml.", "entry": "dbt-deps", "language": "python", "pass_filenames": false}, {"id": "dbt-docs-generate", "name": "dbt docs generate", "description": "The command is responsible for generating your project's documentation website.", "entry": "dbt-docs-generate", "language": "python", "pass_filenames": false}, {"id": "dbt-run", "name": "dbt run", "description": "Executes compiled sql model files.", "entry": "dbt-run", "language": "python", "require_serial": true, "types": ["sql"]}, {"id": "dbt-test", "name": "dbt test", "description": "Runs tests on data in deployed models.", "entry": "dbt-test", "language": "python", "require_serial": true, "types": ["sql"]}, {"id": "generate-missing-sources", "name": "Generate missing sources", "description": "If any source is missing this hook tries to create it.", "entry": "generate-missing-sources", "language": "python", "types": ["sql"]}, {"id": "generate-model-properties-file", "name": "Generate model properties file", "description": "Generate model properties file if does not exists.", "entry": "generate-model-properties-file", "language": "python", "types": ["sql"], "args": ["--properties-file", "/Users/tomsejr/Documents/03-Workspace/Private/jaffle_shop/{database}/{schema}/{name}.yml"], "require_serial": true}, {"id": "unify-column-description", "name": "Unify column description", "description": "Unify column descriptions across all models", "entry": "unify-column-description", "language": "python", "files": ".*\\.(yml|yaml)$", "require_serial": true}, {"id": "replace-script-table-names", "name": "Replace script table names", "description": "Replace table names with source or ref macros in the script.", "entry": "replace-script-table-names", "language": "python", "types": ["sql"]}, {"id": "remove-script-semicolon", "name": "Remove script semicolon", "description": "Remove semicolon at the end of the script.", "entry": "remove-script-semicolon", "language": "python", "types": ["sql"]}]
[{"id": "poetry-sort", "name": "poetry-sort", "description": "sort dependencies in pyproject.toml", "entry": "poetry sort", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}]
[{"id": "standard", "name": "standard", "entry": "standard --fix", "language": "node", "files": "\\.(js|jsx|mjs|cjs)$"}]
[{"id": "standard", "name": "standard", "entry": "standard --fix", "language": "node", "files": "\\.(js|jsx|mjs|cjs)$"}]
[{"id": "standard", "name": "standard", "entry": "standard --fix", "language": "node", "files": "\\.(js|jsx|mjs|cjs)$"}]
[{"id": "standard", "name": "standard", "entry": "standard --fix", "language": "node", "files": "\\.(js|jsx|mjs|cjs)$"}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "poetry-check", "name": "poetry-check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "pass_filenames": false, "files": "^(.*/)?pyproject\\.toml$"}, {"id": "poetry-lock", "name": "poetry-lock", "description": "run poetry lock to update lock file", "entry": "poetry lock", "language": "python", "pass_filenames": false, "files": "^(.*/)?(poetry\\.lock|pyproject\\.toml)$"}, {"id": "poetry-export", "name": "poetry-export", "description": "run poetry export to sync lock file with requirements.txt", "entry": "poetry export", "language": "python", "pass_filenames": false, "files": "^(.*/)?poetry\\.lock$", "args": ["-f", "requirements.txt", "-o", "requirements.txt"]}, {"id": "poetry-install", "name": "poetry-install", "description": "run poetry install to install dependencies from the lock file", "entry": "poetry install", "language": "python", "pass_filenames": false, "stages": ["post-checkout", "post-merge"], "always_run": true}]
[{"id": "gitleaks", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "gitleaks protect --verbose --redact --staged", "language": "golang", "pass_filenames": false}, {"id": "gitleaks-docker", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "zricethezav/gitleaks protect --verbose --redact --staged", "language": "docker_image"}]
[{"id": "doctoc", "name": "doctoc", "language": "node", "entry": "doctoc", "types": ["markdown"]}]
[{"id": "trufflehog", "name": "TruffleHog", "description": "Detect secrets in your data with TruffleHog.", "entry": "trufflehog git file://. --since-commit HEAD --only-verified --fail", "language": "golang", "pass_filenames": false}]
[{"id": "pylint", "name": "pylint", "entry": "pylint", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "pylint", "name": "pylint", "entry": "pylint", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "pylint", "name": "pylint", "entry": "pylint", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "infracost_breakdown", "name": "Infracost breakdown", "description": "Check terraform infrastructure cost", "entry": "hooks/infracost_breakdown.sh", "language": "script", "require_serial": true, "files": "\\.(tf(vars)?|hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "hooks/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf|\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_without_aggregate_type_defaults", "name": "Terraform docs (without aggregate type defaults)", "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_replace", "name": "Terraform docs (overwrite README.md)", "description": "Overwrite content of README.md with terraform-docs.", "require_serial": true, "entry": "terraform_docs_replace", "language": "python", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "hooks/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_providers_lock", "name": "Lock terraform provider versions", "description": "Updates provider signatures in dependency lock files.", "require_serial": true, "entry": "hooks/terraform_providers_lock.sh", "language": "script", "files": "(\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "require_serial": true, "entry": "hooks/terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format.", "entry": "hooks/terragrunt_fmt.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files.", "entry": "hooks/terragrunt_validate.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "require_serial": true, "entry": "hooks/terraform_tfsec.sh", "language": "script"}, {"id": "checkov", "name": "checkov (deprecated, use \"terraform_checkov\")", "description": "Runs checkov on Terraform templates.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terraform_checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "hooks/terraform_checkov.sh", "language": "script", "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terraform_wrapper_module_for_each", "name": "Terraform wrapper with for_each in module", "description": "Generate Terraform wrappers with for_each in module.", "entry": "hooks/terraform_wrapper_module_for_each.sh", "language": "script", "pass_filenames": false, "always_run": false, "require_serial": true, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$"}, {"id": "terrascan", "name": "terrascan", "description": "Runs terrascan on Terraform templates.", "language": "script", "entry": "hooks/terrascan.sh", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "tfupdate", "name": "tfupdate", "description": "Runs tfupdate on Terraform templates.", "language": "script", "entry": "hooks/tfupdate.sh", "args": ["--args=terraform"], "files": "\\.tf$", "require_serial": true}]
[{"id": "ejson", "name": "ejson encrypt", "description": "Encrypts ejson files", "entry": "ejson encrypt", "language": "golang", "files": "ejson"}]
[{"id": "helm-docs", "args": [], "description": "Uses 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "git-hook/helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "script", "name": "Helm Docs", "require_serial": true}, {"id": "helm-docs-built", "args": [], "description": "Uses auto built 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "golang", "name": "Helm Docs Built", "require_serial": true}]
[{"id": "helm-docs", "args": [], "description": "Uses 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "git-hook/helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "script", "name": "Helm Docs", "require_serial": true}, {"id": "helm-docs-built", "args": [], "description": "Uses auto built 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "golang", "name": "Helm Docs Built", "require_serial": true}]
[{"id": "helm-docs", "args": [], "description": "Uses 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "git-hook/helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "script", "name": "Helm Docs", "require_serial": true}, {"id": "helm-docs-built", "args": [], "description": "Uses auto built 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "golang", "name": "Helm Docs Built", "require_serial": true}]
[{"id": "CredSweeper", "name": "CredSweeper", "description": "Advanced credential scanner", "entry": "python -m credsweeper --path", "language": "python", "types": ["text"]}]
[{"id": "setuptools-odoo-make-default", "name": "Generate default setup.py for an addons directory", "always_run": true, "entry": "setuptools-odoo-make-default", "args": ["--addons-dir=.", "--clean"], "language": "python", "pass_filenames": false}, {"id": "setuptools-odoo-get-requirements", "name": "Generate requirements.txt for an addons directory", "entry": "setuptools-odoo-get-requirements", "args": ["--output=requirements.txt"], "language": "python", "pass_filenames": false, "files": "(__manifest__\\.py|__openerp__\\.py|__terp__\\.py|setup\\.py)$"}]
[{"id": "pdm-lock-check", "name": "pdm-lock-check", "description": "run pdm lock --check to validate config", "entry": "pdm lock --check", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}, {"id": "pdm-export", "name": "pdm-export-lock", "description": "export locked packages to requirements.txt or setup.py", "entry": "pdm export", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pdm.lock$"}]
[{"args": ["git-hook", "pre-commit"], "entry": "dvc", "id": "dvc-pre-commit", "language": "python", "language_version": "python3", "name": "DVC pre-commit", "require_serial": true, "stages": ["commit"], "verbose": true}, {"args": ["git-hook", "pre-push"], "entry": "dvc", "id": "dvc-pre-push", "language": "python", "language_version": "python3", "name": "DVC pre-push", "require_serial": true, "stages": ["push"]}, {"always_run": true, "args": ["git-hook", "post-checkout"], "entry": "dvc", "id": "dvc-post-checkout", "language": "python", "language_version": "python3", "minimum_pre_commit_version": "2.2.0", "name": "DVC post-checkout", "require_serial": true, "stages": ["post-checkout"]}]
[{"id": "pyupgrade", "name": "pyupgrade", "description": "Automatically upgrade syntax for newer versions.", "entry": "pyupgrade", "language": "python", "types": ["python"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "pyupgrade", "name": "pyupgrade", "description": "Automatically upgrade syntax for newer versions.", "entry": "pyupgrade", "language": "python", "types": ["python"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "flake8", "name": "flake8", "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "flake8", "name": "flake8", "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "darker", "name": "darker", "description": "Black reformatting to Python files only in regions changed since last commit", "entry": "darker -r :PRE-COMMIT:", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "dotnet-format", "name": "dotnet format", "language": "dotnet", "types_or": ["c#", "vb"], "entry": "dotnet-format --include"}]
[{"id": "dotnet-format", "name": "dotnet format", "language": "dotnet", "types_or": ["c#", "vb"], "entry": "dotnet-format --include"}]
[{"id": "swiftformat", "name": "SwiftFormat", "description": "Check swift files for formating issues with SwiftFormat", "entry": "swiftformat", "language": "swift", "types": ["swift"]}]
[{"id": "validate_config", "name": "Validate Pre-Commit Config", "description": "This validator validates a pre-commit hooks config file", "entry": "pre-commit-validate-config", "language": "python", "files": "^\\.pre-commit-config\\.yaml$"}, {"id": "validate_manifest", "name": "Validate Pre-Commit Manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit-validate-manifest", "language": "python", "files": "^(\\.pre-commit-hooks\\.yaml|hooks\\.yaml)$"}]
[{"id": "validate_config", "name": "Validate Pre-Commit Config", "description": "This validator validates a pre-commit hooks config file", "entry": "pre-commit-validate-config", "language": "python", "files": "^\\.pre-commit-config\\.yaml$"}, {"id": "validate_manifest", "name": "Validate Pre-Commit Manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit-validate-manifest", "language": "python", "files": "^(\\.pre-commit-hooks\\.yaml|hooks\\.yaml)$"}]
[{"id": "validate_config", "name": "Validate Pre-Commit Config", "description": "This validator validates a pre-commit hooks config file", "entry": "pre-commit-validate-config", "language": "python", "files": "^\\.pre-commit-config\\.yaml$"}, {"id": "validate_manifest", "name": "Validate Pre-Commit Manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit-validate-manifest", "language": "python", "files": "^(\\.pre-commit-hooks\\.yaml|hooks\\.yaml)$"}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}, {"id": "isort", "name": "isort", "entry": "isort", "language": "python", "types": ["python"], "args": [], "additional_dependencies": []}, {"id": "mypy", "name": "mypy", "entry": "mypy", "language": "python", "types": ["python"], "args": ["--ignore-missing-imports", "--scripts-are-modules"], "require_serial": true, "additional_dependencies": []}, {"id": "flake8", "name": "flake8", "entry": "flake8", "language": "python", "types": ["python"], "additional_dependencies": []}]
[{"id": "nbformat", "name": "nbformat", "description": "Run 'nbformat' on a Jupyter Notebook", "entry": "python -m tensorflow_docs.tools.nbfmt", "language": "python", "language_version": "python3", "require_serial": true, "types": ["jupyter"], "additional_dependencies": []}]
[{"id": "failing_hook", "name": "Failing hook", "entry": "bin/hook.sh", "language": "script", "files": "."}]
[{"id": "actionlint", "name": "Lint GitHub Actions workflow files", "description": "Runs actionlint to lint GitHub Actions workflow files", "language": "golang", "types": ["yaml"], "files": "^\\.github/workflows/", "entry": "actionlint", "minimum_pre_commit_version": "3.0.0"}, {"id": "actionlint-docker", "name": "Lint GitHub Actions workflow files", "description": "Runs actionlint Docker image to lint GitHub Actions workflow files", "language": "docker_image", "types": ["yaml"], "files": "^\\.github/workflows/", "entry": "rhysd/actionlint:1.6.25"}, {"id": "actionlint-system", "name": "Lint GitHub Actions workflow files", "description": "Runs system-installed actionlint to lint GitHub Actions workflow files", "language": "system", "types": ["yaml"], "files": "^\\.github/workflows/", "entry": "actionlint"}]
[{"id": "alejandra", "name": "alejandra", "description": "Format Nix code with Alejandra.", "entry": "alejandra", "language": "rust", "files": "\\.nix$", "minimum_pre_commit_version": "2.21.0"}, {"id": "alejandra-nix", "name": "alejandra (Nix)", "description": "Format Nix code with Alejandra.", "entry": ".pre-commit-entry.sh", "language": "script", "files": "\\.nix$", "minimum_pre_commit_version": "1.18.1"}, {"id": "alejandra-system", "name": "alejandra (system)", "description": "Format Nix code with Alejandra.", "entry": "alejandra", "language": "system", "files": "\\.nix$", "args": ["-q"]}]
[{"id": "markdown-link-check", "name": "Markdown Link Check", "description": "Extracts links from markdown texts and checks they're all alive (i.e. return status 200 OK).", "entry": "markdown-link-check", "language": "node", "types": ["markdown"], "stages": ["commit", "push", "manual"]}]
[{"id": "protolint", "name": "Lint Protocol Buffer Files", "description": "Runs protolint to lint Protocol Buffer files", "language": "golang", "types": ["proto"], "entry": "protolint lint"}, {"id": "protolint-docker", "name": "Lint Protocol Buffer Files", "description": "Runs protolint Docker image to lint Protocol Buffer files", "language": "docker_image", "types": ["proto"], "entry": "yoheimuta/protolint lint"}]
[{"id": "tmt-lint", "name": "tmt lint", "entry": "bash -c \"git ls-files --error-unmatch $(python3 -c 'import tmt; print(tmt.Tree(logger=tmt.Logger.create(), path=\\\".\\\").root)')/.fmf/version && tmt lint --failed-only --source $@\" PAD", "files": ".*\\.fmf$", "verbose": false, "pass_filenames": true, "language": "python", "language_version": "python3"}, {"id": "tmt-tests-lint", "name": "tmt tests lint", "entry": "bash -c \"git ls-files --error-unmatch $(python3 -c 'import tmt; print(tmt.Tree(logger=tmt.Logger.create(), path=\\\".\\\").root)')/.fmf/version && tmt tests lint --failed-only --source $@\" PAD", "files": ".*\\.fmf$", "verbose": false, "pass_filenames": true, "language": "python", "language_version": "python3"}, {"id": "tmt-plans-lint", "name": "tmt plans lint", "entry": "bash -c \"git ls-files --error-unmatch $(python3 -c 'import tmt; print(tmt.Tree(logger=tmt.Logger.create(), path=\\\".\\\").root)')/.fmf/version && tmt plans lint --failed-only --source $@\" PAD", "files": ".*\\.fmf$", "verbose": false, "pass_filenames": true, "language": "python", "language_version": "python3"}, {"id": "tmt-stories-lint", "name": "tmt stories lint", "entry": "bash -c \"git ls-files --error-unmatch $(python3 -c 'import tmt; print(tmt.Tree(logger=tmt.Logger.create(), path=\\\".\\\").root)')/.fmf/version && tmt stories lint --failed-only --source $@\" PAD", "files": ".*\\.fmf$", "verbose": false, "pass_filenames": true, "language": "python", "language_version": "python3"}]
[{"id": "mdformat", "name": "mdformat", "description": "CommonMark compliant Markdown formatter", "entry": "mdformat", "language": "python", "types": ["markdown"], "minimum_pre_commit_version": "1.0.0"}]
[{"id": "seiso-lint", "name": "Lint (via the \ud83d\udc10)", "language": "system", "entry": "task lint", "pass_filenames": false}]
[{"id": "balderdash", "name": "Balderdash", "description": "This hook checks for profanity in your codebase.", "entry": "./balderdash.sh", "language": "script", "args": ["check"]}]
[{"id": "qs-cfn-lint", "name": "AWS Quick Start Linter", "entry": "cfn-lint", "language": "python", "files": "\\.(json|yaml|yml)$"}, {"id": "qs-cfn-lint-wrapped", "name": "AWS Quick Start Linter", "entry": "wrapped-cfn-lint", "language": "python", "files": "\\.(json|yaml|yml)$"}, {"id": "files-are-cfn", "name": "Validates files are CFN", "entry": "files-are-cfn", "language": "python", "types_or": ["json", "yaml"]}, {"id": "files-are-not-cfn", "name": "Validates files are not CFN", "entry": "files-are-cfn", "language": "python", "types_or": ["json", "yaml"], "args": ["-i"]}]
[{"id": "ansible-vault-check", "name": "Validate ansible vault files", "description": "Checks that vault files are encrypted", "entry": "ansible-vault-check.sh", "files": "\\.*vault.*\\.*$", "language": "script"}]
[{"id": "sentinel_fmt", "name": "Sentinel fmt", "description": "Rewrites all Sentinel configuration files to a canonical format.", "entry": "sentinel_fmt.sh", "language": "script", "files": "\\.sentinel$", "exclude": "\\.terraform\\/.*$"}]
[{"id": "peon", "name": "Python \"Elegant Object\" Naive linter.", "description": "This hook check your code for \"Elegant Object\" principles (proposed by yegor256)", "entry": "peon", "language": "python", "types": ["file", "python"]}]
[{"id": "copyright-checker", "name": "Pivotal Copyright Checker", "description": "Ensure that the copyright is on python files", "entry": "copyright-checker", "language": "python", "types": ["python"], "exclude": "^.git/|^.idea/|^.venv/|migrations/", "minimum_pre_commit_version": "0.15.0"}, {"id": "check-futures", "name": "Pivotal futures Checker", "description": "Ensure that futures are in place", "entry": "check-futures", "language": "python", "types": ["python"], "exclude": "^.git/|^.idea/|^.venv/|migrations/", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "hlint", "name": "hlint", "description": "HLint gives suggestions on how to improve your source code.", "entry": "hlint", "language": "system", "files": "\\.l?hs$"}, {"id": "stylish-haskell", "name": "stylish-haskell", "description": "Haskell code prettifier.", "entry": "stylish-haskell --inplace", "language": "system", "files": "\\.l?hs$"}]
[{"id": "clang-format", "name": "clang-format", "description": "Format files with ClangFormat.", "entry": "clang-format -i", "language": "system", "files": "\\.(c|cc|cxx|cpp|frag|glsl|h|hpp|hxx|ih|ispc|ipp|java|js|m|mm|proto|textproto|vert)$", "args": ["-fallback-style=none"]}]
[{"id": "ec0lint", "name": "ec0lint", "entry": "ec0lint", "description": "An AST-based pattern checker for JavaScript.", "language": "node", "types": ["javascript"], "require_serial": false}]
[{"id": "js-beautify", "name": "js-beautify", "entry": "js-beautify", "language": "node", "types": ["text"], "args": [], "require_serial": false, "additional_dependencies": ["js-beautify@1.14.0"]}]
[{"id": "check-sdist", "name": "check sdist", "description": "Check the contents of the SDist", "entry": "check-sdist --no-isolation", "language": "python", "language_version": "python3", "pass_filenames": false, "always_run": true, "args": ["--inject-junk"]}, {"id": "check-sdist-isolated", "name": "check sdist (isolated)", "description": "Check the contents of the SDist (isolated build)", "entry": "check-sdist", "language": "python", "language_version": "python3", "pass_filenames": false, "always_run": true}]
[{"id": "yarnlint", "name": "yarnlint", "entry": "yarn", "language": "node", "types": ["javascript"], "args": ["lint"], "require_serial": false, "additional_dependencies": [""]}]
[{"id": "git-crypt", "name": "Avoid to commit unencrypted files", "description": "Pre-commit hook to avoid accidentally adding unencrypted files with git-crypt", "entry": "check-git-crypt.sh", "language": "script"}]
[{"id": "pre-commit-generate-manifests", "name": "Generate Configmap Manifests", "entry": "manifests/generate-manifests.sh", "language": "script", "description": "Generates ConfigMap manifests from source files", "always_run": true, "stages": ["commit-msg"]}, {"id": "pre-commit-generate-alert-rulesets", "name": "Generate Alert Rulesets", "entry": "alerts/generate-rulesets.sh", "language": "script", "description": "Generates AlertManager manifests from source files", "always_run": true, "stages": ["commit-msg"]}, {"id": "pre-commit-lint-alert-rulesets", "name": "Lint Alert Rulesets using Pint", "entry": "pint/lint.sh", "language": "script", "description": "Runs pint against source AlertManager files", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "constcheck", "name": "constcheck", "entry": "constcheck", "description": "check python files for repeat use of strings", "language": "python", "types": ["python"]}]
[{"id": "shortcut-commit-msg-hook", "name": "Prefix Shortcut Story ID", "description": "If present in the branch name, this hook prepends the Story ID to the commit message", "entry": "hook.sh", "language": "script", "always_run": true, "stages": ["prepare-commit-msg"]}]
[{"id": "circleci-validate", "name": "Validate CircleCI config yaml", "description": "Validate CircleCI config yaml", "entry": "pre-commit-circleci-validate", "language": "script", "files": "[.]circleci/config.yml$", "pass_filenames": false}, {"id": "gen-docs", "name": "Generate a Docs Index", "description": "Generate a Docs Index", "entry": "npx adr", "language": "node", "args": ["docs/adr"], "types": ["file", "markdown"], "pass_filenames": false}, {"id": "goreleaser-check", "name": "Validate goreleaser config yaml", "description": "Validate goreleaser config yaml", "entry": "goreleaser check", "language": "system", "files": ".goreleaser.yml", "pass_filenames": false}, {"id": "markdown-toc", "name": "Generate a Table of Contents in Markdown files", "description": "Generate a Table of Contents in Markdown files", "entry": "markdowntoc", "language": "node", "types": ["file", "markdown"], "additional_dependencies": ["markdown-toc"]}, {"id": "mdspell", "name": "Run spellcheck", "description": "Run spellcheck", "entry": "mdspell", "language": "node", "args": ["--ignore-numbers", "--ignore-acronyms", "--en-us", "-r"], "additional_dependencies": ["markdown-spellcheck"], "types": ["file", "markdown"]}, {"id": "spelling-sort", "name": "Sort spelling doc", "description": "Sort mdspell spelling file", "entry": "/usr/bin/sort -u -o .spelling .spelling", "language": "script", "pass_filenames": false}, {"id": "hadolint", "name": "Run hadolint Dockerfile linter", "description": "Run hadolint Dockerfile linter", "entry": "pre-commit-hadolint", "language": "script"}]
[{"id": "reinstate-revert-revert", "name": "Revert-Revert to Reinstate", "description": "Improve default commit messages when reverting reverts", "entry": "reinstate-revert-revert", "language": "python", "stages": ["prepare-commit-msg"]}]
[{"id": "export-requirements", "name": "Convert pyproject.toml to requirements.txt", "description": "Generate requirements.txt pyproject.toml for backwards compatibility.", "language": "system", "entry": "poetry export -f requirements.txt -o requirements.txt", "files": "^pyproject.toml$", "pass_filenames": false}, {"id": "export-requirements-dev", "name": "Convert pyproject.toml to requirements-dev.txt", "description": "Generate requirements.txt pyproject.toml for backwards compatibility with dev requirements.", "language": "system", "entry": "poetry export --dev -f requirements.txt -o requirements-dev.txt", "files": "^pyproject.toml$", "pass_filenames": false}]
[{"id": "discord-token", "name": "Discord bot tokens", "description": "Catch bot tokens before they're committed.", "entry": "(?i)([a-z0-9_-]{23,28})\\.([a-z0-9_-]{6,7})\\.([a-z0-9_-]{27,})", "language": "pygrep", "types": ["text"]}, {"id": "discord-webhook", "name": "Discord webhooks", "description": "Catch webhooks before they're committed.", "entry": "(?i)((?:https?:\\/\\/)?(?:ptb\\.|canary\\.)?discord(?:app)?\\.com\\/api\\/webhooks\\/\\d+\\/)\\S+\\/?", "language": "pygrep", "types": ["text"]}]
[{"id": "scss-lint", "name": "scss_lint", "description": "", "entry": "scss-lint", "language": "ruby", "types": ["scss"], "args": [], "require_serial": false, "additional_dependencies": [], "minimum_pre_commit_version": "0"}]
[{"id": "darglint2", "name": "darglint2", "description": "`darglint2` is a tool for linting python docstrings.", "entry": "darglint2", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "pybetter", "name": "pybetter", "entry": "pybetter", "language": "python", "types": ["python"], "require_serial": false}]
[{"id": "clang-format", "name": "clang-format", "description": "Run `clang-format` on C++ files", "args": ["-style=Google"], "language": "system", "types": ["c++"], "entry": "clang-format -i"}, {"id": "cpplint", "name": "cpplint", "description": "Run `cpplint` on C++ files", "language": "python", "types": ["c++"], "entry": "cpplint"}, {"id": "cmake-format", "name": "cmake-format", "description": "Run `cmake-format` on cmake files", "args": ["--in-place"], "language": "python", "types": ["cmake"], "entry": "cmake-format"}, {"id": "cmake-lint", "name": "cmake-lint", "description": "Run `cmake-lint` on cmake files", "language": "python", "types": ["cmake"], "entry": "cmake-lint"}]
[{"id": "rebar3-clean", "name": "Clean rebar3 application", "description": "Clean the application with Rebar3", "entry": "rebar3.sh clean", "language": "script", "files": "(\\.erl|\\.hrl|\\.app.src|sys.config.src|rebar.config)$", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "rebar3-compile", "name": "Compile rebar3 application", "description": "Compile the application with Rebar3", "entry": "rebar3.sh compile", "language": "script", "files": "(\\.erl|\\.hrl|\\.app.src|sys.config.src|rebar.config)$", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "rebar3-eunit", "name": "Test rebar3 application with eunit", "description": "Run the eunit tests of the application with Rebar3", "entry": "rebar3.sh eunit", "language": "script", "files": "(\\.erl|\\.hrl|\\.app.src|sys.config.src|rebar.config)$", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "rebar3-ct", "name": "Test rebar3 application with common test", "description": "Run the common tests of the application with Rebar3", "entry": "rebar3.sh ct", "language": "script", "files": "(\\.erl|\\.hrl|\\.app.src|sys.config.src|rebar.config)$", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "rebar3-dialyzer", "name": "Run dialyzer on rebar3 application", "description": "Run the discrepancy analyzer for the application with Rebar3", "entry": "rebar3.sh dialyzer", "language": "script", "files": "(\\.erl|\\.hrl|\\.app.src|sys.config.src|rebar.config)$", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "rebar3-erlfmt", "name": "Format rebar3 application", "description": "Format the application with Rebar3 and erlfmt", "entry": "rebar3.sh fmt", "language": "script", "files": "(\\.erl|\\.hrl|\\.app.src|sys.config.src|rebar.config)$", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "pyrqpp", "name": "pyrqpp", "description": "A requirements.txt checker and modifier", "entry": "pyrqpp", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "openapi-sort", "name": "OpenAPI-Sorter", "description": "OpenAPI-Sorter is a utility for parsing, sorting, and outputting OpenAPI YAML files by organizing path, model, and other notations. It helps maintain clean and well-structured API documentation by ensuring consistent ordering of components in the YAML file.", "entry": "openapi_sorter", "args": ["--overwrite"], "language": "python", "types": ["yaml"]}]
[{"id": "prototool:1.8.1", "name": "prototool v1.8.1", "description": "Tool to format and lint protobuf definition files", "entry": "bin/1.8.1/prototool-Linux-x86_64", "language": "script", "pass_filenames": false}, {"id": "prototool:1.10.0", "name": "prototool v1.10.0", "description": "Tool to format and lint protobuf definition files", "entry": "bin/1.10.0/prototool.bash", "language": "script", "pass_filenames": false}]
[{"id": "bq-dryrun", "name": "bq dryrun", "description": "perform dry run of sql to test validity", "entry": "bg-dryrun", "language": "python", "types": ["sql"]}]
[{"id": "composer-validate", "name": "composer validate", "description": "Validates composer.json and composer.lock", "entry": "composer validate", "language": "system", "pass_filenames": false, "files": "^composer.(json|lock)$"}]
[{"id": "serial-version-uid", "name": "serialVersionUID change checker", "description": "Shows a warning if a file was changed but serialVersionUID was not.", "entry": "serialVersionUIDChangeChecker", "language": "python", "types": ["text"], "pass_filenames": false}]
[{"id": "ktfmt", "name": "ktfmt", "description": "Runs ktfmt (https://github.com/facebookincubator/ktfmt) on Kotlin source files.", "entry": "ktfmt-pre-commit-hook", "language": "python", "types": ["kotlin"], "minimum_pre_commit_version": "2.15"}]
[{"id": "rdf-toolkit-normalizer", "name": "RDF Toolkit Normalizer", "description": "confirms TTL files are normalized.", "entry": "rdf-toolkit-normalizer", "language": "python", "types": ["file"], "files": "\\.ttl$"}]
[{"id": "perlcritic", "name": "perlcritic", "description": "Perl source code critic (native install)", "language": "perl", "additional_dependencies": ["PETDANCE/Perl-Critic-1.150.tar.gz"], "entry": "perlcritic", "args": ["--quiet"], "types": ["perl"], "stages": ["commit", "merge-commit", "push", "manual"]}]
[{"id": "norminette-hook", "name": "Norminette hook", "description": "Runs norminette within pre-commit.", "entry": "norminette-hook", "language": "python", "types": ["file"], "files": "\\.(h|c)$", "minimum_pre_commit_version": "2.9.0"}]
[{"id": "django-urlconfchecks", "name": "Django UrlConf Checks", "description": "a pre-commit for type checking the urls and associated views", "entry": "urlconfchecks", "pass_filenames": false, "language": "python", "types": ["python"]}]
[{"id": "encryption-check", "name": "Ansible Vault Encryption Check", "description": "Checks that vault files are encrypted", "entry": "encryption-check.sh", "files": "((^|/)vault|vault.y[a]{0,1}ml$|.vault$)", "language": "script"}]
[{"id": "check-message", "name": "check message formatting", "description": "prevents unconventional commits from being committed.", "entry": "commit-check", "args": ["--message"], "pass_filenames": false, "language": "python", "stages": ["post-commit"]}, {"id": "check-branch", "name": "check branch naming", "description": "prevents unconventional branch from being pushed to remote repo.", "entry": "commit-check", "args": ["--branch"], "pass_filenames": false, "language": "python"}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo fmt", "language": "system", "types": ["rust"], "args": ["--"]}, {"id": "cargo-check", "name": "cargo check", "description": "Check the package for errors.", "entry": "cargo check", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy", "name": "clippy", "description": "Lint rust sources", "entry": "cargo clippy", "language": "system", "args": ["--", "-D", "warnings"], "types": ["rust"], "pass_filenames": false}]
[{"id": "detect-unencrypted-ansible-vault", "name": "Ansible Vaults Encryption Check", "description": "Checks that Ansible vault files are encrypted.", "entry": "pre-commit-hooks/detect-unencrypted-ansible-vault.sh", "files": "((^|/)vault|vault.y[a]{0,1}ml$|.vault$)", "language": "script", "types": ["executable"]}, {"id": "detect-unsigned-commit", "name": "Git Commit PGP Signature Verification", "description": "Warns you when you don't push signed commits.", "entry": "pre-commit-hooks/detect-unsigned-commit.sh", "language": "script", "types": ["executable"], "always_run": true}, {"id": "terragrunt-fmt", "name": "Terragrunt Format", "description": "Format all Terragrunt configurations under the folders passed as parameter.", "entry": "pre-commit-hooks/terragrunt-fmt.sh", "require_serial": true, "language": "script"}, {"id": "terragrunt-validate", "name": "Terragrunt Validate", "description": "Validates all Terragrunt configurations under the folders passed as parameter.", "entry": "pre-commit-hooks/terragrunt-validate.sh", "require_serial": true, "language": "script"}, {"id": "terraform-fmt", "name": "Terraform Format", "description": "Format all Terraform configurations passed as parameter.", "entry": "pre-commit-hooks/terraform-fmt.sh", "require_serial": true, "language": "script"}, {"id": "terraform-validate", "name": "Terraform Validate", "description": "Validates all Terraform configurations passed as parameter.", "entry": "pre-commit-hooks/terraform-validate.sh", "require_serial": true, "language": "script"}, {"id": "terraform-docs", "name": "Terraform Docs", "description": "Generate the module/component README.md Terraform Documentation with inject mode.", "entry": "pre-commit-hooks/terraform-docs.sh", "require_serial": true, "language": "script"}, {"id": "requirements-txt-fixer", "name": "fix requirements.txt", "description": "sorts entries and fixes single = to == in requirements.txt.", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "tf-module-checker", "name": "check terraform modules for latest", "description": "Checks if latest is set on ref in terraform modules.", "entry": "tf-module-checker", "language": "python", "files": ".tf$"}, {"id": "tf-provider-gen", "name": "Generate tf provider", "description": "Generate a provider file for terraform validate step.", "entry": "provider-gen", "language": "python", "files": ".tf$"}, {"id": "tf-provider-cleanup", "name": "Remove-tf-provider", "description": "Cleanup up the provider file after terraform validation.", "entry": "remove-provider", "language": "python", "files": ".tf$"}, {"id": "tf-cache-cleanup", "name": "Clean up terraform cache", "description": "Cleanup up the terraform cache.", "entry": "tf-cache-clean", "language": "python", "files": ".tf$"}, {"id": "trivy-vulns", "name": "Trivy check for Vulnerabilities", "description": "Trivy check for Vulnerabilities.", "entry": "pre-commit-hooks/trivy-vulns.sh", "require_serial": true, "language": "script"}, {"id": "dotnet-format", "name": "dotnet-format", "language": "system", "entry": "dotnet format -v normal --no-restore --include"}]
[{"id": "bazel-buildifier", "name": "bazel buildifier", "description": "Runs `buildifier`, requires buildifier binary", "entry": "buildifier", "files": "^(.*/)?(BUILD\\.bazel|BUILD|WORKSPACE)$|\\.BUILD$|\\.bzl$", "language": "system"}, {"id": "do-not-submit", "name": "DO NOT SUBMIT", "description": "Forbids the string \"DO NOT SUBMIT\".", "entry": "check_do_not_submit.py", "language": "script", "files": ".*"}, {"id": "clang-format-diff", "name": "clang-format-diff", "entry": "clang_format.py", "language": "script", "args": ["15.0.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file", "name": "clang-format-whole-file", "entry": "clang_format.py", "language": "script", "args": ["15.0.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-3.6.0", "name": "clang-format-diff-3.6.0", "entry": "clang_format.py", "language": "script", "args": ["3.6.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-3.6.0", "name": "clang-format-whole-file-3.6.0", "entry": "clang_format.py", "language": "script", "args": ["3.6.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-3.7.0", "name": "clang-format-diff-3.7.0", "entry": "clang_format.py", "language": "script", "args": ["3.7.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-3.8.0", "name": "clang-format-whole-file-3.8.0", "entry": "clang_format.py", "language": "script", "args": ["3.8.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-3.9.0", "name": "clang-format-diff-3.9.0", "entry": "clang_format.py", "language": "script", "args": ["3.9.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-3.9.0", "name": "clang-format-whole-file-3.9.0", "entry": "clang_format.py", "language": "script", "args": ["3.9.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-4.0.0", "name": "clang-format-diff-4.0.0", "entry": "clang_format.py", "language": "script", "args": ["4.0.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-4.0.0", "name": "clang-format-whole-file-4.0.0", "entry": "clang_format.py", "language": "script", "args": ["4.0.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-5.0.0", "name": "clang-format-diff-5.0.0", "entry": "clang_format.py", "language": "script", "args": ["5.0.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-5.0.0", "name": "clang-format-whole-file-5.0.0", "entry": "clang_format.py", "language": "script", "args": ["5.0.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-8.0.0", "name": "clang-format-diff-8.0.0", "entry": "clang_format.py", "language": "script", "args": ["8.0.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-8.0.0", "name": "clang-format-whole-file-8.0.0", "entry": "clang_format.py", "language": "script", "args": ["8.0.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-11.0.0", "name": "clang-format-diff-11.0.0", "entry": "clang_format.py", "language": "script", "args": ["11.0.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-11.0.0", "name": "clang-format-whole-file-11.0.0", "entry": "clang_format.py", "language": "script", "args": ["11.0.0", "whole-file"], "require_serial": false}, {"id": "clang-format-diff-15.0.0", "name": "clang-format-diff-15.0.0", "entry": "clang_format.py", "language": "script", "args": ["15.0.0", "diff"], "require_serial": true}, {"id": "clang-format-whole-file-15.0.0", "name": "clang-format-whole-file-15.0.0", "entry": "clang_format.py", "language": "script", "args": ["15.0.0", "whole-file"], "require_serial": false}]
[{"id": "shell-fmt", "name": "shfmt", "description": "Rewrites all shell scripts to a canonical format.", "entry": "shfmt", "language": "system", "types": ["file", "shell"], "exclude_types": ["zsh"], "args": ["-w", "-s", "-l", "-i", "4"]}, {"id": "shell-fmt-docker", "name": "shfmt", "description": "Rewrites all shell scripts to a canonical format.", "entry": "mvdan/shfmt:v3", "language": "docker_image", "types": ["file", "shell"], "exclude_types": ["zsh"], "args": ["-w", "-s", "-l", "-i", "4"]}, {"id": "shell-fmt-go", "name": "shfmt", "description": "Rewrites all shell scripts to a canonical format.", "language": "golang", "additional_dependencies": ["mvdan.cc/sh/v3/cmd/shfmt@v3.5.1"], "entry": "shfmt", "types": ["file", "shell"], "exclude_types": ["zsh"], "args": ["-w", "-s", "-l", "-i", "4"]}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo fmt", "language": "system", "types": ["rust"], "args": ["--"]}, {"id": "clippy", "name": "clippy", "description": "lint files with cargo clippy", "entry": "cargo clippy", "language": "system", "types": ["rust"], "args": []}]
[{"id": "check-branch-name", "name": "Check branch name", "description": "Validate branch name by regexp", "entry": "check_branch_name", "language": "python", "always_run": true, "stages": ["prepare-commit-msg"]}, {"id": "check-docs-acl-set", "name": "Check that for all docs page set ACL riles", "entry": "check_doc_acl", "files": "docs\\/.*\\.md$", "language": "python", "description": "Check that all docs files have correct @ACL annotation"}, {"id": "gen-doc-autoindex", "name": "Generator autoindexes for docs", "entry": "gen_doc_autoindex", "files": "docs\\/.*README.md$", "language": "python", "description": "Genarate autoindex pages in docs files, by keyword: <autoindex>"}]
[{"id": "reset-obsidian-theme", "name": "reset-obsidian-theme", "entry": "reset-obsidian-theme.sh", "language": "script", "always_run": false, "fail_fast": false, "verbose": false, "require_serial": true, "description": "Always set the Obsidian theme to the provided value.", "args": []}]
[{"id": "prospector", "name": "prospector", "description": "This hook runs Prospector: https://github.com/landscapeio/prospector", "entry": "prospector", "language": "python", "files": "\\.py$"}]
[{"id": "tfproviderlint", "name": "tfproviderlint", "description": "lint tf provider go code", "entry": "run_tfproviderlint.sh", "language": "script", "files": "\\.go$"}, {"id": "tfproviderlintx", "name": "tfproviderlintx", "description": "lint tf provider go code", "entry": "run_tfproviderlintx.sh", "language": "script", "files": "\\.go$"}]
[{"id": "slotscheck", "name": "slotscheck", "description": "Slotscheck: Ensure your __slots__ are working properly.", "entry": "python -m slotscheck -v", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types": ["python"]}]
[{"id": "check-commit-message-is-conventional", "name": "Check commit message adheres to Conventional Commit standard", "description": "This pre-commit hook checks if the commit message adheres to the Conventional Commit standard, and fails if it doesn't.", "language": "python", "entry": "check-commit-message", "stages": ["commit-msg"], "always_run": true}]
[{"id": "beancount-format", "name": "Run bean-format", "description": "Let bean-format format your beancount files.", "entry": "beancount_format", "language": "python", "files": "\\.beancount$"}]
[{"id": "rst-lint", "name": "restructuredtext-lint", "entry": "rst-lint", "language": "python", "types": ["rst"], "args": [], "require_serial": false, "additional_dependencies": []}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "nops-hook-pricing", "name": "nOps Pricing Hook", "description": "This hook will help to analyze the cost impact for your terraform projects", "entry": "nops-cli --pricing --iac-type terraform", "language": "python", "language_version": "3.9", "additional_dependencies": ["jsondiff", "/tmp/nops_sdk-0.3.1.tar.gz"], "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "nops-hook-dependency", "name": "nOps Dependency Hook", "description": "This hook will help to analyze the dependency impact for your terraform projects", "entry": "nops-cli --dependency --iac-type terraform", "language": "python", "language_version": "3.9", "additional_dependencies": ["jsondiff", "/tmp/nops_sdk-0.3.1.tar.gz"], "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}]
[{"id": "pydocstringformatter", "name": "pydocstringformatter", "entry": "pydocstringformatter --write --quiet", "language": "python"}]
[{"id": "validate_manifest", "name": "Validate Pre-Commit Manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit-validate-manifest", "language": "python", "files": "^(\\.pre-commit-hooks\\.yaml|hooks\\.yaml)$"}]
[{"id": "autopep8", "name": "autopep8", "entry": "autopep8", "language": "python", "files": "\\.py$", "args": ["-i"]}, {"id": "forbid-tabs", "name": "No-tabs checker", "description": "Forbid files containing tabs to be committed", "entry": "forbid_tabs", "language": "python", "files": "", "exclude": "(Makefile|debian/rules)(\\.in)?$"}, {"id": "remove-tabs", "name": "Tabs remover", "description": "Replace tabs by whitespaces before committing", "entry": "remove_tabs", "language": "python", "args": ["--whitespaces-count", "4"], "files": "", "exclude": "(Makefile|debian/rules)(\\.in)?$"}, {"id": "validate_manifest", "name": "Validate Pre-Commit Manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit-validate-manifest", "language": "python", "files": "^(\\.pre-commit-hooks\\.yaml|hooks\\.yaml)$"}]
[{"id": "pydevf", "name": "PyDev Formatter", "description": "PyDev Code Formatter", "entry": "pydevf --no-daemon", "language": "python", "files": "\\.(py|pyw)$"}]
[{"id": "squabble", "name": "squabble", "description": "squabble: An extensible linter for SQL queries and migrations.", "entry": "squabble", "language": "python", "language_version": "python3", "types": ["sql"]}]
[{"id": "nonexistent-mock-methods", "name": "Find nonexistent mock methods", "description": "This hook detects bad mock method calls.", "entry": "bad-mocks", "language": "python", "types": ["python"]}]
[{"id": "liccheck", "name": "Run Python License Checker", "description": "Check license compliance of python requirements", "entry": "liccheck", "args": [], "language": "python", "files": "^(.*requirements.*\\.txt|setup\\.cfg|setup\\.py|pyproject\\.toml|liccheck\\.ini)$", "pass_filenames": false}]
[{"id": "terraform_fmt", "name": "terraform_fmt", "description": "Formats terraform scripts into the correct checkstyle", "entry": "bin/tf_fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "terraform_validate", "description": "Validates terraform scripts syntax", "entry": "bin/tf_validate.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$"}]
[{"id": "black-disable-checker", "name": "black-disable-checker", "entry": "black-disable-checker", "language": "python", "types": ["python"]}]
[{"id": "consistent-eslint-dependencies", "name": "Keep ESLint dependencies consistent in hooks", "description": "Ensure that the ESLint dependencies in the pre-commit hooks are consistent with the one used elsewhere in the repository", "language": "node", "entry": "dependency-consistency", "pass_filenames": false, "additional_dependencies": ["@yarnpkg/lockfile@1.1.0", "semver-sort@1.0.0", "yaml@1.10.2"], "stages": ["commit", "manual", "push"], "files": "^(.pre-commit-config.yaml|.*/(yarn.lock|package-lock.json))$"}]
[{"id": "zephyr-checkpatch-diff", "name": "Run Zephyr's checkpatch.pl", "description": "This hook runs the ${ZEPHYR_BASE}/scripts/checkpatch.pl script on any C source file changes staged in the git index.", "entry": "bash -c 'git diff --cached | \"${ZEPHYR_BASE}\"/scripts/checkpatch.pl -' --", "language": "system", "types": ["c"], "pass_filenames": false}]
[{"id": "usort", "name": "Sort imports with \u00b5sort", "description": "Safe, minimal import sorting", "language": "python", "types_or": ["python", "pyi"], "entry": "usort format", "require_serial": true}]
[{"id": "xmllint", "name": "xmllint", "description": "Lint xml files with xmllint", "entry": "xmllint --noout", "language": "docker", "types": ["xml"]}]
[{"id": "trello-checker", "name": "Check trello link", "entry": "trello-checker", "language": "python"}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "go-fmt", "name": "go fmt", "entry": "pre-commit-hooks/run-go-fmt.sh", "files": "\\.go$", "language": "script", "description": "Runs `gofmt`, requires golang"}, {"id": "go-imports", "name": "go imports", "entry": "pre-commit-hooks/run-go-imports.sh", "files": "\\.go$", "language": "script", "description": "Runs `goimports`, requires golang"}, {"id": "go-vet", "name": "go vet", "entry": "pre-commit-hooks/run-go-vet.sh", "files": "\\.go$", "language": "script", "description": "Runs `go vet`, requires golang"}, {"id": "go-lint", "name": "go lint", "entry": "pre-commit-hooks/run-go-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `golint`, requires https://github.com/golang/lint"}, {"id": "go-cyclo", "name": "go-cyclo", "entry": "pre-commit-hooks/run-go-cyclo.sh", "files": "\\.go$", "language": "script", "description": "Runs `gocyclo`, requires https://github.com/fzipp/gocyclo", "args": ["-over=15"]}, {"id": "validate-toml", "name": "validate toml", "entry": "tomlv", "files": "\\.toml$", "language": "system", "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"}, {"id": "no-go-testing", "name": "Check files aren't using go's testing package", "entry": "testing\\.T", "files": "test_.*\\.go$", "language": "pygrep", "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"}, {"id": "gometalinter", "name": "gometalinter", "entry": "pre-commit-hooks/run-gometalinter.sh", "files": "\\.go$", "language": "script", "description": ""}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "pre-commit-hooks/run-golangci-lint.sh", "types": ["go"], "language": "script", "pass_filenames": false, "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"}, {"id": "go-critic", "name": "go-critic", "entry": "pre-commit-hooks/run-go-critic.sh", "files": "\\.go$", "language": "script", "description": "Runs `go-critic`, requires https://github.com/go-critic/go-critic"}, {"id": "go-unit-tests", "name": "go-unit-tests", "entry": "pre-commit-hooks/run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`"}, {"id": "go-build", "name": "go-build", "entry": "pre-commit-hooks/run-go-build.sh", "files": "\\.go$", "language": "script", "description": "Runs `go build`, requires golang"}, {"id": "go-generate", "name": "go-generate", "entry": "pre-commit-hooks/run-go-generate.sh", "files": "\\.go$", "language": "script", "description": "Runs `go generate`, requires golang"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "pre-commit-hooks/run-go-mod-tidy.sh", "pass_filenames": false, "language": "script", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "pre-commit-hooks/run-go-mod-vendor.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod vendor`, requires golang"}]
[{"id": "black-formatter", "name": "Python Black formatter", "description": "This hook runs the Black formatter on all python files", "entry": "black", "language": "python", "types": ["python"]}]
[{"id": "validate-flux", "name": "validate Flux and Kustomize manifests", "description": "A script to validate Flux custom resources and Kustomize overlays.", "entry": "./scripts/validate-flux.sh", "language": "script", "stages": ["push"]}, {"id": "validate-eslint", "name": "Validate eslint for Javascript and Typescript based files", "description": "A script to validate eslint rules on Javascript and Typescript files.", "entry": "./scripts/validate-eslint.sh", "language": "script", "stages": ["commit"]}]
[{"id": "duplicate-code-detection", "name": "Detect duplicate code", "description": "This hook will run duplicate code detection.", "entry": "duplicate-code-detection -f", "language": "python", "types": ["text"]}]
[{"id": "cfn-python-lint", "name": "AWS CloudFormation Linter", "entry": "cfn-lint", "language": "python", "files": "\\.(json|yaml|yml)$"}]
[{"id": "check-yaml", "name": "check yaml", "description": "checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "gen-github-actions-doc", "name": "Generategithub actions custom documentation", "description": "checks yaml files for parseable syntax.", "entry": "gen-github-actions-doc", "language": "python", "always_run": true, "types": []}]
[{"id": "datamodel-code-generator", "name": "datamodel-code-generator", "description": "Pydantic model and dataclasses.dataclass generator for easy conversion of JSON, OpenAPI, JSON Schema, and YAML data sources", "entry": "datamodel-codegen", "language": "python", "require_serial": true, "pass_filenames": false}]
[{"id": "clang-format", "name": "clang-format", "description": "Format C code using clang-format.", "language": "system", "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$", "entry": "clang-format -i", "args": ["-style=Google"]}, {"id": "cpplint", "name": "cpplint", "description": "Check style of C code using cpplint.", "language": "python", "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$", "entry": "cpplint", "args": ["--verbose=3"]}, {"id": "cppcheck", "name": "cppcheck", "description": "Check correctness of C code using cppcheck.", "language": "system", "files": "\\.(c|cc|cxx|cpp|h|hpp|hxx)$", "entry": "cppcheck --error-exitcode=1", "args": ["--enable=warning"]}]
[{"id": "clean-notebook", "name": "clean-notebook", "description": "A simple package to clean notebook files output and metadata", "entry": "clean-notebook", "language": "python", "files": "\\.ipynb$"}]
[{"id": "check-unused-vars", "name": "Check Unused Variables", "description": "This hook checks unused variables in terraform code then removes them", "entry": "terraform-check-unused-variables.py", "language": "python", "exclude": "^\\.terraform$", "files": "^.*\\.tf$", "pass_filenames": false}]
[{"id": "prospector", "name": "prospector", "description": "Analyze Python code using Prospector", "entry": "prospector", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "semistandard", "name": "Run `semistandard` on javascript files", "entry": "semistandard", "language": "node", "files": "\\.(js|jsx)$", "args": [], "additional_dependencies": ["semistandard@11.0.0"], "minimum_pre_commit_version": "0.7.0"}, {"id": "tslint", "name": "Run `tslint` on typescript files", "entry": "tslint", "language": "node", "files": "\\.ts$", "args": [], "additional_dependencies": ["typescript@2.3.4", "tslint@5.4.3"]}]
[{"id": "cspell", "name": "cspell", "description": "This hook runs CSpell spellchecker", "entry": "cspell-cli", "language": "node", "types": ["text"], "args": ["--no-must-find-files", "--no-progress", "--no-summary", "--gitignore"]}]
[{"id": "liccheck-pipenv", "name": "Run liccheck for projects using pipenv", "description": "Creates a temporary requirements.txt and uses this to run liccheck.", "entry": "liccheck-pipenv", "files": "Pipfile.lock", "language": "python"}, {"id": "import-linter", "name": "Run import linter", "description": "Checks if python imports are valid.", "entry": "import-linter", "types": ["file", "python"], "language": "python"}]
[{"id": "python-version-runtime-txt-match-pipfile-lock", "name": "python-version-runtime-txt-match-pipfile-lock", "description": "Ensure the Python version in runtime.txt matches Pipfile.lock", "entry": "python_version_runtime_txt_match_pipfile_lock", "language": "python", "types": ["file"], "always_run": true, "pass_filenames": false}]
[{"id": "pofmt", "name": "pofmt", "description": "Your missing PO formatter and linter", "entry": "pofmt", "language": "python", "types": ["pofile"], "minimum_pre_commit_version": "0.15.0"}]
[{"id": "sqlfmt", "name": "sqlfmt", "entry": "sqlfmt", "language": "python", "require_serial": true, "types_or": ["sql", "jinja"]}]
[{"id": "gen-readme", "name": "gen-readme", "entry": "gen-readme", "language": "python", "require_serial": true, "args": ["--org-name", "--repo-name", "--branch", "--gen-html"]}]
[{"id": "gitleaks", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "./gitleaks.sh", "language": "script", "pass_filenames": false}]
[{"id": "check-er-suffix", "name": "check-er-suffix", "description": "check if any class ends with \"-er\"", "entry": "check-er-suffix", "language": "python", "stages": ["commit", "push", "manual"]}, {"id": "check-getters-setters", "name": "check-getters-setters", "description": "check the code for any getters and setters", "entry": "check-getters-setters", "language": "python", "stages": ["commit", "push", "manual"]}]
[{"id": "circleci_validate", "name": "Validate CircleCI Config", "description": "Validates CircleCI Config if present", "language": "script", "entry": "circleci_validate.sh"}]
[{"id": "gradle-check", "name": "gradle check", "description": "Runs java unit tests using gradle check", "entry": "gradle-check", "language": "python", "pass_filenames": false}, {"id": "gradle-build", "name": "gradle build", "description": "Builds java project using \"gradle build\"", "entry": "gradle-build", "language": "python", "pass_filenames": false}, {"id": "gradle-spotless", "name": "gradle spotless", "description": "Lints the project using \"gradle spotlessCheck spotlessApply\"", "entry": "gradle-spotless", "language": "python", "pass_filenames": false}, {"id": "gradle-task", "name": "gradle task", "description": "Runs arbitrary gradle tasks for java project", "entry": "gradle-task", "language": "python", "pass_filenames": false}]
[{"id": "nbstripout-conda", "name": "nbstripout-conda", "description": "nbstripout: strip output from Jupyter and IPython notebooks", "entry": "nbstripout", "language": "conda", "types": ["jupyter"]}]
[{"id": "no-merge-commits", "name": "Don't create merge commits", "entry": "Prefer rebase workflow to merge commits", "language": "fail", "stages": ["merge-commit"], "description": "For projects that use rebase rather than merge workflows, this hook makes it easy to enforce that policy. See https://git-scm.com/book/en/v2/Git-Branching-Rebasing for more details.\n"}, {"id": "asdf-install", "name": "Install correct versions of tools managed by asdf", "entry": "asdf install", "language": "system", "always_run": true, "pass_filenames": false, "stages": ["commit", "push", "post-checkout", "post-rewrite"], "description": "Install or set versions of asdf-managed tools based on .tool-versions unless otherwise configured. See https://asdf-vm.com/manage/configuration.html#tool-versions for more details.\n"}, {"id": "poetry-check", "name": "Validate structure of pyproject.toml", "entry": "poetry check", "language": "system", "files": "\\.tool-versions|pyproject\\.toml", "pass_filenames": false, "description": "Check that Poetry dependencies are properly specified. See https://python-poetry.org/docs/cli/#check for more details.\n"}, {"id": "poetry-lock", "name": "Lock Poetry dependencies", "entry": "poetry lock", "language": "system", "files": "\\.tool-versions|poetry\\.lock|pyproject\\.toml", "pass_filenames": false, "description": "Update poetry.lock to match pyproject.toml without upgrading already locked dependencies. See https://python-poetry.org/docs/cli/#lock for more details.\n", "args": ["--no-update"]}, {"id": "poetry-install", "name": "Install Poetry dependencies", "entry": "poetry install", "language": "system", "always_run": true, "pass_filenames": false, "stages": ["commit", "push", "post-checkout", "post-rewrite"], "description": "Install all Poetry dependencies from poetry.lock. Uninstall any dependencies not found in the lock file. Requires Poetry 1.2+. See https://python-poetry.org/docs/cli/#install for more details.\n", "args": ["--sync"]}, {"id": "pre-commit-install", "name": "Install pre-commit hooks", "entry": "poetry run pre-commit install", "language": "system", "always_run": true, "pass_filenames": false, "stages": ["commit", "push", "post-checkout", "post-rewrite"], "description": "Install default hook types and environments for all available hooks. Ensure that updates to pre-commit's Git hook script are applied. See https://pre-commit.com/#pre-commit-install and https://pre-commit.com/#top_level-default_install_hook_types for more details.\n", "args": ["--install-hooks"]}, {"id": "yarn-install", "name": "Install Yarn dependencies", "entry": "yarn install", "language": "system", "always_run": true, "pass_filenames": false, "stages": ["commit", "push", "post-checkout", "post-rewrite"], "description": "Install all Yarn dependencies, and update yarn.lock. See https://yarnpkg.com/cli/install for more details.\n"}, {"id": "yarn-dedupe", "name": "Deduplicate Yarn dependencies", "entry": "yarn dedupe", "language": "system", "files": "\\.tool-versions|package\\.json|yarn(-*\\.cjs|\\.lock)", "pass_filenames": false, "description": "Remove all but the highest version of any duplicates. More than one version of a package may be required in the case of non-overlapping version specifications. See https://yarnpkg.com/cli/dedupe for more details.\n"}, {"id": "yarn-audit", "name": "Perform security audit of Yarn dependencies", "entry": "yarn npm audit", "language": "system", "pass_filenames": false, "description": "Check Yarn dependencies for known vulnerabilities. See https://yarnpkg.com/cli/npm/audit for more details.\n", "args": ["--all", "--recursive"]}, {"id": "yarn-build", "name": "Build the app", "entry": "yarn run build", "language": "system", "files": "\\.tool-versions|package\\.json|yarn(-*\\.cjs|\\.lock)|.*\\.ts", "pass_filenames": false, "description": "Compile TypeScript files to JavaScript. See https://yarnpkg.com/cli/run for more details.\n"}, {"id": "yarn-test", "name": "Run Yarn tests", "entry": "yarn run test", "language": "system", "types": ["ts"], "require_serial": true, "description": "Run the Jest tests that check the modified files. See https://yarnpkg.com/cli/run and https://jestjs.io/docs/cli#--findrelatedtests-spaceseparatedlistofsourcefiles for more details.\n", "args": ["--passWithNoTests", "--findRelatedTests"]}, {"id": "megalinter-incremental", "name": "Run MegaLinter (skipping linters that run in project mode)", "entry": "npx -- mega-linter-runner@v7.2.1 --container-name megalinter-incremental --remove-container --fix --env LOG_LEVEL=warning --filesonly\n", "language": "system", "stages": ["commit"], "require_serial": true, "description": "See https://megalinter.io/latest/mega-linter-runner/#usage and https://megalinter.io/latest/configuration/ if you wish to override the default arguments. mega-linter-runner is specified as an argument so that you may override the version (e.g., mega-linter-runner@vx.y.z). Depends on npx, which ships with npm 7+, and Docker. Runs very slowly when the pertinent Docker image isn't already cached (c.f., https://github.com/marketplace/actions/docker-cache/). If you encounter permission errors, try running Docker in rootless mode (c.f., https://github.com/marketplace/actions/rootless-docker/). Linter results are logged to the megalinter-reports directory, so list it in your .gitignore. Skip linters that run in project mode since they don't run incrementally.\n"}, {"id": "megalinter-full", "name": "Run MegaLinter", "entry": "npx -- mega-linter-runner@v7.2.1 --container-name megalinter-full --remove-container --fix --env LOG_LEVEL=warning\n", "language": "system", "stages": ["push"], "require_serial": true, "description": "See https://megalinter.io/latest/mega-linter-runner/#usage and https://megalinter.io/latest/configuration/ if you wish to override the default arguments. mega-linter-runner is specified as an argument so that you may override the version (e.g., mega-linter-runner@vx.y.z). Depends on npx, which ships with npm 7+, and Docker. Runs very slowly when the pertinent Docker image isn't already cached (c.f., https://github.com/marketplace/actions/docker-cache/). If you encounter permission errors, try running Docker in rootless mode (c.f., https://github.com/marketplace/actions/rootless-docker/). Linter results are logged to the megalinter-reports directory, so list it in your .gitignore.\n"}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo +nightly fmt", "language": "system", "types": ["rust"], "args": ["--"]}]
[{"id": "obsidian-github-formatter-links", "name": "OGF -- Repository formatter for matchinig Obsidian Vault and GitHub Web browser; repair wikilinks", "entry": "ogf-links", "language": "python", "files": "\\.md$", "types": ["file"]}]
[{"id": "perl-hook", "name": "perl example hook", "entry": "pre-commit-perl-hello", "language": "perl", "files": ""}]
[{"id": "gitleaks", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "gitleaks protect --verbose --redact --staged", "language": "golang", "pass_filenames": false}]
[{"id": "loglicense", "name": "loglicense", "description": "Automatically checks and documents licenses of dependencies", "entry": "loglicense check", "language": "python", "pass_filenames": false, "types": ["text"]}]
[{"id": "rover", "name": "Run Rover CLI", "description": "Runs rover CLI for apollo-router schema utilities", "entry": "pre_commit_hooks/run-rover.sh", "language": "script", "pass_filenames": false}]
[{"id": "codespell", "name": "codespell", "description": "Checks for common misspellings in text files.", "entry": "codespell", "language": "python", "types": ["text"], "args": [], "require_serial": false, "additional_dependencies": []}]
[{"id": "sql_formatter", "name": "SQL formatter", "entry": "sql-formatter", "language": "python", "types": ["file", "sql"], "require_serial": true}]
[{"id": "ansible-later", "name": "ansible-later", "description": "Run ansible-later, a best-practice scanner for Ansible.", "entry": "ansible-later", "language": "python", "pass_filenames": false, "always_run": true, "additional_dependencies": [".[ansible-core]"]}]
[{"id": "make", "name": "make (via system)", "description": "make", "entry": "make", "language": "system", "args": ["lint"], "always_run": true, "pass_filenames": false}]
[{"id": "some-id", "name": "some-name", "description": "some description", "entry": "print_arguments", "language": "python"}]
[{"id": "nb-strip-paths", "name": "nb-strip-paths", "description": "Replace absolute user paths in Jupyter Notebook cell outputs with project relative paths.", "entry": "nb-strip-paths", "language": "python", "language_version": "python3", "require_serial": true, "types": ["jupyter"]}]
[{"id": "poetry-version", "name": "poetry version", "description": "run poetry --version to debug hooks", "entry": "poetry --version", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}, {"id": "poetry-check", "name": "poetry check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}, {"id": "poetry-lock", "name": "poetry lock", "description": "run poetry lock to update lock file", "entry": "poetry lock", "language": "python", "language_version": "python3", "pass_filenames": false}, {"id": "poetry-export", "name": "poetry export", "description": "run poetry export to sync lock file with requirements.txt", "entry": "poetry export", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^poetry.lock$", "args": ["--without-hashes", "-f", "requirements.txt", "-o", "requirements/requirements.txt"]}, {"id": "poetry-export-dev", "name": "poetry export dev", "description": "run poetry export to sync lock file with requirements-dev.txt", "entry": "poetry export", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^poetry.lock$", "args": ["--without-hashes", "-f", "requirements.txt", "--dev", "-o", "requirements/requirements-dev.txt"]}]
[{"id": "zscaler-iac-scanner", "name": "runs zscaler iac scanner", "description": "Runs Zscaler IaC Scanner", "entry": "zscaler-iac-scanner", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"], "pass_filenames": false}]
[{"id": "djhtml", "name": "DjHTML", "entry": "djhtml", "types": ["html"], "language": "python", "language_version": "python3", "require_serial": true, "minimum_pre_commit_version": "2.9.0"}, {"id": "djcss", "name": "DjCSS", "entry": "djcss", "types_or": ["css", "scss"], "language": "python", "language_version": "python3", "require_serial": true, "minimum_pre_commit_version": "2.9.0"}, {"id": "djjs", "name": "DjJS", "entry": "djjs", "types": ["javascript"], "language": "python", "language_version": "python3", "require_serial": true, "minimum_pre_commit_version": "2.9.0"}]
[{"id": "jupyter-notebook-cleanup", "name": "jupyter-notebook-cleanup", "description": "Remove cel output for better security", "entry": "jupyter-notebook-cleanup", "language": "python", "language_version": "python3", "files": "\\.ipynb$", "types": ["file"]}]
[{"id": "prevent-debug-markers", "name": "Prevent XXX marker-comments", "description": "Prevents lines containing '# XXX' to be committed", "entry": "check-for-xxx", "language": "python", "types": ["text"]}]
[{"id": "check-rebase", "name": "Check if rebase is needed", "description": "Check if your branch is up to date with the upstream.", "entry": "./pre-commit-hooks/check-rebase.py", "language": "script", "always_run": true, "args": ["upstream_url"]}, {"id": "validate-config", "name": "Validate package config", "description": "Check for missing values and incorrect types", "entry": "./pre-commit-hooks/validate-config.sh", "language": "script", "files": "^\\.?packit.ya?ml$"}, {"id": "validate-config-in-container", "name": "Validate package config", "description": "Check for missing values and incorrect types", "entry": "quay.io/packit/packit:latest packit -d validate-config", "language": "docker_image", "files": "^\\.?packit.ya?ml$"}]
[{"id": "airflint", "name": "Airflint", "description": "A linter for your Airflow DAGs to ensure Best Practices are being used.", "entry": "airflint", "language": "python", "types": ["python"]}]
[{"id": "commit-msg-sentiment.py", "name": "commit-msg-sentiment.py", "description": "check commit message sentiment, and reject commit if negative sentiment is detected", "entry": "commit-msg-sentiment.py", "stages": ["commit-msg"], "language": "python", "types": ["python"], "require_serial": false, "additional_dependencies": ["textblob", "afinn"], "always_run": true, "pass_filenames": false, "fail_fast": true, "minimum_pre_commit_version": "3.2.0"}]
[{"id": "clang-format", "name": "Conda Clang-Format", "entry": "clang-format", "language": "conda", "types": ["c++"], "args": ["-style=file", "-i"]}]
[{"id": "experimental", "name": "experimental", "description": "Do not use. For testing only.", "entry": "experimental", "language": "golang"}, {"id": "forbidden-words", "name": "forbidden words", "description": "prevents checking in lines containing forbidden words.", "entry": "forbidden-words", "language": "golang"}, {"id": "js-debug-statements", "name": "js debug statements", "description": "prevents checking in lines containing javascript debug statements.", "entry": "js-debug-statements", "language": "golang"}]
[{"id": "dotnet-example-hook", "name": "dotnet example hook", "entry": "testeroni", "language": "dotnet", "files": ""}]
[{"id": "brunette", "name": "brunette", "description": "Run Brunette on Python code (fork of Black).", "entry": "brunette", "language": "python", "types": ["python"]}]
[{"id": "gt-commit-msg", "name": "gt-commit-msg", "entry": "jolly_github_toolbelt/hooks/commit-msg", "language": "script", "require_serial": true, "description": "gt-commit-message: Build good commit messages", "minimum_pre_commit_version": "0.15.4", "stages": ["commit-msg"]}, {"id": "gt-self-check", "name": "gt-self-check", "entry": "jolly_github_toolbelt/hooks/pre-commit", "language": "script", "require_serial": true, "description": "gt-self-check: Run self-check (if present)"}, {"id": "gt-prepare-commit-msg", "name": "gt-prepare-commit-msg", "entry": "jolly_github_toolbelt/hooks/prepare-commit-msg", "language": "script", "require_serial": true, "description": "gt-prepare-commit-msg: Build commit messages based on the branch name", "minimum_pre_commit_version": "1.16.0", "stages": ["prepare-commit-msg"]}]
[{"id": "compare-stack-and-file-names", "name": "Stack and file name linter", "description": "Ensure that all stacks have names consistent with their config filenames", "entry": "compare-stack-and-file-names", "language": "python"}, {"id": "check-stack-names", "name": "Stack name linter", "description": "Ensure that all stacks have valid names", "entry": "check-stack-names", "language": "python"}]
[{"id": "failing_hook", "name": "Failing hook", "entry": "bin/hook.sh", "language": "script", "files": "."}]
[{"id": "failing_hook", "name": "Failing hook", "entry": "bin/hook.sh", "language": "script", "files": "."}]
[{"id": "encryption-check", "name": "Ansible Vault Encryption Check", "description": "Checks that vault files are encrypted", "entry": "encryption-check.sh", "files": "((^|/)vault|vault.y[a]{0,1}ml$|.vault$)", "language": "script"}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo fmt", "language": "system", "types": ["rust"], "args": ["--"]}, {"id": "cargo-check", "name": "cargo check", "description": "Check the package for errors.", "entry": "cargo check", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy", "name": "clippy", "description": "Lint rust sources", "entry": "cargo clippy", "language": "system", "args": ["--", "-D", "warnings"], "types": ["rust"], "pass_filenames": false}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "black-jupyter", "name": "black-jupyter", "description": "Black: The uncompromising Python code formatter (with Jupyter Notebook support)", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi", "jupyter"], "additional_dependencies": [".[jupyter]"]}]
[{"id": "go-fmt", "name": "go fmt", "entry": "pre-commit-hooks/run-go-fmt.sh", "files": "\\.go$", "language": "script", "description": "Runs `gofmt`, requires golang"}, {"id": "go-imports", "name": "go imports", "entry": "pre-commit-hooks/run-go-imports.sh", "files": "\\.go$", "language": "script", "description": "Runs `goimports`, requires golang"}, {"id": "go-vet", "name": "go vet", "entry": "pre-commit-hooks/run-go-vet.sh", "files": "\\.go$", "language": "script", "description": "Runs `go vet`, requires golang"}, {"id": "go-lint", "name": "go lint", "entry": "pre-commit-hooks/run-go-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `golint`, requires https://github.com/golang/lint"}, {"id": "go-cyclo", "name": "go-cyclo", "entry": "pre-commit-hooks/run-go-cyclo.sh", "files": "\\.go$", "language": "script", "description": "Runs `gocyclo`, requires https://github.com/fzipp/gocyclo", "args": ["-over=15"]}, {"id": "validate-toml", "name": "validate toml", "entry": "tomlv", "files": "\\.toml$", "language": "system", "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"}, {"id": "no-go-testing", "name": "Check files aren't using go's testing package", "entry": "testing\\.T", "files": "test_.*\\.go$", "language": "pygrep", "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"}, {"id": "gometalinter", "name": "gometalinter", "entry": "pre-commit-hooks/run-gometalinter.sh", "files": "\\.go$", "language": "script", "description": ""}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "pre-commit-hooks/run-golangci-lint.sh", "types": ["go"], "language": "script", "pass_filenames": false, "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"}, {"id": "go-critic", "name": "go-critic", "entry": "pre-commit-hooks/run-go-critic.sh", "files": "\\.go$", "language": "script", "description": "Runs `go-critic`, requires https://github.com/go-critic/go-critic"}, {"id": "go-unit-tests", "name": "go-unit-tests", "entry": "pre-commit-hooks/run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`"}, {"id": "go-build", "name": "go-build", "entry": "pre-commit-hooks/run-go-build.sh", "files": "\\.go$", "language": "script", "description": "Runs `go build`, requires golang"}, {"id": "go-generate", "name": "go-generate", "entry": "pre-commit-hooks/run-go-generate.sh", "files": "\\.go$", "language": "script", "description": "Runs `go generate`, requires golang"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "pre-commit-hooks/run-go-mod-tidy.sh", "pass_filenames": false, "language": "script", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "pre-commit-hooks/run-go-mod-vendor.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod vendor`, requires golang"}]
[{"id": "go-fmt", "name": "go fmt", "entry": "pre-commit-hooks/run-go-fmt.sh", "files": "\\.go$", "language": "script", "description": "Runs `gofmt`, requires golang"}, {"id": "go-imports", "name": "go imports", "entry": "pre-commit-hooks/run-go-imports.sh", "files": "\\.go$", "language": "script", "description": "Runs `goimports`, requires golang"}, {"id": "go-vet", "name": "go vet", "entry": "pre-commit-hooks/run-go-vet.sh", "files": "\\.go$", "language": "script", "description": "Runs `go vet`, requires golang"}, {"id": "go-lint", "name": "go lint", "entry": "pre-commit-hooks/run-go-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `golint`, requires https://github.com/golang/lint"}, {"id": "go-cyclo", "name": "go-cyclo", "entry": "pre-commit-hooks/run-go-cyclo.sh", "files": "\\.go$", "language": "script", "description": "Runs `gocyclo`, requires https://github.com/fzipp/gocyclo", "args": ["-over=15"]}, {"id": "validate-toml", "name": "validate toml", "entry": "tomlv", "files": "\\.toml$", "language": "system", "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"}, {"id": "no-go-testing", "name": "Check files aren't using go's testing package", "entry": "testing\\.T", "files": "test_.*\\.go$", "language": "pygrep", "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"}, {"id": "gometalinter", "name": "gometalinter", "entry": "pre-commit-hooks/run-gometalinter.sh", "files": "\\.go$", "language": "script", "description": ""}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "pre-commit-hooks/run-golangci-lint.sh", "types": ["go"], "language": "script", "pass_filenames": false, "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"}, {"id": "go-critic", "name": "go-critic", "entry": "pre-commit-hooks/run-go-critic.sh", "files": "\\.go$", "language": "script", "description": "Runs `go-critic`, requires https://github.com/go-critic/go-critic"}, {"id": "go-unit-tests", "name": "go-unit-tests", "entry": "pre-commit-hooks/run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`"}, {"id": "go-build", "name": "go-build", "entry": "pre-commit-hooks/run-go-build.sh", "files": "\\.go$", "language": "script", "description": "Runs `go build`, requires golang"}, {"id": "go-generate", "name": "go-generate", "entry": "pre-commit-hooks/run-go-generate.sh", "files": "\\.go$", "language": "script", "description": "Runs `go generate`, requires golang"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "pre-commit-hooks/run-go-mod-tidy.sh", "pass_filenames": false, "language": "script", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "pre-commit-hooks/run-go-mod-vendor.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod vendor`, requires golang"}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo +nightly fmt", "language": "system", "types": ["rust"], "args": ["--"]}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo +nightly fmt", "language": "system", "types": ["rust"], "args": ["--"]}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo +nightly fmt", "language": "system", "types": ["rust"], "args": ["--"]}]
[{"id": "perl-hook", "name": "perl example hook", "entry": "pre-commit-perl-hello", "language": "perl", "files": ""}]
[{"id": "gitleaks", "name": "Detect hardcoded secrets", "description": "Detect hardcoded secrets using Gitleaks", "entry": "gitleaks protect --verbose --redact --staged", "language": "golang", "pass_filenames": false}]
[{"id": "dotnet-example-hook", "name": "dotnet example hook", "entry": "testeroni", "language": "dotnet", "files": ""}]
[{"id": "d2-fmt", "name": "d2 fmt", "description": "Format d2 files", "entry": "d2 fmt", "language": "golang", "files": "\\.d2$"}]
[{"id": "proselint", "name": "A linter for prose", "description": "This hook checks language usage and style in text files.", "entry": "proselint", "language": "python", "types": ["text"]}]
[{"id": "python-files", "name": "Python files", "entry": "bin/hook.sh", "language": "script", "types": ["python"]}]
[{"id": "stylua", "name": "StyLua (cargo)", "description": "An opinionated Lua code formatter", "entry": "stylua", "language": "rust", "types": ["lua"]}, {"id": "stylua-system", "name": "StyLua (system)", "description": "An opinionated Lua code formatter", "entry": "stylua", "language": "system", "types": ["lua"]}, {"id": "stylua-github", "name": "StyLua (Github)", "description": "An opinionated Lua code formatter. Downloads Github release", "entry": "stylua", "language": "python", "types": ["lua"]}]
[{"id": "sqlint", "name": "sqlint", "entry": "sqlint", "language": "ruby", "minimum_pre_commit_version": "0.15.0", "types": ["sql"]}]
[{"id": "check-copyright", "name": "check-copyright", "description": "Validate Oracle copyright and license statements", "entry": ".pre-commit-scripts/check-copyright.py", "language": "script", "types_or": ["python", "shell", "bash"]}]
[{"id": "gitlint", "name": "gitlint", "description": "Checks your git commit messages for style.", "language": "python", "additional_dependencies": ["./gitlint-core[trusted-deps]"], "entry": "gitlint", "args": ["--staged", "--msg-filename"], "stages": ["commit-msg"]}, {"id": "gitlint-ci", "name": "gitlint", "language": "python", "additional_dependencies": ["./gitlint-core[trusted-deps]"], "entry": "gitlint", "always_run": true, "pass_filenames": false, "stages": ["manual"]}]
[{"id": "djcodemod", "name": "djcodemod", "entry": "djcodemod", "language": "python", "language_version": "python3", "types": ["file", "python"], "args": ["run"], "minimum_pre_commit_version": "2"}]
[{"id": "flake8-ros", "name": "flake8 ros", "description": "Apply flake8 with the ROS 2 settings.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true, "additional_dependencies": ["flake8==6.0.0", "flake8-blind-except==0.2.1", "flake8-builtins==2.1.0", "flake8-class-newline==1.6.0", "flake8-comprehensions==3.12.0", "flake8-deprecated==2.0.1", "flake8-docstrings==1.7.0", "flake8-import-order==0.18.2", "flake8-quotes==3.3.2"]}, {"id": "prettier-xacro", "name": "prettier xacro", "description": "Apply Prettier with plugin-xml to xacro.", "entry": "prettier --write --list-different --ignore-unknown --print-width 200 --xml-self-closing-space false --xml-whitespace-sensitivity ignore", "language": "node", "files": ".xacro$", "additional_dependencies": ["prettier@2.8.7", "@prettier/plugin-xml@2.2.0"]}, {"id": "prettier-launch-xml", "name": "prettier launch.xml", "description": "Apply Prettier with plugin-xml to launch.xml.", "entry": "prettier --write --list-different --ignore-unknown --print-width 200 --xml-self-closing-space false --xml-whitespace-sensitivity ignore", "language": "node", "files": "launch.xml$", "additional_dependencies": ["prettier@2.8.7", "@prettier/plugin-xml@2.2.0"]}, {"id": "prettier-package-xml", "name": "prettier package.xml", "description": "Apply Prettier with plugin-xml to package.xml.", "entry": "prettier --write --list-different --ignore-unknown --print-width 1000 --xml-self-closing-space false --xml-whitespace-sensitivity ignore", "language": "node", "files": "package.xml$", "additional_dependencies": ["prettier@2.8.7", "@prettier/plugin-xml@2.2.0"]}, {"id": "ros-include-guard", "name": "fix include guard", "description": "Fix the include guard macro name.", "entry": "ros-include-guard", "language": "python", "files": ".*\\.(h|hpp)$"}, {"id": "sort-package-xml", "name": "sort package.xml", "description": "Sort the dependent packages in package.xml.", "entry": "sort-package-xml", "language": "python", "files": "package.xml$"}]
[{"id": "gpt4docstrings", "name": "gpt4docstrings", "description": "Automatically create Python docstrings using OpenAI ChatGPT", "entry": "gpt4docstrings", "language": "python", "language_version": "python3", "types": ["python"], "require_serial": true}]
[{"id": "flake8-markdown", "name": "flake8-markdown", "description": "`flake8-markdown` is a command-line utility that runs `flake8` on Python fenced code blocks in Markdown files.", "entry": "flake8-markdown", "language": "python", "types": ["markdown"]}]
[{"id": "curlylint", "name": "curlylint", "description": "A linter which checks the indentation and the correctness of Jinja-like/HTML templates.", "language": "python", "language_version": "python3", "entry": "curlylint", "types_or": ["html", "jinja", "twig"], "require_serial": true}]
[{"id": "zuul-lint", "name": "Zuul Job Linter", "description": "Verifies if Zuul CI jobs files have valid syntax.", "language": "python", "files": "^(zuul.d/|.?zuul).*\\.yaml$", "pass_filenames": true, "verbose": true, "entry": "zuul-lint"}]
[{"id": "json-schema-spell-checker", "name": "json-schema-spell-checker", "description": "", "entry": "json-schema-spell-checker", "language": "node", "types": ["json"], "args": ["--fields=description,title"]}]
[{"id": "customPrefixCommit", "name": "customPrefixCommit", "entry": "customPrefixCommit.sh", "language": "script", "stages": ["commit-msg"], "description": "Utility to validate the commit message to check for Ticket and Semantic Messages"}]
[{"id": "flake518", "name": "flake518", "description": "`flake518` is a small wrapper around `flake8` to read the configuration from the PEP518 compliant `pyproject.toml`.", "entry": "flake518", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "obsolete-messages", "name": "obsolete-messages", "entry": "obsolete-messages-hook", "description": "Checks for obsolete messages in PO files", "files": "\\.po$", "language": "python"}, {"id": "untranslated-messages", "name": "untranslated-messages", "entry": "untranslated-messages-hook", "description": "Checks for untranslated messages in PO files", "files": "\\.po$", "language": "python"}, {"id": "fuzzy-messages", "name": "fuzzy-messages", "entry": "fuzzy-messages-hook", "description": "Checks for fuzzy messages in PO files", "files": "\\.po$", "language": "python"}, {"id": "remove-django-translators", "name": "remove-django-translators", "entry": "lreplace-extracted-comments-hook --django-translators", "description": "Removes the \"Translator\" string prepended by Django extracting messages con xgettext", "files": "\\.po$", "language": "python"}, {"id": "lreplace-extracted-comments", "name": "lreplace-extracted-comments", "entry": "lreplace-extracted-comments-hook", "description": "Replaces a string matching at the beginning of extracted comments", "files": "\\.po$", "language": "python"}, {"id": "check-metadata", "name": "check-metadata", "entry": "check-po-metadata-hook", "description": "Checks that the metadata values of your PO files matchs against some regexes", "files": "\\.po$", "language": "python"}, {"id": "standard-metadata", "name": "standard-metadata", "entry": "check-po-metadata-hook --standard-headers", "description": "Checks that the metadata of your PO files fits a set of standard requirements", "files": "\\.po$", "language": "python"}, {"id": "no-metadata", "name": "no-metadata", "entry": "check-po-metadata-hook --no-metadata", "description": "Checks that your PO files don't contain metadata headers", "files": "\\.po$", "language": "python"}, {"id": "remove-metadata", "name": "remove-metadata", "entry": "check-po-metadata-hook --no-metadata --remove-metadata", "description": "Removes metadata headers from your PO files", "files": "\\.po$", "language": "python"}, {"id": "check-entries", "name": "check-entries", "entry": "check-po-entries-hook", "description": "Check that PO files entries match a set of requirements passed by parameters", "files": "\\.po$", "language": "python"}, {"id": "max-messages", "name": "max-messages", "entry": "check-po-entries-hook --max-messages", "description": "Checks that each one of your PO files don't contain more than X messages", "files": "\\.po$", "language": "python"}, {"id": "max-lines", "name": "max-lines", "entry": "check-po-entries-hook --max-lines", "description": "Checks that each one of your PO files don't contain more than X lines", "files": "\\.po$", "language": "python"}, {"id": "min-translated", "name": "min-translated", "entry": "untranslated-messages-hook --min", "description": "Checks that each one of your PO files has at least a number or a parcentage of messages translated", "files": "\\.po$", "language": "python"}]
[{"id": "turtle-canon", "name": "Turtle Canon", "description": "Turtle Canon: A tool for canonizing Turtle (`.ttl`) ontology files.", "entry": "turtle-canon", "language": "python", "language_version": "python3.9", "minimum_pre_commit_version": "1.13.0", "require_serial": true, "files": "\\.ttl$", "types": ["text"]}]
[{"id": "pautoflake", "name": "pyproject-autoflake", "entry": "pautoflake", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "shfmt", "name": "shfmt", "description": "Shell source code formatter (native install)", "language": "golang", "additional_dependencies": ["mvdan.cc/sh/v3/cmd/shfmt@v3.7.0"], "entry": "shfmt", "args": ["-w", "-s"], "types": ["shell"], "exclude_types": ["csh", "tcsh", "zsh"], "stages": ["commit", "merge-commit", "push", "manual"]}, {"id": "shfmt-docker", "name": "shfmt", "description": "Shell source code formatter (Docker image)", "language": "docker_image", "entry": "--net none mvdan/shfmt:v3.7.0@sha256:c029770b8d8091b482cd1b30bd190d1d422bb5787e6ddc7894ef7d9784578690", "args": ["-w", "-s"], "types": ["shell"], "exclude_types": ["csh", "tcsh", "zsh"], "stages": ["commit", "merge-commit", "push", "manual"]}]
[{"id": "tflint", "name": "tflint", "description": "Run tflint", "require_serial": true, "entry": "tflint-py", "language": "python", "types": ["terraform"]}]
[{"id": "python3-hook", "name": "Python 3 Hook", "entry": "python3-hook", "language": "python", "language_version": "python3", "files": "\\.py$"}]
[{"id": "postgres", "name": "postgres", "description": "Check psql formatting", "entry": "postgres", "types": ["sql"], "language": "script"}, {"id": "message", "name": "commit-message", "description": "Validate commit message", "entry": "message.py", "stages": ["commit-msg"], "language": "script"}]
[{"id": "jira_commit_msg", "name": "jira_commit_msg", "description": "commit-msg hook for jira issue verification with pre-commit.", "entry": "jira_commit_msg", "stages": ["commit-msg"], "language": "python"}, {"id": "jira_prepare_commit_msg", "name": "jira_prepare_commit_msg", "description": "prepare-commit-msg hook for adding jira issue with pre-commit.", "entry": "jira_prepare_commit_msg", "stages": ["prepare-commit-msg"], "language": "python"}]
[{"id": "pipenv-setup", "name": "pipenv-setup", "description": "`pipenv-setup` is a command-line utility to sync pipfile/lockfile to setup.py", "entry": "pipenv-setup sync", "args": ["--pipfile", "--dev"], "language": "python", "types": ["file", "non-executable", "text"], "files": "Pipfile(\\.lock)?|setup\\.py", "pass_filenames": false}]
[{"id": "promypy", "name": "promypy", "description": "Progressive type annotation without regression! \ud83d\ude80", "entry": "promypy check", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "kubevious-index-library", "name": "kubevious index rules library", "description": "Index Kubevious rules library", "types": ["file", "yaml"], "language": "docker_image", "pass_filenames": false, "entry": "kubevious/cli:1.0.45", "args": ["index-library", "/src"]}, {"id": "kubevious-lint", "name": "Kubevious Lint checking for manifest API validity", "description": "Kubevious Lint checks for manifest API validity", "types": ["file", "yaml"], "language": "docker_image", "pass_filenames": false, "entry": "kubevious/cli:1.0.45", "args": ["lint", "/src"]}, {"id": "kubevious-guard", "name": "Kubevious Guard checking for manifest validity and violations", "description": "Kubevious Guard checks for manifest API validity and violations of best practices", "types": ["file", "yaml"], "language": "docker_image", "pass_filenames": false, "entry": "kubevious/cli:1.0.45", "args": ["guard", "/src"]}]
[{"id": "circleci-config-validate", "name": "Validate CircleCI configs", "entry": "scripts/circleci-config-validate.sh", "language": "script", "verbose": false, "files": "^.circleci/.*yml$", "always_run": false, "args": []}]
[{"id": "CVE-2017-18342", "name": "Disallow pyyaml.load", "entry": "\\b(py)?yaml.load\\b", "language": "pygrep", "files": "\\.py$"}, {"id": "remove-unicode-non-breaking-spaces", "name": "Remove unicode non-breaking space character U+00A0", "language": "system", "entry": "perl -pi* -e 's/\\xc2\\xa0/ /g && ($t = 1) && print STDERR $_; END{{exit $t}}'", "exclude_types": ["binary"]}, {"id": "remove-unicode-zero-width-space", "name": "Remove unicode zero width space character U+200B", "language": "system", "entry": "perl -pi -e 's/\\xe2\\x80\\x8b//g && ($t = 1) && print STDERR $_; END{{exit $t}}'", "exclude_types": ["binary"]}, {"id": "remove-unicode-zero-width-non-breaking-spaces", "name": "Remove unicode zero width non-breaking space character U+FEFF", "language": "system", "entry": "perl -pi* -e 's/\\xef\\xbb\\xbf//g && ($t = 1) && print STDERR $_; END{{exit $t}}'", "exclude_types": ["binary"]}, {"id": "remove-en-dashes", "name": "Remove the unicode character U+2013 (en dash)", "language": "system", "entry": "perl -pi* -e 's/\\xe2\\x80\\x93/-/g && ($t = 1) && print STDERR $_; END{{exit $t}}'", "exclude_types": ["binary"]}, {"id": "sort-gitignore", "name": "Sort contents of .gitignore", "language": "script", "entry": "scripts/sort.sh", "files": ".gitignore"}, {"id": "sort-ansible-requirements-yml", "name": "sort ansible requirements.yml files", "entry": "scripts/sort-ansible-requirements-yml.py", "language": "script", "files": "(^|\\/)requirements\\.ya?ml$"}]
[{"id": "check-console-log", "name": "Check for console.log statements", "entry": "hooks/check-console-log", "language": "script", "types": ["javascript"]}]
[{"id": "git-branches-check", "name": "Git branches check", "description": "Check for old stale and already merged branches from the current repo with user friendly messages and colors", "entry": "pre_commit_hooks/git-branches-check.sh", "language": "script", "always_run": true, "types": ["shell"]}, {"id": "jenkinsfile-check", "name": "Jenkinsfile check", "description": "Check if Jenkinsfile is valide", "entry": "pre_commit_hooks/jenkinsfile-check.sh Jenkinsfile", "files": "Jenkinsfile", "language": "script", "types": ["shell"]}]
[{"id": "black_nbconvert", "name": "black_nbconvert", "description": "Apply black to ipynb files", "entry": "black_nbconvert", "language": "python", "language_version": "python3", "require_serial": true, "files": "\\.ipynb$"}]
[{"id": "pint", "name": "Pint", "description": "Run Pint on all PHP files.", "entry": "vendor/bin/pint", "language": "script", "files": "\\.php$"}]
[{"id": "git-chglog", "name": "Check for git-chglog compatible commit messages", "description": "Ensure that the commit message adheres to the git-chglog configuration", "entry": "pre-commit-git-chglog", "language": "python"}]
[{"id": "pmd", "name": "pmd", "description": "Runs the PMD static code analyzer.", "language": "docker", "entry": "/bin/bash /opt/run_pmd.sh", "files": "\\.java$", "require_serial": true}, {"id": "cpd", "name": "cpd", "description": "Runs the Copy/Paste Detector (CPD).", "language": "docker", "entry": "/bin/bash /opt/run_cpd.sh", "files": "\\.java$", "require_serial": true}, {"id": "checkstyle", "name": "checkstyle", "description": "Runs the Checkstyle static code analysis tool.", "language": "docker", "entry": "/bin/bash /opt/run_checkstyle.sh", "files": "\\.java$", "require_serial": true}]
[{"id": "shell-lint", "name": "Shell Syntax Check", "description": "Check Shell Syntax on ALL staged files with user friendly messages and colors", "entry": "pre_commit_hooks/shell-lint.sh", "language": "script", "types": ["shell"]}]
[{"id": "git-check-mailmap", "name": "[Git] Check mailmap", "description": "Detect if an email address needs to be added to mailmap Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "python", "exclude": ".*", "always_run": true, "entry": "git-check-mailmap"}, {"id": "git-forbid-binary", "name": "[Git] Forbid binaries", "description": "Forbid binary files from being committed Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "fail", "types": ["binary"], "entry": "Committing binary files is not allowed."}, {"id": "git-check", "name": "[Git] Forbid conflict marks and spaces errors", "description": "Use git to check for conflict markers and core.whitespace errors, respecting .gitattributes Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "script", "entry": "hooks/shell/git-check"}, {"id": "git-dirty", "name": "[Git] Forbid dirty git tree", "description": "Detect if git tree contains modified, staged, or untracked files curtosy: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "script", "entry": "hooks/shell/git-dirty"}, {"id": "git-check-added-large-files", "name": "[Git] Forbid large files", "description": "Prevent giant files from being committed Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "entry": "git-check-added-large-files", "args": ["--maxkb=500"]}, {"id": "git-check-merge-conflict", "name": "[Git] Forbid merge conflicts", "description": "Check for files that contain merge conflict strings. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "git-check-merge-conflict"}, {"id": "git-commit-msg", "name": "[Git] Check the commit message formatting", "description": "Make sure the commit messages matches the expected format.\n", "language": "python", "always_run": true, "entry": "git-commit-msg", "stages": ["commit-msg"]}, {"id": "generic-check-byte-order-marker", "name": "[Generic] Forbid byte-order marker", "description": "Forbid files which have a UTF-8 byte-order marker Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-check-byte-order-marker"}, {"id": "generic-check-case-conflict", "name": "[Generic] Forbid for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "generic-check-case-conflict"}, {"id": "generic-check-executables-have-shebangs", "name": "[Generic] Ensure shebangs for exec files", "description": "Ensures that (non-binary) executables have a shebang. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text", "executable"], "entry": "generic-check-executables-have-shebangs"}, {"id": "generic-check-symlinks", "name": "[Generic] Forbid broken symlinks", "description": "Checks for symlinks which do not point to anything. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["symlink"], "entry": "generic-check-symlinks"}, {"id": "generic-check-vcs-permalinks", "name": "[Generic] Ensure vcs permalinks", "description": "Ensures that links to vcs websites are permalinks. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-check-vcs-permalinks"}, {"id": "generic-detect-private-key", "name": "[Generic] Forbid private keys", "description": "Detects the presence of private keys Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-detect-private-key"}, {"id": "generic-end-of-file-fixer", "name": "[Generic] Fix end-of-files", "description": "Ensures that a file is either empty, or ends with one newline. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-end-of-file-fixer"}, {"id": "generic-trailing-whitespace", "name": "[Generic] Trim trailing whitespace", "description": "This hook trims trailing whitespace. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-trailing-whitespace-fixer"}, {"id": "generic-crlf-forbid", "name": "[Generic] Forbid CRLF end-lines", "description": "Forbid files containing CRLF end-lines to be committed Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-crlf-forbid"}, {"id": "generic-crlf-remove", "name": "[Generic] Replace CRLF with LF", "description": "Replace CRLF end-lines by LF ones before committing Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "python", "types": ["text"], "entry": "generic-crlf-remove"}, {"id": "generic-tabs-forbid", "name": "[Generic] Forbid tabs", "description": "Forbid files containing tabs to be committed Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "python", "exclude": "(.*Makefile.*|debian/rules(\\.in)?|.git/COMMIT_EDITMSG)", "types": ["text"], "entry": "generic-tabs-forbid"}, {"id": "generic-tabs-remove", "name": "[Generic] Remove tabs", "description": "Replace tabs by whitespaces before committing Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "python", "exclude": "(.*Makefile.*|debian/rules(\\.in)?|.git/COMMIT_EDITMSG)", "types": ["text"], "entry": "generic-tabs-remove", "args": ["--whitespaces-count=4"]}, {"id": "generic-nbsp-forbid", "name": "[Generic] Forbid nbsp U+00A0", "description": "Detect unicode non-breaking space character U+00A0 aka M-BM- Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "system", "types": ["text"], "entry": "perl -ne 'print if $m = /\\xc2\\xa0/; $t ||= $m; END{{exit $t}}'"}, {"id": "generic-nbsp-remove", "name": "[Generic] Remove nbsp U+00A0", "description": "Remove unicode non-breaking space character U+00A0 aka M-BM- Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "system", "types": ["text"], "entry": "perl -pi* -e 's/\\xc2\\xa0/ /g && ($t = 1) && print STDERR $_; END{{exit $t}}'\n"}, {"id": "generic-en-dashes-forbid", "name": "[Generic] Forbid en dashes U+2013", "description": "Detect the EXTREMELY confusing unicode character U+2013 Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "system", "types": ["text"], "entry": "perl -ne 'print if $m = /\\xe2\\x80\\x93/; $t ||= $m; END{{exit $t}}'\n"}, {"id": "generic-en-dashes-remove", "name": "[Generic] Remove en dashes U+2013", "description": "Remove the EXTREMELY confusing unicode character U+2013 Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "system", "types": ["text"], "entry": "perl -pi* -e 's/\\xe2\\x80\\x93/-/g && ($t = 1) && print STDERR $_; END{{exit $t}}'\n"}, {"id": "ansible-lint", "name": "[Ansible] Run ansible-lint", "description": "This hook runs ansible-lint. Origin: https://github.com/ansible/ansible-lint\n", "language": "python", "additional_dependencies": ["ansible", "ansible-lint"], "always_run": true, "entry": "ansible-lint --force-color .", "pass_filenames": false}, {"id": "c-cpp-cmake-format-config", "name": "[CMake] Demand .cmake_format.yaml", "description": "Demand the presence of .cmake_format.yaml configuration file\n", "language": "python", "always_run": true, "entry": "cmake-create-cmake-format-cfg", "pass_filenames": false}, {"id": "c-cpp-cmake-format", "name": "[CMake] Format cmake files", "description": "cmake-format can format your listfiles nicely\n", "language": "python", "additional_dependencies": ["cmake-format", "PyYAML"], "types": ["cmake"], "entry": "cmake-format", "args": ["--in-place"]}, {"id": "c-cpp-cmake-lint", "name": "[Cmake] Lint cmake files", "description": "cmake-lint will check your listfiles for style violations, common mistakes, and anti-patterns.\n", "language": "python", "additional_dependencies": ["cmake-format", "PyYAML"], "types": ["cmake"], "entry": "cmake-lint"}, {"id": "c-cpp-clang-format-c-config", "name": "[C-C++-Header] Demand .clang-format", "description": "Demand the presence of .clang-format configuration file\n", "language": "python", "always_run": true, "entry": "c-create-clang-format-cfg", "pass_filenames": false}, {"id": "c-cpp-clang-format-c", "name": "[C] Run clang-format", "description": "Run clang-format\n", "language": "system", "types": ["c"], "entry": "clang-format", "args": ["-style=file", "-i"]}, {"id": "c-cpp-clang-format-cpp", "name": "[C++] Run clang-format", "description": "Run clang-format\n", "language": "system", "types": ["c++"], "entry": "clang-format", "args": ["-style=file", "-i"]}, {"id": "c-cpp-clang-format-header", "name": "[Header] Run clang-format", "description": "Run clang-format\n", "language": "system", "types": ["header"], "entry": "clang-format", "args": ["-style=file", "-i"]}, {"id": "dockerfile-lint-1", "name": "[docker] Lint Dockerfiles 1", "description": "Lint dockerfile Origin: https://github.com/pryorda/dockerfilelint-precommit-hooks\n", "language": "node", "additional_dependencies": ["dockerfilelint"], "files": ".*Dockerfile.*", "types": ["dockerfile"], "entry": "dockerfilelint"}, {"id": "dockerfile-lint-2", "name": "[docker] Lint Dockerfiles 2", "description": "Lint dockerfile Origin: https://github.com/Lucas-C/pre-commit-hooks-nodejs\n", "language": "node", "additional_dependencies": ["dockerfile_lint"], "files": ".*Dockerfile.*", "types": ["dockerfile"], "entry": "dockerfile_lint --dockerfile"}, {"id": "html-validate", "name": "[html] Validate html syntax", "description": "HTML syntax validator using W3C v.Nu checker, with support for handlebars/jinja2 templates Origin: https://github.com/Lucas-C/pre-commit-hooks-java\n", "language": "python", "additional_dependencies": ["html5validator", "jinja2", "pybars3", "six"], "types": ["html"], "entry": "html-validate"}, {"id": "html-hint", "name": "[html] Validate nodejs and html syntax", "description": "NodeJS HTML syntax linter (htmlhint) Origin: https://github.com/Lucas-C/pre-commit-hooks-nodejs\n", "language": "node", "additional_dependencies": ["htmlhint"], "types": ["html"], "entry": "htmlhint"}, {"id": "html-lint", "name": "[html] Lint nodejs and html syntax", "description": "NodeJS HTML syntax linter (htmllint) Origin: https://github.com/Lucas-C/pre-commit-hooks-nodejs\n", "language": "node", "additional_dependencies": ["htmllint-cli"], "types": ["html"], "entry": "htmllint"}, {"id": "html-forbid-img-without-alt-text", "name": "[html] Ensure img have alt text", "description": "List every img tag without a alt= or data-ng-attr-alt= attribute Origin: https://github.com/Lucas-C/pre-commit-hooks-lxml\n", "language": "python", "additional_dependencies": ["lxml"], "types": ["html"], "entry": "html-forbid-img-without-alt-text"}, {"id": "html-forbid-non-std-attributes", "name": "[html] Forbid Non-standard html attrs", "description": "Detect any non-standard attribute that is not prefixed with data- Origin: https://github.com/Lucas-C/pre-commit-hooks-lxml\n", "language": "python", "additional_dependencies": ["lxml"], "types": ["html"], "entry": "html-forbid-non-std-attributes", "args": ["--extra-known-attributes", "content,http-equiv,placeholder,role,style"]}, {"id": "html-detect-missing-css-classes-html", "name": "[html] Check missing css classes", "description": "Detect unused or missing CSS classes definitions, and abort if any of the later ones is found Origin: https://github.com/Lucas-C/pre-commit-hooks-lxml\n", "language": "python", "additional_dependencies": ["lxml", "tinycss2"], "types": ["html"], "entry": "html-detect-missing-css-classes"}, {"id": "html-detect-missing-css-classes-css", "name": "[css] Check missing css classes", "description": "Detect unused or missing CSS classes definitions, and abort if any of the later ones is found Origin: https://github.com/Lucas-C/pre-commit-hooks-lxml\n", "language": "python", "additional_dependencies": ["lxml", "tinycss2"], "types": ["css"], "entry": "html-detect-missing-css-classes"}, {"id": "html-tags-blacklist", "name": "[html] Forbid some html tags", "description": "Forbid some html tags Origin: https://github.com/Lucas-C/pre-commit-hooks-lxml\n", "language": "python", "additional_dependencies": ["lxml"], "types": ["html"], "entry": "html-tags-blacklist", "args": ["--forbidden-tags", "basefont,blink,center,font,marquee,s,strike,tt,u"]}, {"id": "html-attributes-blacklist", "name": "[html] Forbid some html attrs", "description": "Forbid some html attributes Origin: https://github.com/Lucas-C/pre-commit-hooks-lxml\n", "language": "python", "additional_dependencies": ["lxml"], "types": ["html"], "entry": "html-attributes-blacklist", "args": ["--forbidden-attributes", "align,alink,background,basefont,bgcolor,border,color,link,text,vlink"]}, {"id": "js-eslint", "name": "[JS] Run eslint", "description": "Run eslint\n", "language": "node", "additional_dependencies": ["eslint"], "types": ["javascript"], "entry": "eslint"}, {"id": "js-prettier", "name": "[JS] Run prettier", "description": "Run prettier\n", "language": "node", "additional_dependencies": ["prettier"], "types": ["javascript"], "entry": "prettier", "args": ["--write", "--list-different"]}, {"id": "ts-eslint", "name": "[TS] Run eslint", "description": "Run eslint\n", "language": "node", "additional_dependencies": ["eslint"], "types": ["ts"], "entry": "eslint"}, {"id": "ts-prettier", "name": "[TS] Run prettier", "description": "Run prettier\n", "language": "node", "additional_dependencies": ["prettier"], "types": ["ts"], "entry": "prettier", "args": ["--write", "--list-different"]}, {"id": "tsx-eslint", "name": "[TSX] Run eslint", "description": "Run eslint\n", "language": "node", "additional_dependencies": ["eslint"], "types": ["tsx"], "entry": "eslint"}, {"id": "tsx-prettier", "name": "[TSX] Run prettier", "description": "Run prettier\n", "language": "node", "additional_dependencies": ["prettier"], "types": ["tsx"], "entry": "prettier", "args": ["--write", "--list-different"]}, {"id": "jinja-lint", "name": "[Jinja] Lint files", "description": "A linter which checks the indentation and the correctness of Jinja-like/HTML templates. Origin: https://github.com/motet-a/jinjalint\n", "language": "python", "additional_dependencies": ["jinjalint"], "types": ["jinja"], "entry": "jinjalint"}, {"id": "json-check-syntax", "name": "[Json] Check syntax", "description": "This hook checks json files for parseable syntax. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["json"], "entry": "json-check-syntax"}, {"id": "json-pretty-format", "name": "[Json] Pretty format", "description": "This hook sets a standard for formatting JSON files. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["json"], "entry": "json-pretty-format --autofix", "args": ["--indent=2"]}, {"id": "markdown-lint", "name": "[Markdown] Check md", "description": "Check markdown files and flag style issues Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["mdl"], "types": ["markdown"], "entry": "mdl", "args": ["--rules", "~MD024"]}, {"id": "perl-critic", "name": "[Perl] Run perl-critic", "description": "Runs perlcritic, requires script in path Origin: https://github.com/henryykt/pre-commit-perl\n", "language": "script", "types": ["perl"], "entry": "perl-critic"}, {"id": "perl-tidy", "name": "[Perl] Run perl-tidy", "description": "Runs perltidy, requires script in path Origin: https://github.com/henryykt/pre-commit-perl\n", "language": "script", "types": ["perl"], "entry": "perl-tidy"}, {"id": "php-lint-all", "name": "[PHP] Check syntax", "description": "Check PHP Syntax on ALL PHP staged files with user friendly messages and colors. Origin: https://github.com/digitalpulp/pre-commit-php\n", "language": "script", "types": ["php"], "entry": "hooks/shell/php-lint", "args": ["-s", "all"]}, {"id": "php-lint", "name": "[PHP] Check syntax", "description": "Runs php -l on all staged files. Exits when it hits the first errored file Origin: https://github.com/digitalpulp/pre-commit-php\n", "language": "system", "types": ["php"], "entry": "php -l"}, {"id": "php-unit", "name": "[PHP] Run unit test", "description": "Run the full php unit test. Checks which PHPUnit executable is available first and then runs it. Preference order is vendor/bin, phpunit and phpunit.phar. Origin: https://github.com/digitalpulp/pre-commit-php\n", "language": "script", "types": ["php"], "entry": "hooks/shell/php-unit"}, {"id": "php-cs", "name": "[PHP] Run codesniffer", "description": "Run php codesniffer against all staged files. Origin: https://github.com/digitalpulp/pre-commit-php\n", "language": "script", "types": ["php"], "entry": "hools/shell/php-cs"}, {"id": "php-cbf", "name": "[PHP] Run codesniffer beautifyer", "description": "Run php codesniffer against all staged files. Origin: https://github.com/digitalpulp/pre-commit-php\n", "language": "script", "types": ["php"], "entry": "hooks/shell/php-cbf"}, {"id": "php-cs-fixer", "name": "[PHP] Fix coding standards", "description": "Run php coding standards fixer against all staged files.", "language": "script", "types": ["php"], "entry": "hooks/shell/php-cs-fixer"}, {"id": "puppet-lint", "name": "[Puppet] Lint file", "description": "Check Puppet manifests for stylistic problems Origin: http://puppet-lint.com/\n", "language": "ruby", "additional_dependencies": ["puppet-lint"], "types": ["puppet"], "entry": "puppet-lint"}, {"id": "puppet-validate", "name": "[Puppet] Validate manifests", "description": "Validate syntax of Puppet manifests Origin: https://github.com/chriskuehl/puppet-pre-commit-hooks\n", "language": "ruby", "types": ["puppet"], "entry": "puppet parser validate --"}, {"id": "puppet-erb-validate", "name": "[Puppet] Validate ERB templates", "description": "Validate syntax of Puppet ERB templates Origin: https://github.com/chriskuehl/puppet-pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["puppet"], "types": ["erb"], "entry": "puppet-erb-validate"}, {"id": "puppet-r10k-validate", "name": "[Puppet] Validate r10k file", "description": "Validate syntax of Puppetfile using r10k Origin: https://github.com/chriskuehl/puppet-pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["r10k"], "files": "^Puppetfile$", "entry": "puppet-r10k-validate"}, {"id": "puppet-epp-validate", "name": "[Puppet] Validate EPP templates", "description": "Validate syntax of Puppet EPP templates Origin: https://github.com/chriskuehl/puppet-pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["puppet"], "files": "\\.epp$", "entry": "puppet epp validate"}, {"id": "python-check-ast", "name": "[Python] Check python ast", "description": "Simply check whether files parse as valid python. Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "python-check-ast"}, {"id": "python-check-builtin-literals", "name": "[Python] Check builtin type constr use", "description": "Require literal syntax when initializing empty or zero Python builtin types. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "python-check-builtin-literals"}, {"id": "python-check-docstring-first", "name": "[Python] Check docstring is first", "description": "Checks a common error of defining a docstring after code. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "python-check-docstring-first"}, {"id": "python-debug-statements", "name": "[Python] Forbid debug statements", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "python-debug-statement-hook"}, {"id": "python-double-quote-string-fixer", "name": "[Python] Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "python-double-quote-string-fixer"}, {"id": "python-fix-encoding-pragma", "name": "[Python] Fix python encoding pragma", "description": "Remove '# -*- coding: utf-8 -*-' from the top of python files Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["python"], "entry": "python-fix-encoding-pragma --remove"}, {"id": "python-requirements-txt-fixer", "name": "[Python] Fix requirements.txt", "description": "Sorts entries in requirements.txt Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "files": "requirements.*\\.txt$", "entry": "python-requirements-txt-fixer"}, {"id": "python-safetydb", "name": "[Python] Check requirements.txt safety", "description": "Analyze your Python requirements for known security vulnerabilities. Origin: https://github.com/Lucas-C/pre-commit-hooks-safety\n", "language": "python", "additional_dependencies": ["safety"], "files": "requirements.*\\.txt$", "entry": "python-safety-checks"}, {"id": "python-pyupgrade", "name": "[Python] Upgrade syntax", "description": "Run pyupgrade Origin: https://github.com/asottile/pyupgrade\n", "language": "python", "additional_dependencies": ["pyupgrade"], "types": ["python"], "entry": "pyupgrade"}, {"id": "python-isort-config", "name": "[Python] Demand isort config", "description": "Demand the presence of .isort.cfg configuration file\n", "language": "python", "types": ["python"], "always_run": true, "entry": "python-isort-config", "pass_filenames": false}, {"id": "python-isort-seed-config", "name": "[Python] Seed isort known_third_party", "description": "Statically populate the known_third_party isort setting Origin: https://github.com/asottile/seed-isort-config\n", "language": "python", "additional_dependencies": ["seed-isort-config"], "entry": "seed-isort-config", "pass_filenames": false}, {"id": "python-isort", "name": "[Python] Run isort", "description": "Run isort formatter with black-compatible configuration Origin: https://github.com/timothycrosley/isort\n", "language": "python", "additional_dependencies": ["isort"], "types": ["python"], "require_serial": true, "entry": "isort", "args": ["--multi-line=3", "--trailing-comma", "--force-grid-wrap=0", "--use-parentheses", "--line-width=100", "--profile=black"]}, {"id": "python-black", "name": "[Python] Run black", "description": "Run Black formatter Origin: https://github.com/psf/black\n", "language": "python", "additional_dependencies": ["black"], "types": ["python"], "require_serial": true, "entry": "black", "args": ["--line-length=100", "--skip-string-normalization"]}, {"id": "python-pylint-config", "name": "[Python] Demand pylint config", "description": "Demand the presence of .pylintrc configuration file\n", "language": "python", "types": ["python"], "always_run": true, "entry": "python-pylint-config", "pass_filenames": false}, {"id": "python-pylint", "name": "[Python] Run pylint", "description": "Run pylint Origin: https://github.com/PyCQA/pylint\n", "language": "python", "additional_dependencies": ["pylint"], "types": ["python"], "entry": "pylint"}, {"id": "python-pydocstyle", "name": "[Python] Run pydocstyle", "description": "Run pydocstyle Origin: https://github.com/PyCQA/pydocstyle\n", "language": "python", "additional_dependencies": ["pydocstyle"], "types": ["python"], "entry": "pydocstyle"}, {"id": "python-bandit", "name": "[Python] Run bandit", "description": "Run bandit Origin: https://github.com/PyCQA/bandit\n", "language": "python", "additional_dependencies": ["bandit"], "types": ["python"], "entry": "bandit --skip=B404,B602,B603,B605,B606"}, {"id": "python-setup-cfg-fmt", "name": "[Python] Format setup.cfg", "description": "Apply a consistent format to `setup.cfg` files Origin: https://github.com/asottile/setup-cfg-fmt\n", "language": "python", "additional_dependencies": ["setup-cfg-fmt"], "files": "(^|/)setup\\.cfg$", "entry": "setup-cfg-fmt"}, {"id": "rst-linter", "name": "[Rst] Lint", "description": "Check .rst files with the same linter used by pypi.org Origin: https://github.com/Lucas-C/pre-commit-hooks-markup\n", "language": "python", "additional_dependencies": ["readme_renderer"], "types": ["rst"], "entry": "rst-linter"}, {"id": "ruby-validate", "name": "[Ruby] Validate syntax", "description": "Validate syntax of ruby code\n", "language": "ruby", "types": ["ruby"], "entry": "ruby -wc"}, {"id": "ruby-bundle-auditer", "name": "[Ruby] Patch-level verif for bundler", "description": "Check for vulnerable gem versions and insecure sources Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["bundler-audit"], "files": "Gemfile.lock", "entry": "bundle-audit check", "args": ["--update"]}, {"id": "ruby-fasterer", "name": "[Ruby] Suggest speed improvements", "description": "Use fasterer to suggest speed improvements in Ruby Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["fasterer"], "types": ["ruby"], "entry": "fasterer"}, {"id": "ruby-reek", "name": "[Ruby] Find code smells", "description": "Use reek to find ruby code smells Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["reek"], "types": ["ruby"], "entry": "reek"}, {"id": "ruby-rubocop", "name": "[Ruby] Check style", "description": "Enforce Ruby style guide with rubocop and rubocop-rspec Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "ruby", "additional_dependencies": ["rubocop", "rubocop-rspec"], "types": ["ruby"], "entry": "rubocop"}, {"id": "rust-outdated", "name": "[Rust] Check for outdated deps", "description": "Run cargo-outdated\n", "language": "rust", "additional_dependencies": ["cargo-outdated"], "types": ["rust"], "entry": "cargo outdated --root-deps-only --exit-code=1", "pass_filenames": false}, {"id": "rust-audit", "name": "[Rust] Check for dangerous deps", "description": "Run cargo-audit\n", "language": "rust", "additional_dependencies": ["cargo-audit"], "types": ["rust"], "entry": "cargo audit", "pass_filenames": false}, {"id": "rust-check", "name": "[Rust] Check syntax errors", "description": "Check the package for errors. Origin: https://github.com/doublify/pre-commit-rust\n", "language": "system", "types": ["rust"], "entry": "cargo check", "pass_filenames": false}, {"id": "rust-clippy", "name": "[Rust] Lint code with clippy", "description": "Lint rust sources Origin: https://github.com/doublify/pre-commit-rust\n", "language": "system", "types": ["rust"], "entry": "cargo clippy --all-targets --all -- -D warnings", "pass_filenames": false}, {"id": "rust-fix", "name": "[Rust] Fix compiler hints", "description": "Run cargo-fix\n", "language": "rust", "additional_dependencies": ["cargo-fix"], "types": ["rust"], "entry": "cargo fix --allow-dirty --allow-staged", "pass_filenames": false}, {"id": "rust-fmt", "name": "[Rust] Format files", "description": "Format files with rustfmt. Origin: https://github.com/doublify/pre-commit-rust\n", "language": "system", "types": ["rust"], "entry": "cargo fmt --"}, {"id": "shell-check-syntax", "name": "[Shell] Check syntax correctness", "description": "Check Shell scripts syntax correctness Origin: https://github.com/Lucas-C/pre-commit-hooks\n", "language": "system", "types": ["shell"], "entry": "bash -n"}, {"id": "shell-check", "name": "[Shell] Lint scripts", "description": "Shell scripts conform to shellcheck Origin: https://github.com/jumanjihouse/pre-commit-hooks#shellcheck\n", "language": "system", "types": ["shell"], "entry": "shellcheck", "args": ["--exclude=SC1091"]}, {"id": "shell-script-must-have-extension", "name": "[Shell] Forbid non-exec files without extension", "description": "Non-executable shell files (libs) should have an extension Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "script", "types": ["shell", "non-executable"], "entry": "hooks/shell/shell-scripts-must-have-extension"}, {"id": "shell-script-must-not-have-extension", "name": "[Shell] Forbid exec files with extension", "description": "Executable shell files (scripts) shouldn't have an extension Origin: https://github.com/jumanjihouse/pre-commit-hooks\n", "language": "script", "types": ["shell", "executable"], "entry": "hooks/shell/shell-scripts-must-not-have-extension"}, {"id": "shell-bashate", "name": "[Shell] Lint scripts", "description": "This hook runs bashate for linting shell scripts. Origin: https://github.com/openstack/bashate\n", "language": "python", "additional_dependencies": ["bashate"], "types": ["shell"], "entry": "bashate"}, {"id": "shell-beautysh", "name": "[Shell] Format scripts", "description": "This hook runs beautysh for beautifying shell scripts. Origin: https://github.com/lovesegfault/beautysh\n", "language": "python", "additional_dependencies": ["beautysh"], "types": ["shell"], "entry": "beautysh"}, {"id": "toml-check-syntax", "name": "[Toml] Check syntax", "description": "This hook checks toml files for parseable syntax. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "additional_dependencies": ["toml"], "types": ["toml"], "entry": "toml-check-syntax"}, {"id": "xml-check-syntax", "name": "[Xml] Check syntax", "description": "This hook checks xml files for parseable syntax. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "types": ["xml"], "entry": "xml-check-syntax"}, {"id": "yaml-check-syntax", "name": "[Yaml] Check syntax", "description": "This hook checks yaml files for parseable syntax. Origin: https://github.com/pre-commit/pre-commit-hooks\n", "language": "python", "additional_dependencies": ["ruamel.yaml"], "types": ["yaml"], "entry": "yaml-check-syntax --unsafe"}, {"id": "yaml-yamllint", "name": "[Yaml] Lint files", "description": "This hook runs yamllint. Origin: https://github.com/adrienverge/yamllint\n", "language": "python", "additional_dependencies": ["yamllint"], "types": ["yaml"], "entry": "yamllint"}]
[{"id": "cascadetoml-check", "name": "Check TOML cascade tree", "description": "This hook checks that TOML files match the template at the root", "entry": "cascadetoml check", "language": "python", "types": ["text"], "pass_filenames": false}]
[{"id": "terraform-docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "bin/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform-docs-adoc", "name": "Terraform docs Asciidoctor", "description": "Inserts input and output documentation into README.adoc (using terraform-docs).", "require_serial": true, "entry": "bin/terraform_docs_asciidoc.sh", "language": "script", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "entry": "bin/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform-sec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "entry": "bin/terraform_tfsec.sh", "language": "script"}, {"id": "terraform-lint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "entry": "bin/terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "bin/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "helm-lint", "name": "helmlint", "description": "Run helm lint, a linter for helm charts", "entry": "bin/helmlint.sh", "language": "script", "files": "\\.((ya?ml)|(tpl))$"}, {"id": "helm-unittest", "name": "Helm-unittest", "description": "This hook run helm unittest from quintush/helm-unittest", "entry": "bin/helm-unittest.sh", "language": "script", "pass_filenames": false, "always_run": true}, {"id": "docker-lint", "name": "Lint Dockerfiles", "description": "Runs hadolint to lint Dockerfiles", "language": "script", "entry": "bin/docker-lint.sh", "files": "Dockerfil*"}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "bin/shellcheck.sh", "language": "script"}, {"id": "verify-json", "name": "Pretty Print JSON files", "description": "Checks JSON files and pretty prints them", "entry": "bin/verify-json.sh", "language": "script", "files": "\\.json$"}, {"id": "verify-yaml", "name": "Pretty Print YAML files", "description": "Checks YAML files and pretty prints them", "entry": "bin/verify-yaml.sh", "language": "script", "files": "\\.(ya?ml)$"}, {"id": "markdown-toc", "name": "Generate Markdown toc", "description": "Generate a Table of Contents in a Markdown Document", "entry": "bin/markdown-toc.sh", "language": "script", "files": "\\.md$"}, {"id": "no-commit-on-branch", "name": "No commit on master or main", "description": "Do no allow any commit on either specified branch.", "entry": "bin/no-commit-on-branch.sh", "language": "script", "always_run": true}]
[{"id": "vacuum", "name": "vacuum", "description": "OpenAPI linter and quality checker (native install)", "language": "golang", "entry": "vacuum lint", "args": ["--details"], "types": ["text"], "files": "(^|/)(openapi|swagger)\\.(json|ya?ml)$"}]
[{"id": "pkgdown-index", "name": "Check pkgdown yaml for all docs", "description": "This hook checks if all man topics are included in pkgdown yaml.", "entry": "Rscript pkgdown_index.R", "language": "r"}]
[{"id": "docker-compose-check", "name": "Validate docker compose files", "description": "Checks that docker compose files are valid", "language": "script", "entry": "compose-check.sh", "files": "(docker-)?compose\\.ya?ml$"}]
[{"id": "yapf", "name": "yapf", "entry": "yapf", "language": "python", "language_version": "python3.5", "files": "\\.py$", "args": ["-i", "--style=etc/egym_yapf.conf"]}, {"id": "docformatter", "name": "docformatter", "entry": "docformatter", "language": "python", "files": "\\.py$"}]
[{"id": "optimize-images", "name": "optimize images", "description": "optimize image that are committed", "language": "script", "files": "\\.(png|jpg|jpeg)$", "entry": "./tools/pre-commit/optimize.sh"}, {"id": "translate-posts", "name": "translate posts", "description": "translate posts that committed, but doesn't have translation yet", "language": "script", "files": "\\.(md)$", "entry": "./tools/pre-commit/translate.sh"}]
[{"id": "black-tabby-formatter", "name": "black-tabby-formatter", "description": "Black formatter with tabs instead of spaces", "entry": "black-tabby-formatter", "language": "python", "types": ["python"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "poetry-check", "name": "poetry-check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^.*/pyproject\\.toml$"}, {"id": "poetry-lock", "name": "poetry-lock", "description": "run poetry lock to update lock file", "entry": "poetry lock", "language": "python", "language_version": "python3", "pass_filenames": false}, {"id": "poetry-export", "name": "poetry-export", "description": "run poetry export to sync lock file with requirements.txt", "entry": "poetry export", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^.*/poetry\\.lock$", "args": ["-f", "requirements.txt", "-o", "requirements.txt"]}]
[{"id": "poetry-version-up", "name": "poetry-version-up", "description": "Push pyproject.toml information to <pkg>/__version__.py", "entry": "poetry-version-up", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "poetry-export", "name": "poetry-export", "description": "creates `requirements.txt` file from `pyproject.toml`", "entry": "poetry-export", "language": "python", "always_run": false, "pass_filenames": true}]
[{"id": "anti-addiction", "name": "code anti-addiction", "entry": "anti-addiction.sh", "language": "script", "description": "code anti-addiction"}]
[{"id": "terraform_inputs_jenkins_pipeline_params", "name": "Terraform Inputs from/to Jenkins Pipeline Parameters", "description": "Supports the definition of a (declarative) Jenkins Pipeline's parameters from your Terraform Input Variables. Also supports the creation of a terraform.tfvars.json file based on your Terraform Input Variables, with values provided by the Jenkins Pipeline parameters' arguments. Requires segmentio/terraform-docs >= v0.4.0.", "entry": "terraform_inputs_jenkins_pipeline_params", "language": "python", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "update-django-environ-sample", "name": "Automatically update env.sample", "description": "Automatically update env.sample", "entry": "update_django_environ_sample", "language": "python", "always_run": true, "pass_filenames": false}]
[{"id": "mkdocs-build", "name": "Build MkDocs site", "entry": "mkdocs build", "language": "python", "always_run": true, "pass_filenames": false, "require_serial": true}]
[{"id": "jinjalint", "name": "jinjalint", "description": "A linter which checks the indentation and the correctness of Jinja-like/HTML templates.", "language": "python", "language_version": "python3", "entry": "jinjalint", "types": ["jinja"]}]
[{"id": "fourmat", "name": "fourmat", "description": "Fourmat: Batteries-included linting and autoformatting", "entry": "fourmat fix", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "ghat-go", "name": "ghat", "description": "upgrade action dependencies", "language": "golang", "entry": "ghat swot -d .", "pass_filenames": false, "types": ["yaml"]}, {"id": "ghat-system", "name": "ghat", "description": "upgrade action dependencies", "language": "system", "entry": "ghat swot -d .", "pass_filenames": false, "types": ["yaml"]}, {"id": "ghat-docker", "name": "ghat", "description": "upgrade action dependencies (via Docker build)", "language": "docker", "entry": "ghat swot -d .", "pass_filenames": false, "types": ["yaml"]}]
[{"id": "cargo", "name": "cargo", "entry": "cargo", "language": "system", "types": ["rust"], "pass_filenames": false}]
[{"id": "cython-lint-conda", "name": "cython-lint-conda", "description": "Lint Cython files", "entry": "cython-lint", "language": "conda", "require_serial": true, "types": ["cython"]}, {"id": "double-quote-cython-strings-conda", "name": "double-quote Cython strings-conda", "description": "replaces single-quoted strings with double-quoted strings.", "entry": "double-quote-cython-strings", "language": "conda", "types": ["cython"]}]
[{"id": "ensure-requirements-specified", "name": "Ensure requirements specified", "description": "Check that all requirements files have versions specified", "entry": "ensure-requirements-specified", "language": "python"}]
[{"id": "cfn-nag", "name": "cfn-nag", "description": "Wrapper around cfn_nag_scan that allows it to be ran on multiple files within a single hook", "entry": "cfn_nag_scan_wrapper", "language": "ruby", "files": "\\.(json|yaml|yml|template)$", "args": ["--fail-on-warnings", "--input-path"], "require_serial": false}]
[{"id": "pyleft", "name": "pyleft", "description": "Python type annotation existence checker", "entry": "pyleft", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python"]}]
[{"id": "buildifier", "name": "buildifier: format bazel files", "description": "Buildifier: bazel files formatter", "entry": "pre-commit-buildifier", "language": "python", "minimum_pre_commit_version": "2.9.0", "require_serial": true, "types_or": ["bazel"]}]
[{"id": "invoke", "name": "invoke", "entry": "invoke-wrapper", "language": "python", "types": ["file"], "args": [], "require_serial": true, "additional_dependencies": []}]
[{"id": "fmt", "name": "fmt", "description": "Format files with go fmt.", "entry": "fmt.sh", "language": "script", "files": "\\.go$"}, {"id": "vet", "name": "vet", "description": "Check files with go vet.", "entry": "vet.sh", "language": "script", "files": "\\.go$"}, {"id": "fix", "name": "fix", "description": "Fix files with go fix.", "entry": "go fix", "language": "system", "files": "\\.go$"}]
[{"id": "scalafmt", "name": "Scalafmt", "description": "Code formatter for Scala", "language": "script", "entry": "./scalafmt --non-interactive", "types": ["scala"]}, {"id": "wartremover", "name": "Wartremover", "language": "script", "entry": "./wartremover -traverser 'org.wartremover.warts.Null'", "types": ["scala"]}, {"id": "scalafix", "name": "Scalafix", "language": "script", "entry": "./scalafix", "types": ["scala"]}]
[{"id": "add-ticket", "name": "Add Ticket Number", "description": "Prefixes ticket name and number to commit message.", "entry": "add-ticket", "language": "python", "stages": ["prepare-commit-msg"], "always_run": true, "language_version": "python3"}]
[{"id": "stylelint", "name": "Stylelint CSS Linter", "entry": "stylelint", "language": "node", "additional_dependencies": ["prettier", "stylelint", "stylelint-config-prettier", "stylelint-config-standard", "stylelint-no-unsupported-browser-features", "stylelint-order", "stylelint-prettier", "stylelint-scss"], "files": "\\.(css|scss|sass)$", "args": ["--fix"]}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "scripts/shellcheck.sh", "language": "script"}, {"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "scripts/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "circleci-config-validate", "name": "CircleCI Config Validation", "entry": "scripts/circleci-config-validate.sh", "language": "script", "files": "config.yml", "exclude": "^(?!.circleci/)"}, {"id": "hadolint", "name": "Hadolint Dockerfile Linter", "description": "Dockerfile linter, validate inline bash, written in Haskell", "entry": "scripts/hadolint.sh", "language": "script", "files": "(\\.dockerfile|Dockerfile)$"}, {"id": "dockerfilelint", "name": "Dockerfile Linter", "entry": "dockerfilelint", "language": "node", "additional_dependencies": ["dockerfilelint"], "files": "(\\.dockerfile|Dockerfile)$"}, {"id": "prometheus-config-validate", "stages": ["commit"], "name": "Prometheus Config Validation", "description": "Validate Prometheus rule files", "language": "docker_image", "entry": "--entrypoint /bin/promtool prom/prometheus:latest", "files": "\\.yml$", "args": ["check", "config"]}, {"id": "prometheus-rules-validate", "stages": ["commit"], "name": "Prometheus Rules Validation", "description": "Validate Prometheus rule files", "language": "docker_image", "entry": "--entrypoint /bin/promtool prom/prometheus:latest", "files": "\\.yml$", "args": ["check", "rules"]}, {"id": "alertmanager-config-validate", "stages": ["commit"], "name": "AlertManager Config Validation", "description": "Validate AlertManager config files", "language": "docker_image", "entry": "--entrypoint /bin/amtool prom/alertmanager:latest", "files": "\\.yml$", "args": ["check-config"]}]
[{"id": "phylum", "name": "analyze lockfiles with phylum", "description": "Run `phylum` on dependency lockfiles", "entry": "phylum-ci", "language": "python", "stages": ["commit"]}]
[{"id": "changelog2version", "name": "changelog2version", "description": "Validate version file against latest changelog entry", "entry": "changelog2version", "language": "python", "pass_filenames": false, "require_serial": true}]
[{"id": "errcheck", "name": "errcheck", "entry": "go-pre-commit errcheck", "files": "\\.go$", "language": "system", "description": "Check your Go source code with errcheck"}, {"id": "go-fmt-goimports", "name": "go-fmt-goimports", "entry": "go-pre-commit go-fmt-goimports", "files": "\\.go$", "language": "system", "description": "Format your Go code with go fmt and goimports"}, {"id": "go-test", "name": "go-test", "entry": "go-pre-commit go-test", "files": "\\.go$", "language": "system", "description": "Run your Go unit tests"}, {"id": "go-vet", "name": "go-vet", "entry": "go-pre-commit go-vet", "files": "\\.go$", "language": "system", "description": "Check your Go source with go vet"}, {"id": "gofumports", "name": "gofumports", "entry": "go-pre-commit gofumports", "files": "\\.go$", "language": "system", "description": "Format your Go code with gofumports"}, {"id": "gofumpt", "name": "gofumpt", "entry": "go-pre-commit gofumpt", "files": "\\.go$", "language": "system", "description": "Format your Go code with gofumpt"}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "go-pre-commit golangci-lint", "files": "\\.go$", "language": "system", "description": "Check your Go code with golangci-lint"}, {"id": "golint", "name": "golint", "entry": "go-pre-commit golint", "files": "\\.go$", "language": "system", "description": "Check your Go code with golint"}, {"id": "staticcheck", "name": "staticcheck", "entry": "go-pre-commit staticcheck", "files": "\\.go$", "language": "system", "description": "Check your Go code with staticcheck"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "go-pre-commit go-mod-tidy", "files": "", "language": "system", "description": "Prune no-longer required commits from go.mod"}]
[{"id": "test-hook", "name": "DO NOT SUBMIT", "description": "Forbids the string \"DO NOT SUBMIT\".", "entry": "test_hook.py", "language": "script", "files": ".*"}]
[{"id": "GbibClean", "name": "GbibClean", "description": "Run GbibClean", "minimum_pre_commit_version": "2.1.0", "entry": "GbibClean --in-place", "language": "python", "types": ["bib"]}]
[{"id": "check-python-versions", "name": "check-python-versions", "description": "This is a tool for Python package maintainers who want to explicitly state which Python versions they support.", "entry": "check-python-versions", "language": "python", "pass_filenames": false, "always_run": true}]
[{"id": "flutter-analyze", "name": "Flutter Code Analyze", "entry": "run", "language": "script", "files": "\\.dart$"}, {"id": "dart-format", "name": "Dart Code format", "entry": "rundartformat", "language": "script", "files": "\\.dart$"}]
[{"id": "check-file-length", "name": "Check file length", "description": "Check the number of lines in a python file", "entry": "check_long_files.bash", "language": "script", "types": ["file", "python"]}]
[{"id": "text-prepender", "name": "Add Notice to files", "entry": "text-prepender", "language": "python", "types": ["text"]}]
[{"id": "rstcheck", "name": "rstcheck", "entry": "rstcheck", "language": "python", "types": ["rst"], "args": [], "require_serial": false, "additional_dependencies": []}]
[{"id": "scan", "name": "jake oss scan", "description": "runs a sonatype oss index-backed scan", "entry": "jake ddt", "language": "python", "types_or": ["python", "pyi"], "pass_filenames": false}]
[{"id": "sub-pre-commit", "name": "Sub pre commit", "description": "Run pre-commit in a sub folder. Strip folder named for passed files.", "entry": "sub-pre-commit", "language": "python", "require_serial": true}]
[{"id": "yourhook", "name": "Name of your hook", "description": "pre-commit template hook", "entry": "yourhook", "language": "python", "types": ["python"]}]
[{"id": "nbstripout", "name": "Strip Outputs from Notebooks", "description": "Strip outputs from all new notebooks", "entry": "nbstripout", "language": "script", "types": ["jupyter"]}, {"id": "validate_secrets_are_encrypted", "name": "Check Kubernetes' Secrets are Encrypted with SOPS", "description": "Check kubernetes' secrets are encrypted with SOPS", "entry": "validate_secrets_are_encrypted", "language": "python", "types": ["yaml"]}, {"id": "validate_encrypted_secret_name", "name": "Check Kubernetes SOPS Encrypted Secrets' Filenames End with .enc.yaml", "description": "Check kubernetes' SOPS encrypted yaml secrets` filenames end with .enc.yaml", "entry": "validate_encrypted_secret_name", "language": "python", "types": ["yaml"]}, {"id": "check_notebook_has_parameters_cell", "name": "Check that all notebooks contain a cell tagged with 'parameters'", "description": "Check that all notebooks contain a cell tagged with 'parameters'", "entry": "check_notebook_has_parameters_cell", "language": "python", "types": ["jupyter"]}, {"id": "nbsmoke_lint", "name": "Check that all notebooks pass nbsmoke lint check", "description": "Check that all notebooks pass nbsmoke lint check", "entry": "nbsmoke_lint", "language": "python", "types": ["jupyter"]}, {"id": "pg_format", "name": "Format postgres SQL files with pgFormatter", "description": "Format postgres SQL files with pgFormatter", "entry": "pgFormatter/pg_format -i -L --no-space-function", "language": "script", "types": ["sql"]}]
[{"id": "tartufo", "name": "Tartufo", "description": "`tartufo` is a tool for scanning git repositories for secrets/passwords/high-entropy data", "entry": "tartufo pre-commit", "language": "python", "args": ["--regex"], "pass_filenames": false}]
[{"id": "rails-outdated-schema", "description": "Check if db/schema.rb has been updated when new migration files are added.", "entry": "rails-outdated-schema", "files": "db/migrate/.+\\.rb$", "language": "ruby", "name": "Ensure db/schema.rb is Updated When New Migrations are Added"}, {"id": "rails-missing-migration-file", "description": "Check if the migration file corresponding to schema.rb has been committed", "entry": "rails-missing-migration-file", "files": "db/schema.rb", "language": "ruby", "name": "Ensure Corresponding Migration File for db/schema.rb is Committed to Git"}]
[{"id": "pip-requirements-changed", "name": "pip requirements changed", "description": "compare pip freeze to requirements.txt", "entry": "did_pip_requirements_change.sh", "language": "script", "files": "", "pass_filenames": false, "types": [], "always_run": true}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}, {"id": "doc8", "name": "doc8", "description": "This hook runs doc8 for linting docs", "entry": "doc8", "language": "python", "files": "\\.rst$", "require_serial": true}]
[{"id": "remove-consecutive-blank-lines", "name": "remove any consecutive blank lines", "description": "removes any consecutive blank lines in a file", "entry": "remove-consecutive-blank-lines", "language": "python"}, {"id": "check-process-script-syntax", "name": "check the syntax of any script blocks", "description": "checks that the contents of any script blocks in process definitions", "entry": "check-process-script-syntax", "language": "python"}, {"id": "detect-single-quote-script-blocks", "name": "detect single quote delimited script blocks", "description": "detects any script blocks that have been delimited by triple single quotes", "entry": "detect-single-quote-script-blocks", "language": "python"}, {"id": "detect-non-bash-shebangs", "name": "detect non-bash shebangs in script blocks", "description": "detects any script blocks that have a non-bash shebang (if they have a shebang)", "entry": "detect-non-bash-shebangs", "language": "python"}, {"id": "check-process-script-length", "name": "check length of any script blocks", "description": "checks that the length of any script blocks in process definitions do not exceed the required length", "entry": "check-process-script-length", "language": "python", "args": ["--max_block_length=20"]}]
[{"id": "ktlint", "name": "ktlint", "description": "Run ktlint format", "entry": "./gradlew ktlintFormat", "pass_filenames": false, "language": "system"}]
[{"id": "mccabe-complexity", "name": "Check functions complexity", "entry": "validate_ajustable_complexity", "language": "python"}, {"id": "expr-complexity", "name": "Check expressions complexity", "entry": "validate_expressions_complexity", "language": "python"}, {"id": "no-asserts", "name": "Check no asserts in code", "entry": "validate_no_asserts", "language": "python"}, {"id": "django-null-comments", "name": "Check if all nullable fields are annotated", "entry": "validate_django_null_true_comments", "language": "python"}, {"id": "django-deprecated-model-field-comments", "name": "Check if all deprecated fields have valid deprecation comments", "entry": "validate_django_deprecated_model_field_comments", "language": "python"}, {"id": "django-model-field-names", "name": "Check Django model field names", "entry": "validate_django_model_field_names", "language": "python"}, {"id": "test-naming", "name": "Check if tests named appropriately", "entry": "validate_test_namings", "language": "python"}, {"id": "line-count", "name": "Check number of lines in python files", "entry": "validate_amount_of_py_file_lines", "language": "python"}, {"id": "api-annotated", "name": "Check api schema annotations", "entry": "validate_api_schema_annotations", "language": "python"}, {"id": "old-style-annotations", "name": "Check old-style annotations", "entry": "validate_old_style_annotations", "language": "python"}, {"id": "package-structure", "name": "Root packages structure", "entry": "validate_package_structure", "language": "python"}, {"id": "forbidden-imports", "name": "Forbidden imports", "entry": "validate_no_forbidden_imports", "language": "python"}, {"id": "graphql-implicit-fields", "name": "GraphQL fields implicit exposure", "entry": "validate_graphql_model_fields_definition", "language": "python"}, {"id": "settings-variables", "name": "Settings: no straight assignment", "entry": "validate_settings_variables", "language": "python"}, {"id": "celery-tasks-return-types", "name": "Check celery tasks return types", "description": "Check return type for app.task decorated functions", "entry": "validate_celery_tasks_return_types", "language": "python"}, {"id": "check-gitleaks", "name": "Check gitleaks secrets", "description": "Runs `gitleaks`, requires https://github.com/zricethezav/gitleaks", "entry": "scripts/check-gitleaks.sh", "language": "script"}]
[{"id": "saxon-xsl-compile", "name": "saxon-xsl-compile", "description": "", "entry": "saxon-xsl-compile", "language": "node", "types": ["xsl"], "args": [], "require_serial": false, "minimum_pre_commit_version": "0"}]
[{"id": "autoversion", "name": "Update galaxy.yml version", "description": "This hook updates galaxy.yml to have the assumed correct version", "entry": "collection_prep_version", "language": "python", "files": "plugins/", "types": ["python"], "pass_filenames": false, "args": ["-p", "."]}, {"id": "update-docs", "name": "Update documentation", "description": "This hook runs the collection_prep_add_docs script", "entry": "collection_prep_add_docs", "language": "python", "files": "plugins/", "types": ["python"], "pass_filenames": false, "args": ["-p", "."]}]
[{"id": "committed", "name": "committed", "description": "Nitpicking commit history since beabf39", "language": "python", "entry": "committed", "args": ["--fixup", "--wip", "--commit-file"], "stages": ["commit-msg"]}, {"id": "committed-src", "name": "committed", "description": "Nitpicking commit history since beabf39", "language": "rust", "entry": "committed", "args": ["--fixup", "--wip", "--commit-file"], "stages": ["commit-msg"]}]
[{"id": "save-commit-hash", "name": "save commit hash", "description": "save commit hash and other stats", "language": "script", "entry": "./save-commit-hash.sh"}]
[{"id": "tsc-check", "name": "tsc-check", "entry": "tsc", "language": "node", "files": "\\.(ts|tsx)$", "args": ["--noEmit"], "additional_dependencies": ["typescript@^4.0.0"], "minimum_pre_commit_version": "0.12.0"}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "modules/precommit-hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "modules/precommit-hooks/shellcheck.sh", "language": "script"}, {"id": "gofmt", "name": "gofmt", "description": "Gofmt formats Go programs.", "entry": "modules/precommit-hooks/gofmt.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golint", "name": "golint", "description": "Golint is a linter for Go source code.", "entry": "modules/precommit-hooks/golint.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*"}]
[{"id": "bazel-jsonnetfmt", "name": "jsonnetfmt", "description": "Run jsonnetfmt", "entry": "bazel run --run_under='cd $BUILD_WORKING_DIRECTORY &&' @jsonnet//cmd:jsonnetfmt -- -i", "language": "system", "minimum_pre_commit_version": "2.13.0", "require_serial": true, "types": ["jsonnet"]}, {"id": "jsonnetfmt", "name": "jsonnetfmt", "description": "Run jsonnetfmt", "entry": "jsonnetfmt -i", "language": "system", "minimum_pre_commit_version": "2.13.0", "types": ["jsonnet"]}]
[{"id": "web-compile", "name": "Compile Web Assets", "description": "This hook compiles SCSS to CSS and minifies JS.", "entry": "web-compile", "language": "python", "language_version": "python3", "require_serial": true, "pass_filenames": false, "types": ["text"]}]
[{"id": "git-crypt-check", "name": "Check git-crypt setup", "description": "This hook checks correct use of git-crypt", "entry": "pre-commit-hooks/git-crypt-check", "language": "script", "types": ["yaml"]}]
[{"id": "echo-entrypoint", "name": "echo (via --entrypoint)", "language": "docker_image", "entry": "--entrypoint echo cogniteev/echo"}, {"id": "echo-cmd", "name": "echo (via cmd)", "language": "docker_image", "entry": "cogniteev/echo echo"}]
[{"id": "stale-version", "name": "stale versions", "description": "Ensure that a version has been bumped if required", "entry": "stale_version", "language": "python", "require_serial": true, "pass_filenames": false, "files": "", "types": ["text"]}]
[{"id": "detect-wallet-private-key", "name": "Detect Wallet Private Keys", "description": "This hook catches wallet private keys", "entry": "detect-wallet-private-key", "types": ["text"], "language": "python"}]
[{"id": "cmake-format", "name": "cmake-format", "description": "cmake-format can format your listfiles nicely so that they don't look like crap.", "entry": "cmake-format", "args": ["--in-place"], "language": "python", "types": ["cmake"]}, {"id": "cmake-lint", "name": "cmake-lint", "description": "cmake-lint will check your listfiles for style violations, common mistakes, and anti-patterns.", "entry": "cmake-lint", "language": "python", "types": ["cmake"]}]
[{"id": "check-const-translations", "name": "Check const translation calls.", "description": "Check for non-const translation calls.", "entry": "check-const-translations", "language": "python", "types": ["python"]}]
[{"id": "check-forge-snapshot", "name": "check forge snapshot", "language": "system", "entry": "forge snapshot --check", "files": ".sol$", "pass_filenames": false}]
[{"id": "flake8-ruff", "name": "flake8-ruff", "description": "Wrapper for ruff that allows using flake8 configuration files", "entry": "flake8-ruff", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "commit-message-linter", "name": "commit-message-linter", "entry": "gitlint --config pre_commit_hooks/.gitlint", "description": "Linter for commit messages", "language": "python", "verbose": true, "additional_dependencies": ["gitlint==v0.12.0"]}, {"id": "hello-world", "name": "hello world", "entry": "pre_commit_hooks/hello_world.sh", "description": "Linter for commit messages", "language": "script"}, {"id": "my-gitlint", "name": "my gitlint", "entry": "my-gitlint --msg-filename", "language": "python", "stages": ["commit-msg"]}]
[{"id": "auto-commit-msg", "name": "auto-commit-msg", "description": "Automatically generates commit messages based on diffs", "entry": "auto-commit-msg", "language": "python", "require_serial": true, "additional_dependencies": ["openai==0.27.8"]}]
[{"id": "gitlab-ci-lint", "name": "Lint gitlab-ci config", "description": "Lint gitlab-ci config using gitlab api.", "entry": "gitlab-ci-lint", "language": "python", "language_version": "python3.11", "files": "^.*\\.gitlab-ci.yml$", "types": ["yaml"]}, {"id": "gitlab-ci-fmt", "name": "Format gitlab-ci config", "description": "Format gitlab-ci config by enforcing strict keyword ordering.", "entry": "gitlab-ci-fmt", "language": "python", "language_version": "python3.11", "files": "^.*\\.gitlab-ci.yml$", "types": ["yaml"]}, {"id": "gitlab-ci-shellcheck", "name": "Shellcheck gitlab-ci scripts", "description": "Shellcheck gitlab-ci scripts for errors.", "entry": "gitlab-ci-shellcheck", "language": "python", "language_version": "python3.11", "files": "^.*\\.gitlab-ci.yml$", "types": ["yaml"]}]
[{"id": "conventional-precommit-linter", "name": "Conventional Commit", "entry": "conventional-precommit-linter", "language": "python", "description": "Checks commit message for Conventional Commits formatting", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "lint-buildroot", "name": "lint-buildroot", "description": "Lint Buildroot packages with lint-buildroot tool.\nThis utility adds --br2-external option if required and runs\ncheck-package.\n", "language": "python", "types": ["text"], "entry": "lint-buildroot"}, {"id": "check-package", "name": "check-package", "description": "Lint Buildroot packages with check-package utility.", "language": "python", "types": ["text"], "entry": "check-package"}]
[{"id": "check-secrets", "name": "check-secrets", "description": "Checking any secrets present in repo or not", "entry": "check-secrets", "language": "python"}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo fmt", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-check", "name": "cargo check", "description": "Check the package for errors.", "entry": "cargo check", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "build", "name": "build", "description": "Build the package.", "entry": "cargo build", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "no-warnings", "name": "no-warnings", "description": "Build the package and error on warnings.", "entry": "cargo rustc -- -D warnings", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy", "name": "clippy", "description": "Lint rust source files.", "entry": "cargo clippy", "language": "system", "args": ["--", "-D", "warnings"], "types": ["rust"], "pass_filenames": false}]
[{"id": "ansible-vault-encrypted", "name": "Ansible Vault Encryption Check", "description": "Verify that .yml files with \"vault\" in their name are encrypted.", "entry": "pre_commit_hooks/ansible_vault_encrypted.sh", "language": "script", "files": "^.*vault.*\\.(yml|yaml)(\\.j2){0,1}$"}]
[{"id": "capitalize", "name": "Capitalize files", "description": "Capitalizes files", "entry": "capitalize", "language": "rust", "types": ["text"], "exclude": "^.pre-commit-config.yaml$"}]
[{"id": "foo", "name": "Foo", "entry": "foo", "language": "node", "files": "\\.js$"}]
[{"id": "linthell", "name": "linthell", "entry": "linthell pre-commit lint", "language": "python", "types": ["python"]}]
[{"id": "requirements_txt", "name": "requirements_txt", "entry": "main.py", "language": "python", "types": ["text"]}]
[{"id": "rstfmt", "name": "rstfmt", "description": "rstfmt: a formatter for reStructuredText", "entry": "rstfmt", "language": "python", "language_version": "python3", "types": ["rst"]}]
[{"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "entry": "hooks/terraform-validate.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true, "args": []}, {"id": "terraform-docs", "name": "terraform-docs", "description": "Generate terraform docs using the terraform-docs tool.\nThis hook requires expects a configuration to exist at the base of the repo.\nSee https://terraform-docs.io/user-guide/configuration/\nexample .terraform-docs.yml\n  formatter: \"markdown table\"\n  recursive:\n    enabled: true\n    path: modules\n", "entry": "quay.io/terraform-docs/terraform-docs:0.16.0", "language": "docker_image", "files": "(\\.terraform-docs.yml|README.md|\\.tf(vars)?)$", "pass_filenames": false, "args": ["."]}, {"id": "terraform-lock-fail", "name": "forbid .terraform.lock.hcl", "description": "For use with opensource terraform modules.", "entry": "do not commit .terraform.lock.hcl in this repository", "language": "fail", "files": "\\.terraform\\.lock\\.hcl$"}]
[{"id": "manage-airflow-dag-task-id", "name": "airflow dag and task consistency hook", "description": "airflow dag and task consistency hook", "entry": "manage-airflow-dag-task-id", "language": "python", "always_run": true, "pass_filenames": true, "types": ["file", "python"], "files": "(^|/)dag_.+\\.py"}, {"id": "add-clubhouse-ticket", "name": "add cluchouse ticket ref", "description": "Automatically append [chXXX] to the commit message", "entry": "add-clubhouse-ticket", "language": "python", "stages": ["prepare-commit-msg"], "always_run": true, "verbose": true}, {"id": "check-prose-data-blog-rmd-file-pattern", "name": "check prose-data-blog filename pattern", "description": "Check that the blog Rmd follow the pattern YYYY-MM-DD_ch0000_XXX.Rmd", "entry": "check-prose-data-blog-rmd-file-pattern", "language": "python", "always_run": true, "pass_filenames": true, "types": ["file"], "files": "(.*)content/blog/(.*)\\.Rmd"}, {"id": "check-prose-data-blog-commit-msg", "name": "check prose-data-blog commit message pattern", "description": "Check the pattern of commit message for prose-data-blog", "entry": "check-prose-data-blog-commit-msg", "language": "python", "stages": ["commit-msg"], "always_run": true, "verbose": true}, {"id": "check-commit-msg", "name": "check commit message pattern", "description": "Check the pattern of commit message", "entry": "check-commit-msg", "language": "python", "stages": ["commit-msg"], "always_run": true, "verbose": true}, {"id": "check-jupyter-notebook-cells-ran-in-a-row", "name": "check jupyter notebook to have been ran in a row.", "entry": "check-jupyter-notebook-cells-ran-in-a-row", "language": "python", "always_run": true, "minimum_pre_commit_version": "2.9.2", "pass_filenames": true, "types_or": ["python", "pyi", "jupyter"], "verbose": true}]
[{"id": "gitlab-ci-linter", "name": ".gitlab-ci.yml linter", "description": "Validates .gitlab-ci.yml file (pure-python version without dependencies)", "entry": "gitlab-ci-linter", "language": "python", "language_version": "python3", "pass_filenames": false, "files": ".gitlab-ci.yml"}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "copyright", "name": "copyright", "description": "", "entry": "copyright-check", "language": "python"}, {"id": "commit-message", "name": "check commit message", "description": "", "entry": "commit-message-check", "language": "python", "args": ["--multiline"], "stages": ["commit-msg"]}]
[{"id": "pyre-check", "name": "pyre-check", "entry": "pyre.sh", "types": ["text"], "exclude": ".yaml$|.yml$", "language": "script"}]
[{"id": "golang-hook", "name": "golang example hook", "entry": "golang-hello-world", "language": "golang", "files": ""}]
[{"id": "fmt", "name": "fmt", "description": "Format files with cargo fmt.", "entry": "cargo fmt", "language": "system", "types": ["rust"], "args": ["--"]}, {"id": "cargo-check", "name": "cargo check", "description": "Check the package for errors.", "entry": "cargo check", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy", "name": "clippy", "description": "Lint rust sources", "entry": "cargo clippy", "language": "system", "args": ["--", "-D", "warnings"], "types": ["rust"], "pass_filenames": false}, {"id": "rebuild-web", "name": "rebuild web", "description": "Rebuild web version", "entry": "./build_web.sh", "language": "system", "files": "\\.rs$", "pass_filenames": false}]
[{"id": "validate-python-file-name", "name": "validate python file name", "language": "script", "entry": "./scripts/validate_python_file_name"}]
[{"id": "setup-check", "name": "Use setup.py check", "description": "This hook runs setup.py check on pymodule repos", "entry": "setup-check", "language": "python", "types": ["text"]}]
[{"id": "gradle-ktlint", "name": "Format code with ktlint", "entry": "./gradlew ktlintFormat", "language": "system", "always_run": true, "require_serial": true, "pass_filenames": false, "stages": ["commit", "merge-commit"]}]
[{"id": "fix-smartquotes", "name": "Fix smartquote characters", "description": "Replace \"smartquote\" characters with regular quotes", "entry": "fix-smartquotes", "language": "python", "types": ["text"]}, {"id": "fix-ligatures", "name": "Fix ligature characters with NFKD normalization", "description": "Replace ligature characters with normalized individual characters", "entry": "fix-ligatures", "language": "python", "types": ["text"]}, {"id": "fix-spaces", "name": "Fix irregular space characters by normalizing to \"space\"", "description": "Replace non-breaking spaces and other characters with the standard space character", "entry": "fix-spaces", "language": "python", "types": ["text"]}, {"id": "forbid-bidi-controls", "name": "Forbid the use of unicode BiDi control characters", "description": "Check for lines of text which contain bidirectional text control characters", "entry": "forbid-bidi-controls", "language": "python", "types": ["text"]}, {"id": "macro-expand", "name": "Expand text macros", "description": "Perform simple macro replacements in text files", "entry": "macro-expand", "language": "python", "types": ["text"]}]
[{"id": "scala-fmt", "name": "scalafmt", "description": "Runs `scalafmt` and asserts no changes are needed.", "entry": "hooks/scala-fmt.sh", "language": "script", "files": "\\.scala$"}, {"id": "ktlint", "name": "ktlint", "description": "Runs `ktint --fix` and asserts no changes are needed.", "entry": "hooks/ktlint.sh", "language": "script", "files": "\\.kt$"}]
[{"id": "autopep8-wrapper", "name": "autopep8 wrapper (removed)", "description": "(removed) use pre-commit/mirrors-autopep8 instead.", "entry": "pre-commit-hooks-removed autopep8-wrapper autopep8 https://github.com/pre-commit/mirrors-autopep8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "check-added-large-files", "name": "Check for added large files", "description": "Prevent giant files from being committed", "entry": "check-added-large-files", "language": "python"}, {"id": "check-ast", "name": "Check python ast", "description": "Simply check whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "check BOM - deprecated: use fix-byte-order-marker", "description": "forbid files which have a UTF-8 byte-order marker", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "Check builtin type constructor use", "description": "Require literal syntax when initializing empty or zero Python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "Check for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "Check that executables have shebangs", "description": "Ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "Check JSON", "description": "This hook checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "pretty-format-json", "name": "Pretty format JSON", "description": "This hook sets a standard for formatting JSON files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "Check for merge conflicts", "description": "Check for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "Check for broken symlinks", "description": "Checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "Check Toml", "description": "This hook checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "Check vcs permalinks", "description": "Ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "Check Xml", "description": "This hook checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "Check Yaml", "description": "This hook checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "Debug Statements (Python)", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "destroyed-symlinks", "name": "Detect Destroyed Symlinks", "description": "Detects symlinks which are changed to regular files with a content of a path which that symlink was pointing to.", "entry": "destroyed-symlinks", "language": "python", "types": ["file"]}, {"id": "detect-aws-credentials", "name": "Detect AWS Credentials", "description": "Detects *your* aws credentials from the aws cli credentials file", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "Detect Private Key", "description": "Detects the presence of private keys", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "Fix End of Files", "description": "Ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "File Contents Sorter", "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-byte-order-marker", "name": "fix UTF-8 byte order marker", "description": "removes UTF-8 byte order marker", "entry": "fix-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "fix-encoding-pragma", "name": "Fix python encoding pragma", "language": "python", "entry": "fix-encoding-pragma", "description": "Add # -*- coding: utf-8 -*- to the top of python files", "types": ["python"]}, {"id": "flake8", "name": "Flake8 (removed)", "description": "(removed) use gitlab.com/pycqa/flake8 instead.", "entry": "pre-commit-hooks-removed flake8 flake8 https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "forbid-new-submodules", "name": "Forbid new submodules", "language": "python", "entry": "forbid-new-submodules", "description": "Prevent addition of new git submodules"}, {"id": "mixed-line-ending", "name": "Mixed line ending", "description": "Replaces or checks mixed line ending", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "Tests should end in _test.py", "description": "This verifies that test files are named correctly", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "Don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "pyflakes", "name": "Pyflakes (removed)", "description": "(removed) use gitlab.com/pycqa/flake8 instead.", "entry": "pre-commit-hooks-removed pyflakes flake8 https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "requirements-txt-fixer", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "Sort simple YAML files", "language": "python", "entry": "sort-simple-yaml", "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.", "files": "^$"}, {"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "cloudconformity-scanner", "name": "CloudConformity Template Scanner", "entry": "cloudconformity-scanner", "language": "python", "files": "\\.(json|yaml|yml|template)$"}]
[{"id": "commit-me", "name": "CommitMe - Conventional Commit message validation", "description": "Validates your commits agains the Conventional Commits specification", "entry": "pre-commit-me", "language": "node", "stages": ["commit-msg"]}]
[{"id": "thriftcheck", "name": "ThriftCheck", "description": "Lint Thrift IDL files", "entry": "cmd", "language": "golang", "types": ["thrift"]}]
[{"id": "notebooks-in-order", "name": "notebooks-in-order", "entry": "check_notebooks_in_order", "language": "python", "files": "\\.ipynb$", "additional_dependencies": ["nbformat"]}]
[{"id": "commitcanvas", "name": "commitcanvas", "entry": "check", "verbose": false, "language": "python", "pass_filenames": false, "stages": ["prepare-commit-msg"]}]
[{"id": "common-group", "name": "COMMON GROUP", "language": "script", "entry": "./run_hook_config common_grp", "verbose": true, "require_serial": true}, {"id": "json-group", "name": "JSON GROUP", "language": "script", "entry": "./run_hook_config json_grp", "verbose": true, "require_serial": true}, {"id": "yaml-group", "name": "YAML GROUP", "language": "script", "entry": "./run_hook_config yaml_grp", "verbose": true, "require_serial": true}, {"id": "markdown-group", "name": "MARKDOWN GROUP", "language": "script", "entry": "./run_hook_config markdown_grp", "verbose": true, "require_serial": true}, {"id": "python-group", "name": "PYTHON GROUP", "language": "script", "entry": "./run_hook_config python_grp", "verbose": true, "require_serial": true}]
[{"id": "php-style-check", "name": "php style check", "pass_filenames": true, "entry": "php-style-check", "language": "python"}]
[{"id": "cargo-fmt-conda", "name": "cargo-fmt-conda", "description": "Run 'cargo fmt' for formatting Rust sources", "entry": "cargo fmt --", "language": "conda", "require_serial": false, "types": ["rust"]}, {"id": "clippy-conda", "name": "clippy-conda", "description": "Run 'clippy' to lint Rust sources", "entry": "cargo clippy --all-targets --all-features --workspace -- -D warnings", "pass_filenames": false, "language": "conda", "require_serial": false, "types": ["rust"]}]
[{"id": "repo-review", "name": "repo-review", "description": "Check for configuration best practices", "entry": "repo-review", "language": "python", "types_or": ["text"], "minimum_pre_commit_version": "2.9.0"}]
[{"id": "unimport", "name": "unimport", "description": "A linter, formatter for finding and removing unused import statements", "entry": "unimport", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "bash_hook", "name": "Bash hook", "entry": "bin/hook.sh", "language": "script", "files": ""}]
[{"id": "flake8-docker-not-for-production", "name": "flake8 (via docker)", "description": "flake8, but provided by docker", "entry": "flake8", "language": "docker", "files": "\\.py$"}]
[{"id": "trino-acl-dsl-check", "name": "Trino ACL DSL Check", "description": "Verify that rules DSL yaml file is consistent with a corresponding rules.json file", "entry": "trino-acl-dsl-check", "language": "python", "require_serial": true, "types_or": ["yaml", "json"], "files": "(?x)^(.*/)?(\n  trino-acl-dsl\\.yaml|\n  rules\\.json\n)$\n"}]
[{"id": "bandit-conda", "name": "bandit-conda", "entry": "bandit", "language": "conda", "description": "Check for common security issues.", "types": ["python"]}]
[{"id": "convert-jinja2-into-html", "name": "convert jinja2 into html", "description": "Convert jinja2 template into html file", "entry": "convert-jinja2-into-html", "language": "python", "files": ".*\\.html\\.(tmpl|json)$"}]
[{"id": "oaf-tech-pre-commit-hook", "name": "OAF Source Control Standards", "description": "Pre-commit hook to validate ITD best practices and technical standards", "entry": "oaf-tech-pre-commit-hook", "language": "python", "args": ["--forced=False", "--verbose=True"]}]
[{"id": "coverage", "name": "coverage python", "description": "run coverage", "entry": "coverage run manage.py test core fronterapp_api;", "language": "python", "always_run": true, "pass_filenames": false}]
[{"id": "python-files", "name": "Python files", "entry": "bin/hook.sh", "language": "script", "types": ["python"]}]
[{"id": "python-files", "name": "Python files", "entry": "bin/hook.sh", "language": "script", "types": ["python"]}]
[{"id": "python3-hook", "name": "Python 3 Hook", "entry": "python3-hook", "language": "python", "language_version": "python3", "files": "\\.py$"}]
[{"id": "rstcheck", "name": "rstcheck", "entry": "rstcheck", "language": "python", "types": ["rst"], "args": [], "require_serial": false, "additional_dependencies": []}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}, {"id": "doc8", "name": "doc8", "description": "This hook runs doc8 for linting docs", "entry": "doc8", "language": "python", "files": "\\.rst$", "require_serial": true}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}, {"id": "doc8", "name": "doc8", "description": "This hook runs doc8 for linting docs", "entry": "doc8", "language": "python", "files": "\\.rst$", "require_serial": true}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}, {"id": "doc8", "name": "doc8", "description": "This hook runs doc8 for linting docs", "entry": "doc8", "language": "python", "files": "\\.rst$", "require_serial": true}]
[{"id": "foo", "name": "Foo", "entry": "foo", "language": "node", "files": "\\.js$"}]
[{"id": "golang-hook", "name": "golang example hook", "entry": "golang-hello-world", "language": "golang", "files": ""}]
[{"id": "bash_hook", "name": "Bash hook", "entry": "bin/hook.sh", "language": "script", "files": ""}]
[{"id": "bash_hook", "name": "Bash hook", "entry": "bin/hook.sh", "language": "script", "files": ""}]
[{"id": "bandit", "name": "bandit", "description": "Bandit is a tool for finding common security issues in Python code", "entry": "bandit", "language": "python", "language_version": "python3", "types": ["python"], "require_serial": true}]
[{"id": "terraform-docs-go", "name": "terraform-docs", "description": "Generate documentation for Terraform modules (via Go binary)", "language": "golang", "entry": "terraform-docs", "pass_filenames": false, "types": ["terraform"]}, {"id": "terraform-docs-system", "name": "terraform-docs", "description": "Generate documentation for Terraform modules (via locally-installed CLI)", "language": "system", "entry": "terraform-docs", "pass_filenames": false, "types": ["terraform"]}, {"id": "terraform-docs-docker", "name": "terraform-docs", "description": "Generate documentation for Terraform modules (via Docker build)", "language": "docker", "entry": "terraform-docs", "pass_filenames": false, "types": ["terraform"]}]
[{"id": "jscpd", "name": "Check for duplicated code", "entry": "jscpd", "args": ["--gitignore", "--exitCode", "'1'"], "language": "node", "types": ["text"]}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}]
[{"id": "secret-shield", "name": "Mapbox Secret Shield", "entry": "secret-shield --pre-commit", "language": "node", "pass_filenames": false}]
[{"id": "cycode", "name": "Cycode pre commit defender", "language": "python", "language_version": "python3", "entry": "cycode", "args": ["--no-progress-meter", "scan", "pre_commit"]}, {"id": "cycode-sca", "name": "Cycode SCA pre commit defender", "language": "python", "language_version": "python3", "entry": "cycode", "args": ["--no-progress-meter", "scan", "--scan-type", "sca", "pre_commit"]}]
[{"id": "robocop", "name": "robocop", "entry": "robocop", "files": ".*\\.(robot|resource)$", "language": "python", "description": "RobotFramework source code linter"}]
[{"id": "roxygenize", "name": "roxygenize", "description": "run `roxygen2::roxygenize()`", "entry": "Rscript inst/hooks/exported/roxygenize.R", "language": "r", "files": "^(R|man)/", "require_serial": true, "minimum_pre_commit_version": "2.13.0"}, {"id": "use-tidy-description", "name": "use-tidy-description", "description": "run `usethis::use_tidy_description()`", "entry": "Rscript inst/hooks/exported/use-tidy-description.R", "language": "r", "files": "^DESCRIPTION$", "minimum_pre_commit_version": "2.13.0"}, {"id": "style-files", "name": "style-files", "description": "style files with {styler}", "entry": "Rscript inst/hooks/exported/style-files.R", "language": "r", "files": "(\\.[rR]profile|\\.[rR]|\\.[rR]md|\\.[rR]nw|\\.[qQ]md)$", "exclude": "renv/activate\\.R", "minimum_pre_commit_version": "2.13.0"}, {"id": "no-browser-statement", "name": "no-browser-statement", "description": "check if a .R file contains a `browser()` statement", "entry": "Rscript inst/hooks/exported/no-browser-statement.R", "language": "r", "files": "\\.[rR]$", "minimum_pre_commit_version": "2.13.0"}, {"id": "no-print-statement", "name": "no-print-statement", "description": "check if a .R file contains a `print()` statement", "entry": "Rscript inst/hooks/exported/no-print-statement.R", "language": "r", "files": "\\.[rR]$", "minimum_pre_commit_version": "2.13.0"}, {"id": "no-debug-statement", "name": "no-debug-statement", "description": "check if a .R file contains a `debug()` or `debugonce()` statement", "entry": "Rscript inst/hooks/exported/no-debug-statement.R", "language": "r", "files": "\\.[rR]$", "minimum_pre_commit_version": "2.13.0"}, {"id": "parsable-R", "name": "parsable-R", "description": "check if a .R file is parsable", "entry": "Rscript inst/hooks/exported/parsable-R.R", "language": "r", "files": "\\.[rR](md)?$", "minimum_pre_commit_version": "2.13.0"}, {"id": "readme-rmd-rendered", "name": "readme-rmd-rendered", "description": "make sure README.Rmd hasn't been edited more recently than `README.md`", "entry": "Rscript inst/hooks/exported/readme-rmd-rendered.R", "language": "r", "files": "README\\.[Rr]?md$", "minimum_pre_commit_version": "2.13.0"}, {"id": "codemeta-description-updated", "name": "codemeta-description-updated", "description": "make sure `codemeta.json` is in sync with `DESCRIPTION`. It should be run after use-tidy-description", "entry": "Rscript inst/hooks/exported/codemeta-description-updated.R", "language": "r", "files": "^DESCRIPTION$", "minimum_pre_commit_version": "2.13.0"}, {"id": "spell-check", "name": "spell-check", "description": "perform a spell check with `spelling::spell_check_files()`", "entry": "Rscript inst/hooks/exported/spell-check.R", "language": "r", "exclude": "(?x)^( .*\\.[rR]| .*\\.feather| .*\\.jpeg| .*\\.pdf| .*\\.png| .*\\.py| .*\\.RData| .*\\.rds| .*\\.Rds| .*\\.Rproj| .*\\.sh| (.*/|)\\.gitignore| (.*/|)\\.pre-commit-.*| (.*/|)\\.Rbuildignore| (.*/|)\\.Renviron| (.*/|)\\.Rprofile| (.*/|)\\.travis\\.yml| (.*/|)appveyor\\.yml| (.*/|)NAMESPACE| (.*/|)renv/settings\\.dcf| (.*/|)renv\\.lock| (.*/|)WORDLIST| \\.github/workflows/.*| data/.*| )$\n", "require_serial": true, "minimum_pre_commit_version": "2.13.0"}, {"id": "deps-in-desc", "name": "deps-in-desc", "description": "Check if dependencies that can be parsed from code are in `DESCRIPTION`", "entry": "Rscript inst/hooks/exported/deps-in-desc.R", "language": "r", "files": "(\\.[rR]profile|\\.R|\\.Rmd|\\.Rnw|\\.r|\\.rmd|\\.rnw)$", "exclude": "renv/activate\\.R", "minimum_pre_commit_version": "2.13.0"}, {"id": "lintr", "name": "lintr", "description": "check if a `.R` file is lint free (using {lintr})", "entry": "Rscript inst/hooks/exported/lintr.R", "language": "r", "files": "(\\.[rR]profile|\\.R|\\.Rmd|\\.Rnw|\\.r|\\.rmd|\\.rnw)$", "exclude": "renv/activate\\.R", "minimum_pre_commit_version": "2.13.0"}, {"id": "pkgdown", "name": "pkgdown", "description": "check if your {pkgdown} config file has the correct entries for references and articles", "entry": "inst/hooks/exported/pkgdown.R", "language": "script", "minimum_pre_commit_version": "2.13.0", "files": "^man/|_pkgdown\\.yml"}]
[{"id": "yamlfmt", "name": "Format YAML files", "description": "Format YAML files", "entry": "yamlfmt", "language": "python", "types": ["yaml"]}]
[{"id": "pymarkdown", "name": "PyMarkdown", "description": "PyMarkdown - GitHub Flavored Markdown and CommonMark Compliant Linter", "language": "python", "language_version": "python3", "entry": "pymarkdown", "args": ["scan"], "types": ["markdown"]}]
[{"id": "import-linter", "name": "import-linter", "description": "Import Linter allows you to define and enforce rules for the internal and external imports within your Python project.", "entry": "lint-imports", "language": "python", "types": ["python"], "pass_filenames": false}]
[{"id": "dart-import-sorter", "name": "Dart Import Sorter", "entry": "dart pub run import_sorter:main", "language": "system", "types": ["dart"], "require_serial": true, "description": "Dart package to automatically organize your dart imports. Any dart project supported!    \nWill sort imports alphabetically and then group them in the following order:\n1. Dart imports\n2. Flutter imports\n3. Package imports\n4. Project imports\n"}, {"id": "flutter-import-sorter", "name": "Flutter Import Sorter", "entry": "flutter pub run import_sorter:main", "language": "system", "types": ["dart"], "require_serial": true, "description": "Dart package to automatically organize your dart imports. Any dart project supported!    \nWill sort imports alphabetically and then group them in the following order:\n1. Dart imports\n2. Flutter imports\n3. Package imports\n4. Project imports\n"}]
[{"id": "nb-clean", "name": "nb-clean", "entry": "nb-clean clean", "language": "python", "types_or": ["jupyter"], "minimum_pre_commit_version": "2.9.2"}]
[{"id": "ruff-conda", "name": "ruff-conda", "description": "Run 'ruff' for extremely fast Python linting", "entry": "ruff --fix --exit-non-zero-on-fix", "language": "conda", "require_serial": false, "types": ["python"]}]
[{"id": "jshint", "name": "jshint", "description": "", "entry": "jshint", "language": "node", "types": ["javascript"], "args": [], "require_serial": false, "additional_dependencies": ["jshint@2.13.6"], "minimum_pre_commit_version": "0"}]
[{"id": "aws-ia-meta-hook", "name": "Meta hook wrapper", "require_serial": true, "entry": "hooks/hook-wrapper.sh", "language": "script", "always_run": true, "verbose": true}]
[{"id": "buildifier", "name": "Buildifier", "entry": "run-buildifier.sh", "language": "script", "files": "(?x)^(\n  BUILD|\n  WORKSPACE|\n  .*\\.(bzl|sky|star)|\n  (BUILD|WORKSPACE)\\..*\\.(bazel|oss)\n)$\n", "description": "Runs Buildifier on Bazel build and workspace files.", "minimum_pre_commit_version": "1"}]
[{"id": "tf_lint", "name": "tf_lint", "description": "Linter for terraform", "entry": "bin/tf_lint.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$"}]
[{"id": "cblack", "name": "cblack", "description": "Black: The uncompromising Python code formatter - 2 space indent fork", "entry": "cblack --check", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "commitlint", "name": "commitlint", "description": "run commitlint on the commit message", "entry": "commitlint --edit", "language": "node", "pass_filenames": false, "always_run": true}]
[{"id": "org-to-markdown", "name": "org-to-markdown", "entry": "hooks/org-to-markdown.sh", "files": "\\.org$", "language": "script", "description": "Creates a markdown file from an org file."}, {"id": "org-to-pdf", "name": "org-to-pdf", "entry": "hooks/org-to-pdf.sh", "files": "\\.org$", "language": "script", "description": "Creates a pdf file from an org file."}, {"id": "arbitrary-command", "name": "arbitrary-command", "entry": "hooks/arbitrary-command.sh", "pass_filenames": false, "language": "script", "description": "Run an arbitrary shell command."}, {"id": "argo-lint", "name": "argo-lint", "entry": "hooks/argo-lint.sh", "language": "script", "types": ["yaml"], "description": "Validate manifest files for Argo Workflows"}, {"id": "nuclei-validate", "name": "nuclei-validate", "entry": "hooks/nuclei-validate.sh", "language": "script", "types": ["yaml"], "description": "Validate Nuclei templates"}]
[{"id": "imageoptim", "name": "imageoptim", "entry": "bash -c 'echo \"$@\" | xargs -n1 | imageOptim --quit --no-color  --image-alpha' --", "language": "node", "files": "\\.(png|jpeg|jpg|gif)$", "description": "An hook to run image-optimin, jpegmin to optimise images", "args": [], "minimum_pre_commit_version": "0.7.0"}]
[{"id": "esss_fix_format", "description": "Simple code formatter and pre-commit checker used internally by ESSS", "name": "ESSS Fix Format", "entry": "fix-format --commit", "language": "python", "files": "\\.(py|pyw)$"}]
[{"id": "change", "name": "change", "description": "Automated changelog updater.", "language": "script", "entry": "change", "stages": ["push"], "always_run": true, "verbose": true, "pass_filenames": false, "require_serial": true}]
[{"id": "unasyncd", "name": "unasyncd", "entry": "unasyncd", "language": "python", "types": ["file", "python"], "require_serial": true, "pass_filenames": false}]
[{"id": "yamlfmt", "name": "Format YAML files", "description": "Format YAML files", "entry": "yamlfmt", "language": "python", "language_version": "python3", "types": ["yaml"]}]
[{"id": "blue", "name": "blue", "description": "Blue: The somewhat less uncompromising Python code formatter", "entry": "blue", "language": "python", "language_version": "python3", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "prettier", "name": "prettier", "entry": "prettier --write", "language": "node", "files": "\\.(css|less|scss|graphql|gql|html|js|jsx|json|md|markdown|mdown|mkdn|mdx|ts|tsx|vue|yaml|yml)$"}]
[{"id": "bazel-unit-test", "name": "Bazel Unit Test", "entry": "bazel-tests.sh", "files": "\\.bazel$", "language": "script", "description": "Runs Bazel unit tests"}, {"id": "check-commit-email", "name": "Check Commit Email", "entry": "check-commit-email.sh", "language": "script", "description": "Check that the commit email matches the company email"}]
[{"id": "commit_msg_prefix", "name": "Add task prefix to commit message", "description": "Add current branch name as prefix to COMMITMSG.", "entry": "commit_msg_prefix", "language": "python", "always_run": true, "stages": ["prepare-commit-msg"]}, {"id": "linked_todos", "name": "Check for linked todos", "description": "Prevent committing with todos linked to the current branch.", "entry": "linked_todos", "language": "python", "pass_filenames": false, "always_run": true, "stages": ["commit"]}]
[{"id": "docstrfmt", "name": "docstrfmt", "description": "docstrfmt: reStructuredText Formatter", "entry": "docstrfmt", "language": "python", "language_version": "python3", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "rst"]}]
[{"id": "go-fmt-import", "name": "go import/fmt", "entry": "run-go-fmt-import.sh", "files": "\\.go$", "language": "script", "description": "Runs 'goimport,gofmt', requires golang"}, {"id": "go-vet", "name": "go vet", "entry": "run-go-vet.sh", "files": "\\.go$", "language": "script", "description": "Run 'go vet', requires golang"}, {"id": "go-lint", "name": "golint", "entry": "run-go-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs 'go lint', requires golang"}, {"id": "go-unit-tests", "name": "go unit test", "entry": "run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs 'go test', requires golang"}, {"id": "gofumpt", "name": "gofumpt", "entry": "run-go-fumpt.sh", "files": "\\.go$", "language": "script", "description": "Runs 'gofumpt', requires github.com/mvdan/gofumpt"}, {"id": "go-err-check", "name": "go errcheck", "entry": "run-go-err-check.sh", "files": "\\.go$", "language": "script", "description": "Runs 'errcheck', requires github.com/kisielk/errcheck"}, {"id": "go-static-check", "name": "go staticcheck", "entry": "run-go-static-check.sh", "files": "\\.go$", "language": "script", "description": "Runs 'staticcheck', install https://staticcheck.io.docs/"}, {"id": "golangci-lint", "name": "go golangci-lint", "entry": "run-golangci-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs 'golangci-lint', install https://github.com/golangci/golangci-lint"}, {"id": "commitmsg-check", "name": "commitmsg-check", "entry": "run-commitmsg-check.sh", "language": "script", "description": "Validate recently git commit message against commit format provided by git karma http://karma-runner.github.io/6.3/dev/git-commit-msg.html"}]
[{"id": "yamale-validate", "name": "Yamale validation", "description": "Run yamale on a set of files.", "entry": "yamale-validate", "language": "python", "files": "(\\.yaml|\\.yml)$"}]
[{"id": "check-code-style", "name": "Check code style", "description": "This hook checks code style", "entry": "checkstyle.sh", "language": "script", "files": "\\.java$"}]
[{"id": "schema-api-ec-changed", "name": "check if a schema for the actual API EC is generated", "description": "Enforce that API EC schemas are up-to-date", "entry": "python pbx/pbxapps/docs/management/pre_commit_scripts/schema_api_ec_changed.py", "language": "system"}]
[{"id": "prepare-message", "name": "prepare commit message", "description": "Add prefix from feature branch to commit message.", "language": "python", "entry": "prepare-message", "stages": ["prepare-commit-msg"]}, {"id": "format-message", "name": "check message formatting", "description": "Ensure commit message has correct formatting between header and description.", "language": "python", "entry": "format-message", "stages": ["commit-msg"]}]
[{"id": "htmlhint", "name": "NodeJS HTML syntax linter (htmlhint)", "entry": "htmlhint", "language": "node", "files": ".*\\.(html|hbs)$", "additional_dependencies": ["htmlhint"]}, {"id": "htmllint", "name": "NodeJS HTML syntax linter (htmllint)", "entry": "htmllint", "language": "node", "files": ".*\\.(html|hbs)$", "additional_dependencies": ["htmllint-cli"]}, {"id": "dockerfile_lint", "name": "Dockerfile linter", "entry": "dockerfile_lint", "args": ["--dockerfile"], "language": "node", "additional_dependencies": ["dockerfile_lint"], "files": "Dockerfile.*"}, {"id": "markdown-toc", "name": "Insert a table of contents in Markdown files, like a README.md", "entry": "markdown-toc", "args": ["-i"], "language": "node", "additional_dependencies": ["github:Lucas-C/markdown-toc#handle-multiple-input-files"], "files": ".*\\.md$"}]
[{"id": "flake8-file", "name": "flake8 per file", "description": "This hook runs flake8 one file at a time.", "entry": "flake8-file", "language": "python", "types": ["python"], "require_serial": true}, {"id": "isort-file", "name": "isort per file", "description": "This hook runs isort one file at a time.", "entry": "isort-file", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "org-hook", "name": "org-wide hooks", "language": "script", "entry": "pre-commit/run-org-hooks", "verbose": true}, {"id": "package-app-dependencies", "name": "package app dependencies", "files": "^requirements.txt$", "language": "script", "entry": "pre-commit/package_app_dependencies", "verbose": true}]
[{"id": "elmformat", "name": "elmformat", "entry": "elm-format", "language": "node", "files": "\\.(elm)$", "args": [], "minimum_pre_commit_version": "0.6.7", "additional_dependencies": ["elm-format@0.8.2"]}]
[{"id": "update-requirements-from-pyproject", "name": "Update requirements.txt from Poetry pyproject.toml file", "entry": "bin/update-requirements.sh", "language": "script"}]
[{"id": "prefix-jira-hook", "name": "prefix-jira-hook", "description": "Prefixes the Jira ticket number in commits", "entry": "pre-commit-hooks/prefix-jira-hook.sh", "language": "script", "stages": ["commit-msg"]}]
[{"id": "circleci-orb-validate", "name": "Validate CircleCI Orb", "entry": "src/validate.sh", "language": "script", "verbose": false, "pass_filenames": false, "files": "^src/.*.yml$", "args": []}]
[{"id": "markdown-toc-cli", "name": "markdown-toc-cli", "description": "Markdown table-of-contents generator", "entry": "markdown-toc-cli", "language": "python", "language_version": "python3", "types": ["markdown"], "minimum_pre_commit_version": "1.0.0"}]
[{"id": "removestar", "name": "removestar", "description": "Run 'removestar' to remove wildcard Python imports", "entry": "removestar", "language": "python", "types": ["python"], "args": [], "require_serial": true, "additional_dependencies": []}]
[{"id": "check-for-updates", "name": "Check for Updates", "description": "Check for updated versions by comparing PKGBUILD with release-monitoring.org", "entry": "check-updates.py", "language": "python", "files": ".pkgbuild-check"}]
[{"id": "zipper", "name": "wdlzipper", "description": "This builds a zip archive for import purposes", "entry": "zipper.sh", "language": "script", "always_run": true, "verbose": true}]
[{"id": "cue-fmt", "name": "cue fmt", "entry": "run-cue-fmt.sh", "files": "\\.cue$", "language": "script", "description": "Runs `cue fmt`, requires cue"}]
[{"id": "bump-cookbook-version", "name": "Bump cookbook version", "description": "Bump cookbook version in metadata.rb file", "entry": "src/bump_cookbook_version.sh", "language": "script", "require_serial": true, "pass_filenames": false}]
[{"id": "google-java-format", "name": "Google java code style formatter", "description": "Format java codes following Google Java Style Guide.", "language": "script", "files": "\\.java$", "entry": "./hooks/format_java.sh"}]
[{"id": "check-app-readme", "always_run": true, "description": "Check date and any other issues with App README.md file before commit.", "entry": "check-app-readme", "files": "README.md", "language": "python", "name": "Check App README.md", "pass_filenames": false}]
[{"id": "uptodate", "name": "uptodate", "description": "Keeps your git branch up to date.", "entry": "uptodate.sh", "language": "script", "always_run": true, "pass_filenames": false}]
[{"id": "makefile-doc", "name": "Makefile documentation", "description": "Using [make help], inserts available make targets into README.md.", "entry": "makefile-doc.sh", "language": "script", "files": "Makefile"}]
[{"id": "unkey", "name": "unkey", "description": "Automatically remove extra calls to keys().", "entry": "unkey", "language": "python", "types": ["python"]}]
[{"id": "poetry-requirements-sync", "name": "Poetry Requirements Sync", "description": "pre-commit hook for removing pkg-resources from requirements.txt", "entry": "sync-requirements", "language": "python", "require_serial": true, "files": "(?x)(\n  ^(.*/)?pyproject\\.toml$|\n  ^(.*/)?poetry\\.lock$|\n  ^(.+/)?requirements(-dev)?\\.txt$\n)\n"}]
[{"id": "powershell-scriptanalyzer-docker", "name": "PSScriptAnalyzer (docker)", "description": "PSScriptAnalyzer, provided by docker", "entry": "pwsh -c Import-Module /root/.local/share/powershell/Modules/PSScriptAnalyzer; Invoke-ScriptAnalyzer -Fix -Path", "language": "docker", "files": "\\.ps1$"}]
[{"id": "check-pip-compile", "name": "Check pip-compile", "description": "Check if pip-compile needs to be run", "entry": "check_pip_compile", "language": "python", "always_run": true, "pass_filenames": false, "args": ["."]}]
[{"id": "yor", "name": "yor", "language": "script", "entry": "hooks/yor-it.sh", "exclude": "\\.terraform\\/.*$", "always_run": true, "pass_filenames": false}]
[{"id": "flake8", "name": "flake8", "description": "", "entry": "flake8", "language": "python", "types": ["python"], "args": [], "require_serial": false, "additional_dependencies": [], "minimum_pre_commit_version": "0"}]
[{"id": "ghissue-message", "name": "ghissue-message", "description": "Enforce match between commit message and github issue. If the issue does not exist it will be created.", "entry": "ghissue-message", "language": "rust", "stages": ["commit-msg"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "3.2.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "ceader", "name": "ceader", "description": "Tool for automatically adding a header to files in the form of a comment", "entry": "ceader", "language": "python", "args": ["--mode", "--header-path", "--extensions", "--skip-hidden", "--debug", "--prefer-multiline-comment", "--files"], "require_serial": true}]
[{"id": "go-golangci-lint", "name": "Run golangci-lint", "description": "Static analysis for Go code", "entry": "golangci-lint run", "types": ["go"], "language": "golang", "pass_filenames": false}, {"id": "go-test", "name": "Go tests", "entry": "run-go-test.sh", "types": ["go"], "language": "script", "pass_filenames": false, "minimum_pre_commit_version": "0.15.0", "description": "Runs `go test ./...` at the repo root"}, {"id": "go-goimports", "name": "Check Go imports", "entry": "run-go-imports.sh", "types": ["go"], "language": "script", "pass_filenames": true, "minimum_pre_commit_version": "0.15.0", "description": "Runs `goimports` on changed files", "require_serial": true, "exclude": "vendor/"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "run-go-mod-tidy.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "run-go-mod-vendor.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod vendor`, requires golang"}]
[{"id": "pdoc", "name": "pdoc", "description": "pdoc: Auto-generate API documentation for Python projects", "entry": "pdoc", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "validate-legend-chmaps", "name": "check LEGEND channel maps format", "entry": "validate-legend-chmaps", "language": "python", "types": ["json"]}, {"id": "validate-legend-detdb", "name": "check LEGEND detector database format", "entry": "validate-legend-detdb", "language": "python", "types": ["json"]}]
[{"id": "validate_app_etc_config", "name": "Validate app/etc/config.php", "description": "This checks the app/etc/config.php to prevent commiting Test modules", "entry": "bin/validate_app_etc_config.sh", "language": "script", "files": "config\\.php"}]
[{"description": "Checks for a regex on the code", "entry": "regex", "id": "regex", "language": "python", "name": "Check for regex", "types": ["text"]}]
[{"id": "lint-matlab", "name": "Lint MATLAB files", "description": "This hook validates MATLAB files using a MATLAB instance.", "entry": "lint-matlab", "language": "python", "files": "\\.m$", "types": ["text"], "require_serial": false}]
[{"id": "ktlint", "name": "ktlint", "description": "Runs ktlint", "entry": "./gradlew ktlintFormat", "pass_filenames": false, "language": "system"}, {"id": "unit_tests", "name": "unittests", "description": "Runs unit tests", "entry": "./gradlew test", "pass_filenames": false, "language": "system"}, {"id": "build", "name": "build", "description": "Building App", "entry": "./gradlew assembleDebug", "pass_filenames": false, "language": "system"}]
[{"id": "riff", "name": "riff", "description": "run ruff, but only fail on code lines modified (based on git diff)", "entry": "riff", "pass_filenames": true, "language": "python"}]
[{"id": "latexindent", "name": "latexindent", "description": "Mirror of Latexindent.pl by Chris Hughes for pre-commit.", "language": "python", "entry": "pylatexindent", "types": ["tex"], "require_serial": true}, {"id": "chktex", "name": "ChkTeX", "description": "Mirror of ChkTeX semantic checker for pre-commit.", "language": "system", "entry": "chktex --quiet --verbosity=0", "types": ["tex"], "require_serial": true}]
[{"id": "circleci-validate", "name": "CircleCI config validation", "description": "Test if the CircleCI config is well formed.", "entry": "circleci-validate", "language": "python", "files": "^.circleci/*.*ml$"}]
[{"id": "checkstyle", "name": "checkstyle", "description": "Runs checkstyle to check Java code style", "language": "coursier", "entry": "checkstyle", "files": "\\.(java)$", "pass_filenames": true}, {"id": "scalafmt", "name": "scalafmt", "description": "Runs scalafmt to check Scala code style", "language": "coursier", "entry": "scalafmt", "files": "\\.(scala|sc|sbt)$", "pass_filenames": false}]
[{"id": "csslint", "name": "csslint", "entry": "csslint", "language": "node", "files": "\\.css$", "args": [], "additional_dependencies": ["csslint@1.0.5"], "minimum_pre_commit_version": "0.7.0"}]
[{"id": "check-bash-syntax", "name": "check-bash-syntax", "description": "Check Shell scripts syntax corectness, requires bash", "language": "system", "entry": "bash -n", "files": "\\.sh$", "exclude": "^target/"}, {"id": "check-abstract-classes-and-trait", "name": "check-abstract-classes-and-trait", "description": "Ensure neither abstract classes nor traits are used", "language": "pygrep", "entry": "^(abstract|trait) ", "files": "^(src|vars)/.*\\.groovy$", "exclude": "^target/"}, {"id": "check-jsonslurper-class", "name": "check-jsonslurper-class", "description": "Ensure JsonSlurperClassic is used instead of non-serializable JsonSlurper", "language": "pygrep", "entry": "JsonSlurper[^C]", "files": "\\.groovy$", "exclude": "^target/"}, {"id": "check-jenkins-pipelines", "name": "check-jenkins-pipelines", "description": "Check the syntax of the Jenkinsfiles, set JENKINS_URL env variable to use another Jenkins instance.", "files": "^(.ci/(.*\\.groovy|Jenkinsfile)|Jenkinsfile)$", "entry": ".ci/scripts/validate.sh", "language": "script", "verbose": true, "exclude": "^target/"}, {"id": "check-unicode-non-breaking-spaces", "name": "check-unicode-non-breaking-spaces", "description": "Detect unicode non-breaking space character U+00A0 aka M-BM-", "language": "system", "entry": "perl -ne 'print if $m = /\\xc2\\xa0/; $t ||= $m; END{{exit $t}}'", "exclude": "^target/"}, {"id": "remove-unicode-non-breaking-spaces", "name": "remove-unicode-non-breaking-spaces", "description": "Remove unicode non-breaking space character U+00A0 aka M-BM-", "language": "system", "entry": "perl -pi* -e 's/\\xc2\\xa0/ /g && ($t = 1) && print STDERR $_; END{{exit $t}}'", "exclude": "^target/"}, {"id": "check-en-dashes", "name": "check-en-dashes", "description": "Detect the EXTREMELY confusing unicode character U+2013", "language": "system", "entry": "perl -ne 'print if $m = /\\xe2\\x80\\x93/; $t ||= $m; END{{exit $t}}'", "exclude": "^target/"}, {"id": "remove-en-dashes", "name": "remove-en-dashes", "description": "Remove the EXTREMELY confusing unicode character U+2013", "language": "system", "entry": "perl -pi* -e 's/\\xe2\\x80\\x93/-/g && ($t = 1) && print STDERR $_; END{{exit $t}}'", "exclude": "^target/"}, {"id": "check-jjbb", "name": "check-jjbb", "description": "Check JJBB files", "files": "^.ci/jobs", "entry": ".ci/scripts/validate-jjbb.sh", "language": "script", "verbose": true}, {"id": "check-gherkin-lint", "name": "check-gherkin-lint", "description": "Check Gherkin feature syntax corectness, requires docker.", "language": "script", "entry": ".ci/scripts/gherkin-lint.sh", "files": "\\.feature$"}]
[{"id": "say-hello", "name": "say hello", "description": "a template to show how to implement a pre-commit hook", "language": "python", "entry": "say-hello", "require_serial": true, "pass_filenames": false, "args": ["OpenMMLab"]}, {"id": "check-algo-readme", "name": "check algorithm readme", "description": "check whether the abstract and icon exist in the algorithm readme", "language": "python", "entry": "check-algo-readme", "require_serial": true, "pass_filenames": false}, {"id": "check-copyright", "name": "check copyright", "description": "check whether the code contains copyright", "language": "python", "entry": "check-copyright", "require_serial": true, "pass_filenames": false}, {"id": "check-ecosystem-validity", "name": "check ecosystem validity", "description": "check validity of yaml", "language": "python", "entry": "check-ecosystem-validity", "types": ["yaml"], "require_serial": false, "pass_filenames": false, "additional_dependencies": ["cerberus"]}, {"id": "remove-improper-eol-in-cn-docs", "name": "remove improper eol in cn docs", "description": "Remove the end_of_line characters that split natural paragraphs in Chinese docs", "entry": "remove-eol-characters", "language": "python", "files": ".*\\.md$", "pass_filenames": true, "require_serial": true}]
[{"id": "graphql-codegen-hook", "name": "graphql codegenerator", "description": "Runs graphql-codegen generating graphql types.", "entry": "graphql-codegen-hook", "language": "node", "types": ["file", "javascript"], "files": "\\.(js|jsx|graphql|ts|tsx)$", "minimum_pre_commit_version": "0.5.0"}]
[{"id": "pii_secret_filename", "name": "Check filenames for potential secrets", "description": "Check filenames for potential secrets", "language": "python", "entry": "pii-secret-filename"}, {"id": "pii_secret_file_content", "name": "Check file content for potential secrets", "description": "Check file content for potential secrets", "language": "python", "entry": "pii-secret-file-content"}, {"id": "hooks_version_check", "name": "Check repository version", "description": "Check repository version", "language": "python", "entry": "pii-secret-file-version-check"}, {"id": "pii_secret_file_content_ner", "name": "PII Named Entity Recognition", "description": "Check for PII content with Named Entity Recognition", "language": "python", "entry": "pii-secret-file-content-ner"}]
[{"id": "check-pre-commit-ci-config", "name": "check pre-commit.ci config", "description": "validate pre-commit.ci configuration", "entry": "check-pre-commit-ci-config", "language": "python", "files": "^\\.pre-commit-config.yaml$"}]
[{"id": "buildifier", "name": "Bazel Buildifier", "files": "BUILD.bazel|BUILD|WORKSPACE", "description": "Format bazel BUILD files.", "language": "system", "entry": "buildifier -r ./", "pass_filenames": false}]
[{"id": "copy-files", "name": "copy files", "description": "Copy and rename files based on regex", "entry": "copy-files", "language": "python"}, {"id": "validate-branch-name", "name": "Validate branch name", "entry": "validate-branch-name", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "render-jinja-template", "name": "Generate file with jinja templates", "entry": "render-jinja-template", "language": "python", "pass_filenames": false, "always_run": true, "stages": ["manual"]}, {"id": "fetch-github-content", "name": "Fetch github files", "entry": "fetch-github-content", "language": "python", "pass_filenames": false, "always_run": true, "stages": ["manual"]}]
[{"id": "format-kotlin", "name": "Ktlint Check", "description": "Runs ktlint over Kotlin source files", "entry": "hooks/ktlint.sh", "language": "script", "types": ["kotlin"], "pass_filenames": false}]
[{"id": "say-hello", "name": "say hello", "description": "a template to show how to implement a pre-commit hook", "language": "python", "entry": "say-hello", "require_serial": true, "pass_filenames": false, "args": ["SI-Analytics"]}, {"id": "check-copyright", "name": "check copyright", "description": "check whether the code contains copyright", "language": "python", "entry": "check-copyright", "require_serial": true, "pass_filenames": false}]
[{"id": "rm-unneeded-f-str", "name": "Remove unneeded f-strings", "description": "Find and replace unneeded f-strings in your code.", "entry": "rm-unneeded-f-str", "language": "python", "types": ["python"]}]
[{"id": "xmllint-format", "name": "xmllint format", "description": "Format XML files using `xmllint --format`", "entry": "format-with-xmllint", "language": "script", "types_or": ["xml"]}, {"id": "lxml-format", "name": "lxml format", "description": "Format XML files using Python and lxml", "entry": "format-with-lxml", "language": "python", "types_or": ["xml"]}]
[{"id": "enforce-named-loggers", "name": "Enforce Named Loggers", "description": "This hook ensures that loggers always have names, which is important for Datadog", "entry": "enforce-named-loggers", "language": "python", "types": ["python"]}]
[{"id": "resharper", "name": "resharper", "entry": "./pre-commit.sh", "language": "script"}]
[{"id": "clang-format", "name": "clang-format", "description": "clang-format your C, C++, or C# code", "entry": "clang-format", "args": ["-style=file", "-i"], "language": "python", "types_or": ["c++", "c", "c#", "cuda"], "minimum_pre_commit_version": "2.9.2"}]
[{"id": "byexample", "name": "Run code snippets to validate them", "description": "Execute code snippets in your documentation and validate them as regression tests. Your docs will never be outdated again. See https://byexamples.github.io/byexample/recipes/pre-commit", "entry": "byexample", "language": "python", "require_serial": true, "pass_filenames": true}]
[{"id": "circle-ci-validator", "name": "CircleCI Config Validation", "description": "Validate CircleCI config without having to install the cli globally", "entry": "env CIRCLECI_CLI_SKIP_UPDATE_CHECK=true circleci config validate -c", "language": "python", "files": "\\.circleci/config.yml"}]
[{"id": "downstream", "name": "Downstream", "description": "Alerts the user to downstream dependencies of the files updated", "entry": "downstream", "language": "swift", "verbose": true}, {"id": "downstream-docker", "name": "DownstreamDocker", "description": "Alerts the user to downstream dependencies of the files updated", "entry": "downstream", "language": "docker", "verbose": true}, {"id": "downstream-docker-image", "name": "DownstreamDockerImage", "description": "Alerts the user to downstream dependencies of the files updated", "entry": "twoffles/downstream:0.4.0", "language": "docker_image", "verbose": true}]
[{"id": "ansible-lint-conda", "name": "ansible-lint-conda", "description": "This hook runs ansible-lint.", "entry": "ansible-lint -v --force-color", "language": "conda", "pass_filenames": false, "always_run": true}]
[{"id": "pylama", "name": "pylama", "description": "This hook runs pylama.", "entry": "pylama", "language": "python", "types": ["file", "python"], "args": [], "additional_dependencies": []}]
[{"id": "pdoc", "name": "generate documentation", "description": "runs pdoc to auto-generate docs.", "entry": "pdoc3 --html -o backend/docs backend/cherry --force", "language": "system", "pass_filenames": false, "types": ["python"]}]
[{"id": "ssort", "name": "ssort", "description": "Sorting top level statements in python files.", "entry": "ssort", "language": "python", "types": ["python"]}]
[{"id": "deptry", "name": "deptry", "description": "deptry is a command line tool to check for issues with dependencies in a Python project, such as unused or missing dependencies.", "entry": "deptry .", "language": "system", "always_run": true, "pass_filenames": false}]
[{"id": "develop-uptodate", "name": "Ensure up to date with respect to develop", "description": "Develop is fetched and feature branches are based on head of develop", "entry": "develop_uptodate", "pass_filenames": false, "language": "script", "always_run": true}]
[{"id": "docker-lint", "name": "hadolint: Dockerfile linting", "description": "Runs hadolint Docker image to lint Dockerfiles", "language": "docker_image", "entry": "hadolint/hadolint hadolint", "files": "Dockerfile(.[-_a-zA-Z0-9]+)*"}, {"id": "docker-compose-lint", "name": "docker-compose: Check configuration", "description": "Runs docker-compose config to lint files", "language": "docker_image", "entry": "ghcr.io/turo/pre-commit-hooks/docker_compose:1.29.2", "files": "docker-compose\\.([-_a-zA-Z0-9]+\\.)*y(a)?ml$"}, {"id": "gocyclo", "name": "gocyclo: Code complexity check", "description": "Runs `gocyclo`, checking function complexity", "language": "docker_image", "entry": "--entrypoint gocyclo.sh ghcr.io/turo/pre-commit-hooks/gotools:1.0.0", "files": "\\.go$"}, {"id": "goimports", "name": "goimports: Missing and unused imports", "description": "Runs `goimports` formatting code and cleaning imports", "entry": "--entrypoint goimports.sh ghcr.io/turo/pre-commit-hooks/gotools:1.0.0", "language": "docker_image", "files": "\\.go$"}, {"id": "gofmt", "name": "gofmt: Style formatting", "description": "Runs `gofmt` applying consistent style", "entry": "--entrypoint go-fmt.sh ghcr.io/turo/pre-commit-hooks/gotools:1.0.0", "language": "docker_image", "files": "\\.go$"}, {"id": "golangcilint", "name": "golangcilint: Lint all the things (docker)", "description": "Runs `golangci-lint`, a meta-linter which comprises many others, in docker", "entry": "ghcr.io/turo/pre-commit-hooks/golangci_lint:1.43.0", "language": "docker_image", "files": "\\.go$"}, {"id": "go-test-unit", "name": "go-test-unit: Run tagged unit tests", "description": "Runs `go test -tags=unit`, requires golang", "entry": "hooks/golang/go-test-unit.sh", "language": "script", "files": "\\.go$"}, {"id": "go-build", "name": "go-build: Check compilation", "description": "Runs `go build`, requires golang", "entry": "hooks/golang/go-build.sh", "language": "script", "files": "\\.go$"}, {"id": "go-mod-tidy", "name": "go-mod-tidy: Clean up go.mod and go.sum", "description": "Runs `go mod tidy -v`, requires golang", "entry": "hooks/golang/go-mod-tidy.sh", "language": "script", "files": "\\.go$"}, {"id": "go-vet", "name": "go-vet: Linting checks not caught by compiler", "description": "Runs `go vet`, requires golang", "entry": "hooks/golang/go-vet.sh", "language": "script", "files": "\\.go$"}, {"id": "go-fmt", "name": "go-fmt: Style formatting", "description": "Runs `go fmt`, requires golang", "entry": "hooks/golang/go-fmt.sh", "language": "script", "files": "\\.go$"}, {"id": "golangci-lint", "name": "golangci-lint: Lint all the things", "description": "Runs `golangci-lint`, a meta-linter which comprises many others", "entry": "hooks/golang/golangci-lint.sh", "language": "script", "files": "\\.go$", "pass_filenames": false}, {"id": "gomarkdoc", "name": "gomarkdoc: Create autogenerated documentation files", "description": "Runs `gomarkdoc` to create a README.md for each package", "entry": "hooks/golang/gomarkdoc.sh", "language": "script", "files": "\\.go$"}, {"id": "yaml-extension", "name": "Ensure yaml files use .yaml", "description": "Errors if there are .yml files", "entry": "hooks/yaml/yaml-extension.sh", "language": "script", "files": "\\.yml$"}, {"id": "yalc-check", "name": "Ensure no yalc dependencies are staged", "description": "Errors if there are staged yalc dependencies", "language": "script", "entry": "hooks/yalc/yalc-check.sh", "files": "package\\.json"}]
[{"id": "cmake-format", "name": "cmake-format", "description": "cmake-format can format your listfiles nicely so that they don't look like crap.", "entry": "cmake-format", "args": ["--in-place"], "language": "python", "types": ["cmake"]}, {"id": "cmake-lint", "name": "cmake-lint", "description": "cmake-lint will check your listfiles for style violations, common mistakes, and anti-patterns.", "entry": "cmake-lint", "language": "python", "types": ["cmake"]}]
[{"id": "spectral", "name": "spectral", "entry": "spectral lint", "language": "node", "files": "\\.(yml|yaml)$", "args": [], "require_serial": false, "additional_dependencies": ["@stoplight/spectral-cli@6.4.1"], "minimum_pre_commit_version": "0"}]
[{"id": "spellcheck", "name": "PreCommit Spell Check", "description": "Spell checks changes in files which you are about to commit.", "entry": "hooks/spellcheck.sh", "language": "script", "always_run": true}]
[{"id": "building-codes", "name": "Enforce arbitrary coding standards", "description": "Loren ipsum", "entry": "buildingcodes.py", "language": "python", "additional_dependencies": ["gitpython", "pyyaml"], "types": ["c++"]}]
[{"id": "format-precice-config", "name": "format preCICE configuration files", "description": "applies the cannonical format for preCICE configuration files", "entry": "format-precice-config", "language": "python", "types": ["file", "text"], "files": "\\.xml$", "require_serial": false}]
[{"id": "pip-split-requirements", "name": "pip-split-requirements", "description": "Split pip requirements", "entry": "pip-split-requirements", "language": "python", "require_serial": true, "files": "^(pyproject.toml|.pre-commit-config.yaml|.*requirement.*\\.txt)$", "pass_filenames": false}]
[{"id": "circleci-validate", "name": "CircleCI config validation", "description": "Validate CircleCI config yaml", "entry": "pre_commit_hooks/circleci-validate.sh", "language": "script", "files": "^.circleci/config.yml$"}]
[{"id": "git-secrets-scan", "name": "git-secrets: scan new files", "description": "Prevents you from committing secrets and credentials into git repositories", "language": "docker_image", "entry": "ghcr.io/denis-trofimov/git-secrets-docker git secrets --scan", "stages": ["commit"]}, {"id": "git-secrets-scan-history", "name": "git-secrets: scans repository including all revisions", "description": "Scans repository including all revisions. When a file contains a secret, \nthe matched text from the file being scanned will be written to stdout and \nthe script will exit with a non-zero status. \nEach matched line will be written with the name of the file that matched, \na colon, the line number that matched, a colon, and then the line of text that matched.\n", "language": "docker_image", "entry": "ghcr.io/denis-trofimov/git-secrets-docker git secrets --scan-history", "always_run": true, "pass_filenames": false, "stages": ["manual"]}]
[{"id": "double-indent", "name": "double indent", "description": "Automatically indent function and method definitions twice", "entry": "double-indent", "language": "python", "types": ["python"]}]
[{"id": "pytype", "name": "pytype", "entry": "pytype", "language": "python", "types": ["python"], "args": ["--config=pytype.cfg"], "require_serial": true, "additional_dependencies": []}]
[{"id": "check-email-domain", "name": "check email domain", "entry": "check-email-domain.sh", "language": "script", "description": "Check email domain", "pass_filenames": false, "always_run": true}]
[{"id": "mypy", "name": "mypy", "entry": "mypy", "language": "python", "types": ["python"], "args": ["--ignore-missing-imports", "--scripts-are-modules", "--no-strict-optional"], "require_serial": true, "additional_dependencies": []}]
[{"id": "rails_best_practices", "name": "rails_best_practices", "entry": "rails_best_practices", "language": "ruby", "types": ["ruby"], "args": ["."], "require_serial": false, "additional_dependencies": []}]
[{"id": "mdwrap", "name": "mdwrap", "description": "A python based markdown line wrapper", "entry": "mdwrap", "language": "python", "types": ["markdown"], "require_serial": true, "minimum_pre_commit_version": "2.9.2"}]
[{"id": "create-bats-readme", "name": "Create Bats README.md", "description": "Sysdig opinionated bats README creator", "entry": "create-bats-docs", "language": "python"}, {"id": "conftest-check", "name": "Conftest test", "description": "Sysdig opinionated conftest validation", "entry": "pre_commit_hooks/conftest-check.sh", "language": "script"}]
[{"id": "flake2lint", "name": "Flake8 -> PyLint", "description": "Augment Flake8 noqa comments with PyLint comments.", "entry": "flake2lint", "language": "python", "types_or": ["python", "pyi"]}]
[{"id": "hclfmt-conda", "name": "hclfmt-conda", "description": "This hook runs hclfmt.", "entry": "hclfmt -w", "language": "conda"}]
[{"id": "docxplain", "name": "Docx plain text mirror", "description": "Mirror an Office (docx) document in plain text.", "entry": "docxplain", "language": "python", "files": "\\.docx$"}]
[{"id": "pyspark-docker", "name": "pyspark (via docker)", "description": "pyspark", "entry": "/entrypoint.sh", "language": "docker"}]
[{"id": "nimble-check", "name": "nimble check", "entry": "nimble check .", "pass_filenames": false, "language": "system", "files": "\\.nim$"}, {"id": "nim-check", "name": "nim check", "entry": "bash -xc 'echo \"$@\" | xargs --verbose -n1 nim check' --", "language": "system", "files": "\\.nim$"}]
[{"id": "flutter-dependency-validation", "name": "Pubspec.yaml dependencies validation", "entry": "run", "language": "script", "files": "pubspec.yaml"}]
[{"id": "find-bugs", "name": "IntelliJ Find bugs", "description": "This hook finds bugs.", "entry": "pre-commit.rb", "language": "ruby", "types": ["text"]}]
[{"id": "validate-gitlab-ci", "name": "Validate GitLab CI", "description": "This hook validates the Gitlab CI yaml file", "entry": "glab-lint", "language": "ruby", "language_version": "2.6.3", "verbose": true}]
[{"id": "find-trailing-comma", "name": "Find trailing commas", "description": "Find trailing commas which make single value a tuple", "entry": "find-trailing-comma", "language": "python", "types": ["python"]}]
[{"id": "prettier-java", "name": "prettier for Java", "entry": "prettier --write", "language": "node", "files": "java"}]
[{"id": "unittest", "name": "unittest", "description": "Runs unittest over python tests source.", "entry": "python -m tasks", "language": "python", "types": ["python"], "args": ["--branch", "--coverage"], "files": "", "minimum_pre_commit_version": "1.0.0"}]
[{"id": "urlchecker", "name": "urlchecker", "description": "Look for broken URLs in your static files", "entry": "urlchecker-check", "language": "python", "language_version": "python3", "files": "\\.(rst|md|markdown|py|tex)$"}]
[{"id": "check-git-crypt-status", "name": "Check git-crypt status", "description": "Prevent accidentally adding unencrypted files with git-crypt", "entry": "check-git-crypt-status", "language": "python", "require_serial": true}]
[{"id": "bazel-gazelle", "name": "bazel run //:gazelle", "description": "This hook runs [Gazelle build generator](https://github.com/bazelbuild/bazel-gazelle)", "entry": "run-bazel-gazelle.sh", "files": "\\.(go|bazel|bzl|BUILD)$", "language": "script"}]
[{"id": "python3-hook", "name": "Python 3 Hook", "entry": "python3-hook", "language": "python", "language_version": "python3", "files": "\\.py$"}, {"id": "autopep8-wrapper", "name": "autopep8", "entry": "autopep8", "language": "python", "types": ["python"], "args": ["-i"], "require_serial": false, "always_run": true, "pass_filenames": false}, {"id": "check-added-large-files", "name": "Check for added large files", "description": "Prevent giant files from being committed", "entry": "check-added-large-files", "language": "python"}, {"id": "check-ast", "name": "Check python ast", "description": "Simply check whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "Check for byte-order marker", "description": "Forbid files which have a UTF-8 byte-order marker", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "Check builtin type constructor use", "description": "Require literal syntax when initializing empty or zero Python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "Check for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "Check that executables have shebangs", "description": "Ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "Check JSON", "description": "This hook checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "pretty-format-json", "name": "Pretty format JSON", "description": "This hook sets a standard for formatting JSON files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "Check for merge conflicts", "description": "Check for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "Check for broken symlinks", "description": "Checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "Check Toml", "description": "This hook checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "Check vcs permalinks", "description": "Ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "Check Xml", "description": "This hook checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "Check Yaml", "description": "This hook checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "Debug Statements (Python)", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "detect-aws-credentials", "name": "Detect AWS Credentials", "description": "Detects *your* aws credentials from the aws cli credentials file", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "Detect Private Key", "description": "Detects the presence of private keys", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "Fix End of Files", "description": "Ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "File Contents Sorter", "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as  input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-encoding-pragma", "name": "Fix python encoding pragma", "language": "python", "entry": "fix-encoding-pragma", "description": "Add # -*- coding: utf-8 -*- to the top of python files", "types": ["python"]}, {"id": "flake8", "name": "Flake8", "description": "flake8", "entry": "https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "forbid-new-submodules", "name": "Forbid new submodules", "language": "python", "entry": "forbid-new-submodules", "description": "Prevent addition of new git submodules"}, {"id": "mixed-line-ending", "name": "Mixed line ending", "description": "Replaces or checks mixed line ending", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "Tests should end in _test.py", "description": "This verifies that test files are named correctly", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "Don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "requirements-txt-fixer", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "Sort simple YAML files", "language": "python", "entry": "sort-simple-yaml", "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.", "files": "^$"}, {"id": "yapf", "name": "yapf", "entry": "yapf", "language": "python", "types": ["python"], "args": ["-i"], "require_serial": false, "additional_dependencies": []}, {"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "isort", "name": "isort", "entry": "isort", "language": "python", "types": ["python"], "require_serial": false}]
[{"id": "pkgcheck", "name": "pkgcheck", "description": "", "entry": "pkgcheck", "language": "python", "files": "\\.ebuild$", "args": ["scan", "--cache=no", "--color=no"], "require_serial": false, "additional_dependencies": [], "minimum_pre_commit_version": "0"}]
[{"id": "terraform-provider-version-check", "name": "terraform-provider-version-check", "description": "Check versions of terraform providers", "language": "system", "pass_filenames": false, "entry": "tfpvc", "types": ["terraform"]}]
[{"id": "mypy-conda", "name": "mypy-conda", "entry": "mypy", "language": "conda", "types": ["python"], "args": ["--ignore-missing-imports", "--scripts-are-modules"], "require_serial": true, "additional_dependencies": []}]
[{"id": "cargo-check-semver", "name": "cargo check semver", "description": "Check semver crate version considering potential breaking changes.", "entry": "cargo semver-checks check-release", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-audit-deny-warnings", "name": "cargo audit", "description": "Check cargo audit", "entry": "cargo audit --deny warnings", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-audit", "name": "cargo audit", "description": "Check cargo audit", "entry": "cargo audit", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-outdated", "name": "cargo outdated", "description": "Check outdated deps", "entry": "cargo +nightly outdated -wR", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-tests-all", "name": "cargo tests everything", "description": "cargo test all features/targets on workspace", "entry": "cargo test --all-targets --all-features --workspace -- --nocapture", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-all-possible-broken-code", "name": "clippy all with autofix and possible broken code", "description": "clippy all with autofix and possible broken code", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps --broken-code -- --no-deps -D warnings -Wmissing_docs -W clippy::all", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-all-targets-all-features", "name": "clippy all with all targets and all features", "description": "cargo clippy all with all targets and all features", "entry": "cargo clippy --workspace --all-targets --all-features -- -D warnings", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-all", "name": "clippy all with autofix", "description": "clippy all with autofix", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps -- --no-deps -D warnings -Wmissing_docs -W clippy::all", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-pedantic-possible-broken-code", "name": "clippy pedantic with autofix and possible broken code", "description": "clippy pedantic with autofix and possible broken code", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps --broken-code -- --no-deps -D warnings -W clippy::pedantic", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-pedantic", "name": "clippy pedantic with autofix", "description": "cargo clippy pedantic", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps -- --no-deps -D warnings -W clippy::pedantic", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-nursery-possible-broken-code", "name": "clippy nursery with autofix and possible-broken-code", "description": "clippy nursery with autofix and possible-broken-code", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps --broken-code -- --no-deps -D warnings -W clippy::nursery", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-nursery", "name": "clippy nursery with autofix", "description": "clippy nursery with autofix and possible-broken-code", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps -- --no-deps -D warnings -W clippy::nursery", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-others-possible-broken-code", "name": "clippy correctness suspicious style complexity perf with autofix and possible broken code", "description": "clippy correctness suspicious style complexity perf with autofix and possible broken code", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps --broken-code -- --no-deps -D warnings -W clippy::cargo -W clippy::correctness -W clippy::suspicious -W clippy::style -W clippy::complexity -W clippy::perf", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "clippy-autofix-others", "name": "clippy correctness suspicious style complexity perf with autofix", "description": "clippy correctness suspicious style complexity perf with autofix and possible broken code", "entry": "cargo clippy --all-targets --all-features --workspace --fix -Z unstable-options --allow-dirty --allow-staged --no-deps -- --no-deps -D warnings -W clippy::cargo -W clippy::correctness -W clippy::suspicious -W clippy::style -W clippy::complexity -W clippy::perf", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "nightly-cargo-format", "name": "nightly-cargo-format", "description": "cargo format with unstable features", "entry": "cargo +nightly fmt --all -- --unstable-features --config edition=\"2021\",imports_granularity=\"Crate\",format_macro_matchers=true,format_strings=true,reorder_impl_items=true,group_imports=\"StdExternalCrate\",unstable_features=true,use_field_init_shorthand=true", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "stable-cargo-format", "name": "stable-cargo-format", "description": "cargo format with specific stable Rust version", "entry": "cargo +stable fmt --all", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-format", "name": "cargo-format", "description": "cargo format", "entry": "cargo fmt --all", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-dry-publish", "name": "cargo-dry-publish", "description": "cargo publish (dry)", "entry": "cargo publish --dry-run", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-upgrade", "name": "cargo-upgrade", "description": "cargo upgrade Cargo.toml dependencies", "entry": "cargo upgrade", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-update", "name": "cargo-update", "description": "cargo update dependencies", "entry": "cargo update", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-udeps", "name": "cargo-udeps", "description": "cargo +nightly-2023-06-27 udeps - verify useless dependencies", "entry": "cargo +nightly-2023-06-27 udeps --workspace --all-targets --all-features", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-test-doc", "name": "cargo-test-doc", "description": "cargo test and run doc examples", "entry": "cargo test --all-features --doc --workspace", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-machete", "name": "cargo-machete", "description": "cargo machete", "entry": "cargo machete", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "dprint-toml-fix", "name": "dprint-toml-fix", "description": "dprint linter/formatter (in Rust)", "entry": "dprint --config https://raw.githubusercontent.com/Cosmian/git-hooks/main/dprint.json fmt -- '**/*.toml'", "language": "system", "types": ["text"], "pass_filenames": false}]
[{"id": "check-style", "name": "mvn check style", "description": "mvn check style", "entry": "check-style.sh", "language": "script", "types": ["java"]}]
[{"id": "script", "name": "Bash script", "entry": "bin/hook.sh", "language": "script", "files": ""}]
[{"id": "eslint-conda", "name": "eslint-conda", "description": "Pluggable JavaScript linter", "entry": "eslint", "language": "conda", "types": ["text", "javascript"], "args": ["--fix"]}]
[{"id": "check-rust", "name": "Check Rust", "description": "Check Rust files for fmt and clippy errors", "entry": "poetry run check-rust", "language": "python", "stages": ["push", "manual"]}]
[{"id": "no-commit-on-branch", "name": "No commit on master or main", "description": "Do no allow any commit on either specified branch.", "entry": "bin/no-commit-on-branch.sh", "language": "script", "always_run": true}, {"id": "bump-r-package-version", "name": "Bump r package version", "description": "Bump date and version in file Description.", "entry": "Rscript bin/bump-r-package-version.R", "language": "r", "always_run": true}, {"id": "lintr", "name": "lintr", "description": "check if a .R file is lint free (using lintr)", "entry": "Rscript bin/lintr.R", "language": "r", "files": "(\\.[rR]profile|\\.R|\\.Rmd|\\.Rnw|\\.r|\\.rmd|\\.rnw)$", "exclude": "renv/activate\\.R", "minimum_pre_commit_version": "2.13.0"}]
[{"id": "check-pyproject", "name": "Validate 'pyproject.toml'", "description": "Validate 'pyproject.toml'", "entry": "pyproject-parser check", "language": "python", "files": "^pyproject\\.toml$", "additional_dependencies": ["consolekit>=1.1.2", "click>=7.1.2"]}, {"id": "reformat-pyproject", "name": "Reformat 'pyproject.toml'", "description": "Reformat 'pyproject.toml'", "entry": "pyproject-parser reformat", "language": "python", "files": "^pyproject\\.toml$", "additional_dependencies": ["consolekit>=1.1.2", "click>=7.1.2"]}]
[{"id": "conventional-commit", "name": "Conventional Commit", "entry": "hooks/conventional-commit.sh", "language": "script", "description": "Check whether commit messages comply with the conventional commit format", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "lint", "name": "Lint JS(X) & TS(X)", "entry": "eslint", "language": "node", "args": ["--fix"], "additional_dependencies": ["@paulhfischer/prettier-config@1.8.0", "@typescript-eslint/eslint-plugin@5.61.0", "@typescript-eslint/parser@5.61.0", "eslint@8.44.0", "eslint-config-airbnb@19.0.4", "eslint-config-airbnb-typescript@17.0.0", "eslint-config-prettier@8.8.0", "eslint-plugin-html@7.1.0", "eslint-plugin-import@2.27.5", "eslint-plugin-jinja2-processor@1.2.0", "eslint-plugin-jsx-a11y@6.7.1", "eslint-plugin-prettier@4.2.1", "eslint-plugin-react@7.32.2", "eslint-plugin-react-hooks@4.6.0", "prettier@2.8.8"], "types": ["file"], "files": "\\.(js|jsx|ts|tsx|html|php)$", "exclude": "(^node_modules|\\.min\\.js$)"}]
[{"id": "statue", "name": "statue", "description": "Statue: All your static code analysis tools, in one place", "entry": "statue run -i", "language": "python", "minimum_pre_commit_version": "2.19.0", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "check-file-names", "name": "check file names", "entry": "check-file-names", "language": "python", "files": "^config/.*(.yaml|.yml|.json)$", "exclude": "^config/.*config(.yaml|.yml|.json)$"}, {"id": "check-stack-tags", "name": "check stack tags", "entry": "check-stack-tags", "language": "python", "files": "^config/.*(.yaml|.yml|.json)$", "exclude": "^config/.*config(.yaml|.yml|.json)$"}, {"id": "check-stack-names", "name": "check stack names", "entry": "check-stack-names", "language": "python", "files": "^config/.*(.yaml|.yml|.json)$", "exclude": "^config/.*config(.yaml|.yml|.json)$"}, {"id": "check-stack-tag-values", "name": "check stack tag values", "entry": "check-stack-tag-values", "language": "python", "files": "^config/.*(.yaml|.yml|.json)$", "exclude": "^config/.*config(.yaml|.yml|.json)$"}]
[{"id": "autopep8-wrapper", "name": "autopep8 wrapper (removed)", "description": "(removed) use pre-commit/mirrors-autopep8 instead.", "entry": "pre-commit-hooks-removed autopep8-wrapper autopep8 https://github.com/pre-commit/mirrors-autopep8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "check-added-large-files", "name": "Check for added large files", "description": "Prevent giant files from being committed", "entry": "check-added-large-files", "language": "python"}, {"id": "check-ast", "name": "Check python ast", "description": "Simply check whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "Check for byte-order marker", "description": "Forbid files which have a UTF-8 byte-order marker", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "Check builtin type constructor use", "description": "Require literal syntax when initializing empty or zero Python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "Check for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "Check that executables have shebangs", "description": "Ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "Check JSON", "description": "This hook checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "pretty-format-json", "name": "Pretty format JSON", "description": "This hook sets a standard for formatting JSON files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "Check for merge conflicts", "description": "Check for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "Check for broken symlinks", "description": "Checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "Check Toml", "description": "This hook checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "Check vcs permalinks", "description": "Ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "Check Xml", "description": "This hook checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "Check Yaml", "description": "This hook checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "Debug Statements (Python)", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "detect-aws-credentials", "name": "Detect AWS Credentials", "description": "Detects *your* aws credentials from the aws cli credentials file", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "Detect Private Key", "description": "Detects the presence of private keys", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "Fix End of Files", "description": "Ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "File Contents Sorter", "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-encoding-pragma", "name": "Fix python encoding pragma", "language": "python", "entry": "fix-encoding-pragma", "description": "Add # -*- coding: utf-8 -*- to the top of python files", "types": ["python"]}, {"id": "flake8", "name": "Flake8 (removed)", "description": "(removed) use gitlab.com/pycqa/flake8 instead.", "entry": "pre-commit-hooks-removed flake8 flake8 https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "forbid-new-submodules", "name": "Forbid new submodules", "language": "python", "entry": "forbid-new-submodules", "description": "Prevent addition of new git submodules"}, {"id": "mixed-line-ending", "name": "Mixed line ending", "description": "Replaces or checks mixed line ending", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "Tests should end in _test.py", "description": "This verifies that test files are named correctly", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "Don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "pyflakes", "name": "Pyflakes (removed)", "description": "(removed) use gitlab.com/pycqa/flake8 instead.", "entry": "pre-commit-hooks-removed pyflakes flake8 https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "requirements-txt-fixer", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "Sort simple YAML files", "language": "python", "entry": "sort-simple-yaml", "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.", "files": "^$"}, {"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "jekyll-relative-url-check-html", "name": "Jekyll Relative URL HTML", "entry": "jekyll-relative-url-check-html", "types": ["html"], "language": "python"}, {"id": "jekyll-relative-url-check-markdown", "name": "Jekyll Relative URL Markdown", "entry": "jekyll-relative-url-check-markdown", "types": ["markdown"], "language": "python"}]
[{"id": "remove-import-headers", "name": "Remove Python Import Header Comments", "entry": "remove-import-headers", "language": "python", "language_version": "python3", "args": [], "files": "^.*\\.py$", "require_serial": false, "pass_filenames": true, "additional_dependencies": [], "minimum_pre_commit_version": "0.14.0"}]
[{"id": "nomerge", "name": "nomerge", "description": "Don't allow a commit/merge if there's any instance of NOMERGE in the code", "entry": "nomerge", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "google-java-formatter-jdk8", "name": "Google Java Formatter", "description": "Runs the Google Java Formatter on Java source files. Minimum supported runtime version is JDK 8.", "language": "coursier", "entry": "google-java-format-jdk8", "files": "\\.java$", "require_serial": true}, {"id": "google-java-formatter-jdk11", "name": "Google Java Formatter", "description": "Runs the Google Java Formatter on Java source files. Minimum supported runtime version is JDK 11.", "language": "coursier", "entry": "google-java-format-jdk11 --java-opt --add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED", "files": "\\.java$", "require_serial": true}, {"id": "pmd", "name": "PMD", "description": "Runs the PMD static code analyzer on Java source files.", "language": "coursier", "entry": "pmd", "pass_filenames": false, "files": "\\.java$", "require_serial": true}]
[{"id": "copier-template-tester", "description": "ctt: copier-template-tester", "entry": "ctt --check-untracked", "language": "python", "minimum_pre_commit_version": "2.9.2", "name": "copier-template-tester", "pass_filenames": false}]
[{"id": "check-poetry", "name": "Poetry check", "description": "Validates the structure of the pyproject.toml file", "entry": "poetry check", "language": "system", "pass_filenames": false, "files": "pyproject.toml"}, {"id": "export-poetry", "name": "Poetry export", "description": "Exports pyproject.toml to requirements.txt", "entry": "poetry export -f requirements.txt -o requirements.txt", "language": "system", "pass_filenames": false, "files": "pyproject.toml"}]
[{"id": "gofmt", "name": "go-fmt", "entry": "go fmt ./...", "description": "Runs `go fmt`, requires golang", "language": "system", "files": "\\.go$", "require_serial": true, "pass_filenames": false}, {"id": "goimports", "name": "goimports", "entry": "goimports -w", "files": "\\.go$", "description": "Runs `goimports`, requires golang", "language": "system", "require_serial": true}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "golangci-lint -v run --fix", "language": "system", "files": "\\.go$", "description": "Runs `golangci-lint`, requires golangci-lint", "require_serial": true, "pass_filenames": false}, {"id": "gotests", "name": "gotests", "entry": "go test ./...", "language": "system", "files": "\\.go$", "pass_filenames": false, "description": "Runs `go test`, requires golang", "require_serial": true}, {"id": "gomodtidy", "name": "gomodtidy", "entry": "go mod tidy", "language": "system", "pass_filenames": false, "files": "\\.go$", "description": "Runs `go mod tidy`, requires golang", "require_serial": true}, {"id": "gogenerate", "name": "gogenerate", "entry": "go generate", "language": "system", "pass_filenames": false, "files": "\\.go$", "description": "Runs `go generate`, requires golang", "require_serial": true}, {"id": "commitlint", "name": "commitlint", "description": "Commitlint hook", "language": "node", "entry": "commitlint --edit", "pass_filenames": false, "always_run": true, "additional_dependencies": ["@commitlint/config-conventional"]}]
[{"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": ".hooks/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "entry": ".hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate_no_variables", "name": "Terraform validate without variables", "description": "Validates all Terraform configuration files without checking whether all required variables were set (basic check).", "entry": ".hooks/terraform_validate_no_variables.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate_with_variables", "name": "Terraform validate with variables", "description": "Validates all Terraform configuration files and checks whether all required variables were specified.", "entry": ".hooks/terraform_validate_with_variables.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}]
[{"id": "detect-secrets", "name": "Detect secrets", "description": "Detects high entropy strings that are likely to be passwords.", "entry": "detect-secrets-hook", "language": "python", "files": ".*"}]
[{"id": "cblack", "name": "cblack", "description": "Black: The uncompromising Python code formatter - 2 space indent fork", "entry": "cblack --check", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "autopep8-wrapper", "name": "autopep8 wrapper (removed)", "description": "(removed) use pre-commit/mirrors-autopep8 instead.", "entry": "pre-commit-hooks-removed autopep8-wrapper autopep8 https://github.com/pre-commit/mirrors-autopep8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "check-added-large-files", "name": "Check for added large files", "description": "Prevent giant files from being committed", "entry": "check-added-large-files", "language": "python"}, {"id": "check-ast", "name": "Check python ast", "description": "Simply check whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "Check for byte-order marker", "description": "Forbid files which have a UTF-8 byte-order marker", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "Check builtin type constructor use", "description": "Require literal syntax when initializing empty or zero Python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "Check for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "Check that executables have shebangs", "description": "Ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "Check JSON", "description": "This hook checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "pretty-format-json", "name": "Pretty format JSON", "description": "This hook sets a standard for formatting JSON files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "Check for merge conflicts", "description": "Check for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "Check for broken symlinks", "description": "Checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "Check Toml", "description": "This hook checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "Check vcs permalinks", "description": "Ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "Check Xml", "description": "This hook checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "Check Yaml", "description": "This hook checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "Debug Statements (Python)", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "detect-aws-credentials", "name": "Detect AWS Credentials", "description": "Detects *your* aws credentials from the aws cli credentials file", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "Detect Private Key", "description": "Detects the presence of private keys", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "Fix End of Files", "description": "Ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "File Contents Sorter", "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-encoding-pragma", "name": "Fix python encoding pragma", "language": "python", "entry": "fix-encoding-pragma", "description": "Add # -*- coding: utf-8 -*- to the top of python files", "types": ["python"]}, {"id": "flake8", "name": "Flake8 (removed)", "description": "(removed) use gitlab.com/pycqa/flake8 instead.", "entry": "pre-commit-hooks-removed flake8 flake8 https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "forbid-new-submodules", "name": "Forbid new submodules", "language": "python", "entry": "forbid-new-submodules", "description": "Prevent addition of new git submodules"}, {"id": "mixed-line-ending", "name": "Mixed line ending", "description": "Replaces or checks mixed line ending", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "Tests should end in _test.py", "description": "This verifies that test files are named correctly", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "Don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "pyflakes", "name": "Pyflakes (removed)", "description": "(removed) use gitlab.com/pycqa/flake8 instead.", "entry": "pre-commit-hooks-removed pyflakes flake8 https://gitlab.com/pycqa/flake8", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "requirements-txt-fixer", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "Sort simple YAML files", "language": "python", "entry": "sort-simple-yaml", "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.", "files": "^$"}, {"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "not-found-exe", "name": "Not found exe", "entry": "i-dont-exist-lol", "language": "system", "files": ""}]
[{"id": "fixit-lint", "name": "Fixit - lint", "description": "This hook shows Fixit lints and suggested changes without applying autofixes.", "entry": "fixit lint --diff", "language": "python", "types": ["python"]}, {"id": "fixit-fix", "name": "Fixit - lint and apply autofixes", "description": "This hook shows Fixit lints and applies suggested changes.", "entry": "fixit fix --automatic", "language": "python", "types": ["python"]}]
[{"id": "tryceratops", "name": "tryceratops", "description": "Manage your exceptions in Python like a PRO", "entry": "tryceratops", "language": "python", "language_version": "python3", "types": ["python"], "require_serial": true}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.21.0", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "prettier", "name": "prettier", "entry": "Prettier support for pre-commit has been moved to https://github.com/pre-commit/mirrors-prettier, please use the new repository.", "language": "fail", "pass_filenames": false}]
[{"id": "conventional-pre-commit", "name": "Conventional Commit", "entry": "conventional-pre-commit", "language": "python", "description": "Checks commit message for Conventional Commits formatting", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "openapi-spec-validator", "name": "openapi-spec-validator", "entry": "openapi-spec-validator", "description": "Hook to validate Open API specs.", "language": "python", "files": ".*openapi.*\\.(json|yaml|yml)"}]
[{"id": "iorgen-gen-skel", "name": "iorgen-gen-skel", "description": "Iorgen pre-commit hook that will generate code skeleton", "language": "python", "language_version": "python3", "entry": "iorgen gen-stubs -m None --same_dir", "files": "\\.(iorgen|yml|yaml)$", "pass_filenames": true}]
[{"id": "no_optional", "name": "no_optional", "description": "Replace `Optional[T]` by `Union[T, None]`", "entry": "no-optional", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "deadnix", "name": "deadnix", "description": "Scan Nix files for dead code", "entry": "deadnix", "args": ["--fail"], "types": ["nix"], "language": "system"}]
[{"id": "run-unit-tests", "name": "Run unit tests", "description": "Run content test using docker", "entry": "demisto-sdk run-unit-tests", "language": "python", "files": ".*Packs/.*/(?:Integrations|Scripts)/.*.yml$"}, {"id": "validate", "name": "validate", "description": "validate content", "entry": "demisto-sdk validate", "args": ["-g"], "pass_filenames": false, "language": "python", "require_serial": true}, {"id": "format", "name": "format", "description": "Format non-code files, to comply with XSOAR standards.", "entry": "demisto-sdk format", "args": ["-ud", "-n", "--no-validate", "-g"], "language": "python", "pass_filenames": false, "require_serial": true}, {"id": "secrets", "name": "secrets", "description": "Check for secrets in files.", "entry": "demisto-sdk secrets", "args": ["--ignore-entropy"], "pass_filenames": false, "language": "python"}, {"id": "no-implicit-optional", "name": "no implicit optional", "description": "Making code implicit-optional type hints PEP 484 compliant.", "entry": "no_implicit_optional", "require_serial": true, "language": "python", "types": ["python"]}, {"id": "mypy", "name": "mypy", "entry": "mypy", "language": "python", "require_serial": true, "types": ["python"], "exclude": "tests/.*|demisto_sdk/commands/init/templates/.*"}, {"id": "update-additional-dependencies", "name": "update-additional-dependencies", "entry": "update-additional-dependencies", "language": "python", "files": "poetry.lock", "require_serial": true, "pass_filenames": false}]
[{"id": "commit-message-validator", "name": "Commit Message Validator", "description": "Checks that commit messages are compliant with Lumapps rules.", "entry": "check_message.sh", "language": "script"}]
[{"id": "check-azure-bicep", "name": "az bicep build", "language": "script", "entry": "az_bicep_build.ps1", "files": ".*.bicep$"}, {"id": "check-azure-bicep-python", "name": "az bicep build (python)", "language": "python", "entry": "entry_az_bicep_build", "files": ".*.bicep$", "additional_dependencies": ["azure-cli"]}, {"id": "check-azure-bicep-format", "name": "az bicep format", "language": "script", "entry": "az_bicep_format.ps1", "files": ".*.bicep$"}, {"id": "check-azure-bicep-format-python", "name": "az bicep format (python)", "language": "python", "entry": "entry_az_bicep_format", "files": ".*.bicep$", "additional_dependencies": ["azure-cli"]}]
[{"id": "cmakelint", "name": "CMake Lint", "description": "This hook lints CMake files for style issues.", "entry": "cmakelint", "language": "python", "types": ["cmake"]}]
[{"id": "cc-template-scanner", "name": "Cloud Conformity Template Scanner", "description": "Scans CloudFormation templates before they're deployed.", "entry": "conformity-scan", "language": "node"}]
[{"id": "prohibit-commit-main", "name": "prohibit-commit-main", "entry": "prohibit-commit-main.sh", "language": "script", "description": "This hook prohibits for commiting directly to main and master branches.", "pass_filenames": false}, {"id": "spellcheck", "name": "spellcheck", "entry": "spellcheck.sh", "language": "script", "description": "This hook checks spelling in eg. Markdown files using pyspelling", "pass_filenames": false}]
[{"id": "autopep8-wrapper", "name": "autopep8 wrapper", "description": "This is deprecated, use pre-commit/mirrors-autopep8 instead.", "entry": "autopep8-wrapper", "language": "python", "types": ["python"], "args": ["-i"]}, {"id": "check-added-large-files", "name": "Check for added large files", "description": "Prevent giant files from being committed", "entry": "check-added-large-files", "language": "python"}, {"id": "check-ast", "name": "Check python ast", "description": "Simply check whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "Check for byte-order marker", "description": "Forbid files which have a UTF-8 byte-order marker", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "Check builtin type constructor use", "description": "Require literal syntax when initializing empty or zero Python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "Check for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "Check that executables have shebangs", "description": "Ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "Check JSON", "description": "This hook checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "pretty-format-json", "name": "Pretty format JSON", "description": "This hook sets a standard for formatting JSON files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "Check for merge conflicts", "description": "Check for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "Check for broken symlinks", "description": "Checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "Check Toml", "description": "This hook checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "Check vcs permalinks", "description": "Ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "Check Xml", "description": "This hook checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "Check Yaml", "description": "This hook checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "Debug Statements (Python)", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "detect-aws-credentials", "name": "Detect AWS Credentials", "description": "Detects *your* aws credentials from the aws cli credentials file", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "Detect Private Key", "description": "Detects the presence of private keys", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "detect-print", "name": "Detect Print in changes", "description": "Detects prints in changes", "entry": "detect-print", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "Fix End of Files", "description": "Ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "File Contents Sorter", "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-encoding-pragma", "name": "Fix python encoding pragma", "language": "python", "entry": "fix-encoding-pragma", "description": "Add # -*- coding: utf-8 -*- to the top of python files", "types": ["python"]}, {"id": "flake8", "name": "Flake8", "description": "This hook runs flake8.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true}, {"id": "forbid-new-submodules", "name": "Forbid new submodules", "language": "python", "entry": "forbid-new-submodules", "description": "Prevent addition of new git submodules"}, {"id": "mixed-line-ending", "name": "Mixed line ending", "description": "Replaces or checks mixed line ending", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "Tests should end in _test.py", "description": "This verifies that test files are named correctly", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "Don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "pyflakes", "name": "Pyflakes (DEPRECATED, use flake8)", "description": "This hook runs pyflakes. (This is deprecated, use flake8).", "entry": "pyflakes", "language": "python", "types": ["python"]}, {"id": "requirements-txt-fixer", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "Sort simple YAML files", "language": "python", "entry": "sort-simple-yaml", "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.", "files": "^$"}, {"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "prefix_and_issue_num", "name": "prefix_and_issue_num", "description": "Get issue number from branch name and add to commit message.", "entry": "prefix_and_issue_num", "language": "python", "stages": ["commit-msg"]}]
[{"id": "pre-commit-config-updater", "name": "pre-commit-config-updater", "description": "Download latest configs for pre-commit", "entry": "pre-commit-config-updater", "language": "python", "always_run": true, "pass_filenames": false, "minimum_pre_commit_version": "0.14.0"}]
[{"id": "incr_version", "name": "incr_version", "description": "Python project version incrementer", "entry": "incr_version", "language": "python", "language_version": "python3", "pass_filenames": false}]
[{"id": "golangci-lint", "name": "golangci-lint", "description": "Fast linters runner for Go.", "entry": "golangci-lint run --fix", "types": ["go"], "language": "golang", "pass_filenames": false}, {"id": "go-fmt", "name": "go-fmt", "description": "Runs gofmt", "entry": "gofmt -w .", "types": ["go"], "language": "golang", "pass_filenames": false}, {"id": "go-vet", "name": "go-vet", "description": "Runs go vet", "entry": "go vet ./...", "types": ["go"], "language": "golang", "pass_filenames": false}, {"id": "go-imports", "name": "go-imports", "description": "Runs goimport", "entry": "goimports -w .", "types": ["go"], "language": "golang", "pass_filenames": false}]
[{"id": "hadolint", "name": "Hadolint runner", "description": "Runs Hadolint to check for Dockerfile best practices", "entry": "run_hadolint.sh", "language": "script", "files": "(\\.dockerfile|Dockerfile)$"}]
[{"id": "enforce-eclipse-format", "name": "enforce-eclipse-format", "entry": "enforce-eclipse-format", "language": "ruby", "types": ["java"], "args": [], "additional_dependencies": []}]
[{"id": "frigate", "name": "frigate", "entry": "frigate hook", "description": "Run frigate to generate documentation for your Helm charts.", "language": "conda", "pass_filenames": false, "always_run": true}]
[{"id": "mdspell", "name": "markdown-spellcheck", "description": "", "entry": "mdspell", "language": "node", "types": ["markdown"], "args": [], "require_serial": false, "additional_dependencies": ["markdown-spellcheck@1.3.1"], "minimum_pre_commit_version": "0"}]
[{"id": "black-diff", "name": "black-diff", "description": "Just show the diff of black result.", "entry": "black", "language": "system", "types_or": ["python", "pyi"], "require_serial": true, "args": ["--diff", "--color"], "verbose": true}, {"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter.", "entry": "black", "language": "system", "types_or": ["python", "pyi"], "require_serial": true}, {"id": "blacken-docs", "name": "blacken-docs", "description": "Run `black` on python code blocks in documentation files.", "entry": "blacken-docs", "language": "system", "files": "\\.(rst|md|markdown|py|tex)$"}, {"id": "autoflake-diff", "name": "autoflake-diff", "description": "Just show the diff of autoflake result.", "entry": "autoflake", "language": "system", "types": ["python"], "require_serial": true, "verbose": true}, {"id": "autoflake", "name": "autoflake", "description": "autoflake removes unused imports and unused variables from Python code", "entry": "autoflake", "language": "system", "types": ["python"], "require_serial": true, "args": ["--in-place"]}, {"id": "autopep8-diff", "name": "autopep8-diff", "description": "Just show the diff of autopep8 result.", "entry": "autopep8", "language": "system", "types": ["python"], "args": ["--diff"], "verbose": true}, {"id": "autopep8", "name": "autopep8", "description": "autopep8 automatically formats Python code to conform to the PEP 8 style guide.", "entry": "autopep8", "language": "system", "types": ["python"], "args": ["--in-place"]}, {"id": "isort-diff", "name": "isort-diff", "description": "Just show the diff of isort result.", "entry": "isort", "language": "system", "require_serial": true, "types_or": ["cython", "pyi", "python"], "args": ["--diff", "--filter-files"], "verbose": true}, {"id": "isort", "name": "isort", "description": "isort your imports, so you don't have to.", "entry": "isort", "language": "system", "require_serial": true, "types_or": ["cython", "pyi", "python"], "args": ["--filter-files"]}, {"id": "flake8", "name": "flake8", "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.", "entry": "flake8", "language": "system", "types": ["python"], "require_serial": true}, {"id": "bandit", "name": "bandit", "description": "Bandit is a tool for finding common security issues in Python code", "entry": "bandit", "language": "system", "types": ["python"], "args": ["-c", "pyproject.toml"]}, {"id": "mypy", "name": "mypy", "entry": "mypy", "description": "Mypy is a static type checker for Python.", "language": "system", "types_or": ["python", "pyi"], "require_serial": true, "pass_filenames": false}, {"id": "shellcheck", "name": "shellcheck", "entry": "shellcheck", "description": "Test shell scripts with shellcheck.", "language": "system", "types": ["shell"], "require_serial": true}, {"id": "mdformat-check", "name": "mdformat-check", "description": "Just show the diff of mdformat result.", "entry": "mdformat", "language": "system", "types": ["markdown"], "args": ["--check"]}, {"id": "mdformat", "name": "mdformat", "description": "CommonMark compliant Markdown formatter", "entry": "mdformat", "language": "system", "types": ["markdown"]}]
[{"id": "deno-typecheck", "name": "deno check", "description": "Typechecks all TypeScript files.", "entry": "deno check", "types_or": ["ts", "tsx"], "pass_filenames": false, "language": "system"}]
[{"id": "timezone-checker", "name": "timezone-checker", "entry": "timezone-checker", "language": "python", "types": ["python"]}]
[{"id": "tidy-up", "name": "logseq-doctor tidy-up", "description": "Tidy up your Markdown files by removing empty bullets in any block", "entry": "lsd tidy-up", "language": "python", "types": ["markdown"]}]
[{"id": "clear-ipynb-cells", "name": "Clear ipython notebooks cells.", "description": "Clears the output of notebooks before comitting.", "entry": "clear-ipynb-cells", "language": "python", "files": "ipynb"}, {"id": "run-ipynb", "name": "Run ipython notebooks.", "description": "Runs all ipython notebooks in files", "entry": "run-ipynb", "language": "python", "files": "ipynb"}, {"id": "run-pycodestyle", "name": "Run Pycodestyle.", "description": "Runs pyQCA's pycodestyle. Can be configures in pyproject.toml", "entry": "run-pycodestyle", "language": "python", "files": "py"}, {"id": "test-hook", "name": "Test hook will auto-succeed.", "description": "This test hook will print sys.argv and exit with code 0.", "entry": "test-hook", "language": "python"}, {"id": "run-run-unittests", "name": "Unittests", "description": "This hook will execute the main() function in tests/run_unittests.py", "entry": "run-run-unittests", "language": "python"}, {"id": "run-coverage", "name": "Checking coverage", "description": "This hook will run coverage run -m unittest discover dir, where dir and coverage threshold can be configured in pyproject.toml", "entry": "run-coverage", "language": "python"}, {"id": "assert-version-advance", "name": "Registered tag that can be semver. Asserting advance of version.", "description": "This hook detects, whether a new tag has been added and then checks, if the semantic version of the project has been advanced correctly.", "entry": "assert-version-advance", "language": "python", "stages": ["push"], "args": ["--branch=main", "--remote=origin"]}]
[{"id": "ocamlformat", "name": "ocamlformat", "description": "Auto-formatter for OCaml code", "entry": "ocamlformat", "language": "system", "files": "\\.mli?$", "args": ["-i"]}]
[{"id": "pylint-ignore", "name": "pylint-ignore", "entry": "pylint-ignore", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "data-product-definition-validator", "name": "Data Product Definition validator", "entry": "validate-definitions", "language": "python", "language_version": "python3", "pass_filenames": false}, {"id": "data-product-definition-converter", "name": "Data Product Definition converter", "entry": "convert-definitions", "language": "python", "language_version": "python3", "pass_filenames": false}]
[{"id": "gray", "name": "gray", "description": "Gray: The alternative Python code formatter to Black", "entry": "gray", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "pymarkdown-link-check", "name": "Markdown Link Check", "description": "Check for invalid links in your markdown files.", "entry": "pymarkdown-link-check", "language": "python", "types": ["markdown"]}]
[{"id": "terraform-vars", "name": "terraform-unused-vars", "description": "Find unused variables in Terraform.", "language": "python_venv", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$", "minimum_pre_commit_version": "1.9.0", "entry": "terraform-unused-vars --quiet"}]
[{"id": "lams", "name": "LAMS Looker linter", "description": "https://github.com/looker-open-source/look-at-me-sideways", "entry": "lams", "language": "docker"}, {"id": "lkmlstyle", "name": "lkmlstyle", "description": "https://github.com/spectacles-ci/lkmlstyle", "entry": "lkmlstyle", "files": "^.*\\.(lkml)$", "language": "docker"}]
[{"id": "pylava", "name": "pylava", "description": "Run pylava across your python files.", "entry": "pylava", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "hpc-pc-cmake-build", "name": "HPC CMake build", "description": "Execute a \"cmake --build...\" command", "entry": "hpc-pc-cmake-build", "language": "python", "pass_filenames": false, "require_serial": true}]
[{"id": "git-submodule-sanity-check", "name": "Git submodule sanity check", "description": "Sanity Check on git submodules", "language": "script", "entry": "hooks/submodule-sanity-check.sh"}, {"id": "validate-semantic-version", "name": "Validate content of VERSION is a semantic version", "language": "python", "files": "VERSION", "entry": "validate-semantic-version"}]
[{"id": "pre-commit-sort", "name": "Sort pre-commit files", "entry": "pre-commit-sort", "language": "rust", "files": "^.pre-commit-(config|hooks).yaml$", "types": ["text"], "description": "Sort .pre-commit-config.yaml & .pre-commit-hooks.yaml"}]
[{"id": "infracost_breakdown", "name": "Infracost breakdown", "description": "Check terraform infrastructure cost", "entry": "hooks/infracost_breakdown.sh", "language": "script", "require_serial": true, "files": "\\.(tf(vars)?|hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "hooks/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf|\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_without_aggregate_type_defaults", "name": "Terraform docs (without aggregate type defaults)", "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_replace", "name": "Terraform docs (overwrite README.md)", "description": "Overwrite content of README.md with terraform-docs.", "require_serial": true, "entry": "terraform_docs_replace", "language": "python", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "hooks/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_providers_lock", "name": "Lock terraform provider versions", "description": "Updates provider signatures in dependency lock files.", "require_serial": true, "entry": "hooks/terraform_providers_lock.sh", "language": "script", "files": "(\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "require_serial": true, "entry": "hooks/terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format.", "entry": "hooks/terragrunt_fmt.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files.", "entry": "hooks/terragrunt_validate.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "require_serial": true, "entry": "hooks/terraform_tfsec.sh", "language": "script"}, {"id": "checkov", "name": "checkov (deprecated, use \"terraform_checkov\")", "description": "Runs checkov on Terraform templates.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terraform_checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "hooks/terraform_checkov.sh", "language": "script", "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terraform_wrapper_module_for_each", "name": "Terraform wrapper with for_each in module", "description": "Generate Terraform wrappers with for_each in module.", "entry": "hooks/terraform_wrapper_module_for_each.sh", "language": "script", "pass_filenames": false, "always_run": false, "require_serial": true, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$"}, {"id": "terrascan", "name": "terrascan", "description": "Runs terrascan on Terraform templates.", "language": "script", "entry": "hooks/terrascan.sh", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "tfupdate", "name": "tfupdate", "description": "Runs tfupdate on Terraform templates.", "language": "script", "entry": "hooks/tfupdate.sh", "args": ["--args=terraform"], "files": "\\.tf$", "require_serial": true}]
[{"id": "namespaced", "name": "Check for Kubernetes manifest without namespace", "description": "Forbid Kubernetes manifest without namespace to be commited", "entry": "namespaced", "language": "python", "files": "((^|/)*.(ya?ml)$)"}, {"id": "forbidden_pattern", "name": "Check if file contains forbidden patterns", "description": "Forbid files with forbidden patterns to be commited", "entry": "forbidden_pattern", "language": "python", "files": "(.*)"}]
[{"id": "ktlint", "name": "ktlint", "description": "Runs ktlint", "entry": "./scripts/ktlint.sh", "language": "script", "files": "\\.kt(s)?$"}, {"id": "mvn-validate", "name": "mvn validate", "description": "Validates the project is correct and all necessary information is available", "entry": "./scripts/mvn.sh validate", "language": "script"}, {"id": "mvn-compile", "name": "mvn compile", "description": "Compiles the source code of the project", "entry": "./scripts/mvn.sh clean compile", "language": "script"}, {"id": "mvn-test", "name": "mvn test", "description": "Tests the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed", "entry": "./scripts/mvn.sh test", "language": "script"}, {"id": "mvn-verify", "name": "mvn verify", "description": "Runs any checks on results of integration tests to ensure quality criteria are met", "entry": "./scripts/mvn.sh clean verify", "language": "script"}]
[{"id": "freeze-transitive", "name": "freeze transitive pre-commit dependencies", "description": "Freeze transitive pre-commit dependencies in Python hooks.", "entry": "python3 -m freeze_transitive", "language": "python", "language_version": "3.10", "pass_filenames": false, "require_serial": true}]
[{"id": "limit-blank-lines", "name": "limit blank lines", "description": "removes superfluous blank lines.", "entry": "limit-blank-lines", "language": "python", "types": ["text"]}]
[{"id": "reformat-gherkin", "name": "reformat-gherkin", "description": "Reformat Gherkin documents", "entry": "reformat-gherkin", "language": "python", "language_version": "python3", "require_serial": true, "files": "\\.(feature)$"}]
[{"id": "gitlab-codeowners-linter", "name": "lint Gitlab's CODEOWNERS file", "description": "check that the Gitlab's CODEOWNERS file is well formatted", "entry": "gitlab-codeowners-linter", "language": "python"}]
[{"id": "sqlx-prepare", "name": "ensure that sqlx-data.json is up to date", "language": "rust", "entry": "pre-commit-sqlx-prepare", "stages": ["commit"], "types": ["rust"], "pass_filenames": false, "require_serial": true}]
[{"id": "oelint-adv", "name": "Advanced oelint", "description": "Based on the OpenEmbedded Styleguide and work done by oe-stylize-tool this module offers a (nearly) complete linter for bitbake-recipes.", "entry": "oelint-adv", "language": "python", "language_version": "python3", "files": ".*\\.(bb)|(bbappend)|(bbclass)$"}]
[{"id": "check-missing-migrations", "name": "Check missing Django migrations", "description": "This hook checks if changes has been made into models but not reflected into a migration.", "entry": "python manage.py makemigrations", "args": ["--check", "--dry-run"], "language": "system", "types_or": ["python", "directory"], "files": "models", "require_serial": true, "pass_filenames": false}]
[{"id": "ansible-lint", "name": "Ansible-lint", "description": "This hook runs ansible-lint.", "entry": "ansible-lint --force-color", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "yamllint", "name": "yamllint", "description": "This hook runs yamllint.", "entry": "yamllint", "language": "python", "types": ["file", "yaml"]}]
[{"id": "clang-format-docs", "name": "clang-format-docs", "description": "Run `clang-format` on C++ code blocks in documentation files.", "entry": "clang-format-docs", "language": "python", "language_version": "python3", "files": "\\.(md|markdown)$"}]
[{"id": "lint", "name": "Lint (S)CSS", "entry": "stylelint", "language": "node", "args": ["--fix"], "additional_dependencies": ["postcss@8.4.29", "postcss-html@1.5.0", "stylelint@15.10.3", "stylelint-config-html@1.1.0", "stylelint-config-standard-scss@11.0.0", "stylelint-order@6.0.3"], "types": ["file"], "files": "\\.(css|scss|sass|html|php)$", "exclude": "(^node_modules|\\.min\\.css$)"}]
[{"id": "check-whitespace-between-cn-and-en-char", "name": "CN-[whitespace]-EN checker", "description": "Ensure Chinese and English characters are separated by a space.", "entry": "check-whitespace-between-cn-and-en-char", "language": "python", "types": ["text"]}, {"id": "insert-whitespace-between-cn-and-en-char", "name": "CN-[whitespace]-EN fixer", "description": "Insert a space between Chinese and English characters automatically.", "entry": "insert-whitespace-between-cn-and-en-char", "language": "python", "types": ["text"]}, {"id": "api-doc-checker", "name": "API doc checker", "description": "Check API docs.", "entry": "api-doc-checker", "language": "python", "types": ["rst"]}]
[{"id": "pip-compile", "name": "pip-compile", "description": "generates requirements.txt file from requirements.in file using pip-compile", "language": "script", "entry": "hooks/pip-compile", "files": "^requirements.(?:in|txt)$"}, {"id": "pip-compile-multi", "name": "pip-compile-multi", "description": "generates all requirements.txt files from all requirements.in files using pip-compile", "language": "script", "entry": "hooks/pip-compile-multi", "files": "^.*requirements.(?:in|txt)$"}, {"id": "make-migrations", "name": "make-migrations", "description": "ensures no Django model migrations were forgotten to be made", "language": "script", "entry": "hooks/make-migrations", "files": ".+.py"}]
[{"id": "black", "name": "black - Format Python", "entry": "black", "types": ["python"], "language": "python", "language_version": "python3", "additional_dependencies": ["black"], "require_serial": true}, {"id": "flake8", "name": "flake8 - Style Check Python", "entry": "flake8", "types": ["python"], "language": "python", "language_version": "python3", "additional_dependencies": ["flake8"], "require_serial": true}, {"id": "isort", "name": "isort - Import Sort Python", "entry": "isort", "types": ["python"], "language": "python", "language_version": "python3", "additional_dependencies": ["isort"]}, {"id": "shellcheck", "name": "shellcheck - Analyse shell scripts", "entry": "hooks/shellcheck/shellcheck.sh", "types": ["shell"], "language": "script"}, {"id": "yamllint", "name": "yamllint - YAML linter", "entry": "yamllint", "types": ["yaml"], "language": "python", "language_version": "python3", "additional_dependencies": ["yamllint"]}]
[{"id": "run-ejsonkms-encrypt", "name": "run-ejsonkms-encrypt", "description": "Run ejsonkms encrypt on all ejson files in your repository.", "entry": "ejsonkms encrypt", "language": "golang", "types": ["file"], "files": "\\.ejson$"}]
[{"id": "infracost_breakdown", "name": "Infracost breakdown", "description": "Check terraform infrastructure cost", "entry": "hooks/infracost_breakdown.sh", "language": "script", "require_serial": true, "files": "\\.(tf(vars)?|hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "hooks/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf|\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_without_aggregate_type_defaults", "name": "Terraform docs (without aggregate type defaults)", "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_replace", "name": "Terraform docs (overwrite README.md)", "description": "Overwrite content of README.md with terraform-docs.", "require_serial": true, "entry": "terraform_docs_replace", "language": "python", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "hooks/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_providers_lock", "name": "Lock terraform provider versions", "description": "Updates provider signatures in dependency lock files.", "require_serial": true, "entry": "hooks/terraform_providers_lock.sh", "language": "script", "files": "(\\.terraform\\.lock\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "require_serial": true, "entry": "hooks/terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format.", "entry": "hooks/terragrunt_fmt.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files.", "entry": "hooks/terragrunt_validate.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "require_serial": true, "entry": "hooks/terraform_tfsec.sh", "language": "script"}, {"id": "checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "hooks/checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}, {"id": "terrascan", "name": "terrascan", "description": "Runs terrascan on Terraform templates.", "language": "script", "entry": "hooks/terrascan.sh", "files": "\\.tf$", "exclude": "\\.terraform\\/.*$", "require_serial": true}]
[{"id": "flake8-intsights", "name": "flake8-intsights", "description": "Uncompromising and opinionated flake8 plugin which follows Intsights' practices", "entry": "flake8", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "reek", "name": "reek", "entry": "reek", "language": "ruby", "types": ["ruby"], "args": [], "require_serial": false, "additional_dependencies": []}]
[{"id": "no-go-testing", "name": "Check files aren't using go's testing package", "entry": "testing\\.T", "files": "test_.*\\.go$", "language": "pygrep", "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "run-golangci-lint.sh", "types": ["go"], "language": "script", "pass_filenames": false, "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"}, {"id": "go-unit-tests", "name": "go-unit-tests", "entry": "run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`"}, {"id": "go-build", "name": "go-build", "entry": "run-go-build.sh", "files": "\\.go$", "language": "script", "description": "Runs `go build`, requires golang"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "run-go-mod-tidy.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "run-go-mod-vendor.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod vendor`, requires golang"}]
[{"id": "forbid-html-img-without-alt-text", "name": "HTML img tag alt text checker", "description": "List every <img> tag without a alt= or data-ng-attr-alt= attribute", "entry": "forbid_html_img_without_alt_text", "language": "python", "files": ".*\\.(html|hbs)$"}, {"id": "forbid-non-std-html-attributes", "name": "Non-standard HTML attributes checker", "description": "Detect any non-standard attribute that is not prefixed with data-", "entry": "forbid_non_std_html_attributes", "language": "python", "args": ["--extra-known-attributes", "content,http-equiv,placeholder,role,style"], "files": ".*\\.(html|hbs)$"}, {"id": "detect-missing-css-classes", "name": "Missing CSS classes checker", "description": "Detect unused or missing CSS classes definitions, and abort if any of the later ones is found", "entry": "detect_missing_css_classes", "language": "python", "files": ".*\\.(css|hbs|html)$"}, {"id": "html-tags-blacklist", "name": "Forbid some HTML tags", "entry": "html_tags_blacklist", "language": "python", "args": ["--forbidden-tags", "basefont,blink,center,font,marquee,s,strike,tt,u"], "files": "\\.(html|hbs)$"}, {"id": "html-attributes-blacklist", "name": "Forbid some HTML attributes", "entry": "html_attributes_blacklist", "language": "python", "args": ["--forbidden-attributes", "align,alink,background,basefont,bgcolor,border,color,link,text,vlink"], "files": "\\.(html|hbs)$"}]
[{"id": "lavender", "name": "lavender", "description": "Lavender: The slightly more compromising Python code formatter", "entry": "lavender", "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "secrets_filename", "name": "Check filenames for potential secrets", "description": "Check filenames for potential secrets", "language": "python", "entry": "security-git-hooks-filecontent"}, {"id": "secrets_filecontent", "name": "Check file content for potential secrets", "description": "Check file content for potential secrets", "language": "python", "entry": "security-git-hooks-filename"}, {"id": "repository_check", "name": "Check local hooks release against latest", "description": "Check local hooks release against latest", "language": "python", "entry": "security-git-hooks-repository-check"}, {"id": "hooks_version_check", "name": "Check repository.yaml", "description": "Check repository.yaml", "language": "python", "entry": "security-git-hooks-version-check"}]
[{"id": "autopep8-wrapper", "name": "autopep8 wrapper", "description": "Runs autopep8 over python source.  If you configure additional arguments you'll want to at least include -i.", "entry": "autopep8-wrapper", "language": "python", "types": ["python"], "args": ["-i"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "terraform-entry-sorter", "name": "terraform-entry-sorter", "description": "Check and fix certain terraform entry", "language": "python", "entry": "python -m hooks/terraform-entry-sorter.py", "always_run": true}]
[{"id": "remove-print-statements", "name": "remove print statements", "description": "remove all the print statements from your Python project", "entry": "remove-print-statements", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "licensecheck", "name": "licensecheck", "description": "Output the licenses used by dependencies and check if these are compatible with the project license", "entry": "licensecheck --zero", "language": "python", "minimum_pre_commit_version": "2.9.2", "pass_filenames": false}]
[{"id": "blackbook", "name": "blackbook", "description": "`Black` for Jupyter notebooks.", "entry": "blackbook .", "language": "python", "language_version": "python3", "require_serial": true, "files": ".*\\.ipynb"}]
[{"id": "sq-black", "name": "sq-black", "description": "SQ-Black: The uncompromising, single quotes, Python code formatter", "entry": "sq-black", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "blacktex", "name": "blacktex", "description": "Clean up LaTeX files.", "entry": "blacktex", "language": "python", "language_version": "python3", "types": ["tex"], "args": ["--in-place"]}]
[{"id": "markdown-link-check", "name": "markdown-link-check", "description": "Markdown-link-check checks all of the hyperlinks in a markdown text to determine if they are alive or dead.", "entry": "pre_commit_hooks/markdown/markdown-link-check.sh", "language": "script", "files": "\\.md$", "args": [], "exclude": "(?x)^(\n  .+\\.tpl.md$|\n  .+\\.node_modules\\/.*$|\n  .+\\.cache\\/.*$|\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "pre_commit_hooks/terraform/checkov.sh", "language": "script", "pass_filenames": true, "require_serial": true, "always_run": false, "files": "\\.tf$", "exclude": "(?x)^(\n  .+\\.node_modules\\/.*$|\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "pre_commit_hooks/terraform/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "(?x)^(\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "entry": "pre_commit_hooks/terraform/terraform_docs.sh", "require_serial": true, "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "(?x)^(\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-docs-without-aggregate-type-defaults", "name": "Terraform docs (without aggregate type defaults)", "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.", "require_serial": true, "entry": "pre_commit_hooks/terraform/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "(?x)^(\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-docs-replace", "name": "Terraform docs (overwrite README.md)", "description": "Overwrite content of README.md with terraform-docs.", "require_serial": true, "entry": "pre_commit_hooks/terraform/terraform_docs_replace", "language": "python", "files": "(\\.tf)$", "exclude": "(?x)^(\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "pre_commit_hooks/terraform/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "(?x)^(\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "entry": "pre_commit_hooks/terraform/terraform_tflint.sh", "require_serial": true, "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "(?x)^(\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terraform-tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "entry": "pre_commit_hooks/terraform/terraform_tfsec.sh", "require_serial": true, "language": "script", "pass_filenames": true, "files": "\\.tf$", "exclude": "(?x)^(\n  .+\\.node_modules\\/.*$|\n  .+\\.vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "terragrunt-fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format.", "entry": "pre_commit_hooks/terragrunt/terragrunt_fmt.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$", "minimum_pre_commit_version": "0.15.0"}, {"id": "terragrunt-validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files.", "entry": "pre_commit_hooks/terragrunt/terragrunt_validate.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "(?x)^(\n  .+\\.tflint.hcl$|\n  .+\\vendor\\/.*$|\n  .+\\.terraform\\/.*$|\n)$\n", "minimum_pre_commit_version": "0.15.0"}, {"id": "shellcheck", "name": "shellcheck", "description": "Test shell scripts with shellcheck", "entry": "pre_commit_hooks/shell/shellcheck.sh", "language": "script", "types": ["shell"], "require_serial": true}, {"id": "go-fmt", "name": "go fmt", "description": "Test go files with `gofmt`", "entry": "pre_commit_hooks/go/go-fmt.sh", "files": "\\.go$", "language": "script"}, {"id": "go-imports", "name": "go imports", "description": "Tests go files with `goimports`", "entry": "pre_commit_hooks/go/go-imports.sh", "files": "\\.go$", "language": "script"}, {"id": "go-vet", "name": "go vet", "description": "Tests go files with `go vet`", "entry": "pre_commit_hooks/go/go-vet.sh", "files": "\\.go$", "language": "script"}, {"id": "golint", "name": "go lint", "description": "Tests go files with `golint`", "entry": "pre_commit_hooks/go/golint.sh", "files": "\\.go$", "language": "script"}, {"id": "gocyclo", "name": "gocyclo", "description": "Tests go files with `gocyclo`", "entry": "pre_commit_hooks/go/gocyclo.sh", "files": "\\.go$", "language": "script", "args": ["-over=15"]}, {"id": "validate-toml", "name": "validate toml", "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n", "entry": "tomlv", "files": "\\.toml$", "language": "system"}, {"id": "no-go-testing", "name": "Check files aren't using go's testing package", "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n", "entry": "testing\\.T", "files": "test_.*\\.go$", "language": "pygrep"}, {"id": "golangci-lint", "name": "golangci-lint", "description": "Tests go files with `golangci-lint`", "entry": "pre_commit_hooks/go/golangci-lint.sh", "require_serial": false, "files": "\\.go$", "language": "script"}, {"id": "go-critic", "name": "go-critic", "description": "Tests go files with `go-critic`", "entry": "pre_commit_hooks/go/go-critic.sh", "files": "\\.go$", "language": "script"}, {"id": "go-unit-tests", "name": "go-unit-tests", "entry": "pre_commit_hooks/go/go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`"}, {"id": "go-build", "name": "go-build", "entry": "pre_commit_hooks/go/go-build.sh", "files": "\\.go$", "language": "script", "description": "Runs `go build`, requires golang"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "pre_commit_hooks/go/go-mod-tidy.sh", "files": "\\.go$", "language": "script", "exclude": "(?x)^(\n  .+\\.terraform\\/.*$|\n)$\n", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "pre_commit_hooks/go/go-mod-vendor.sh", "files": "\\.go$", "language": "script", "exclude": "(?x)^(\n  .+\\.terraform\\/.*$|\n)$\n", "description": "Runs `go mod vendor`, requires golang"}, {"id": "todocheck", "name": "todo check", "description": "Tests files with todocheck.", "entry": "pre_commit_hooks/check/todocheck.sh", "language": "script", "always_run": true, "pass_filenames": false, "minimum_pre_commit_version": "0.15.0"}, {"id": "do-not-commit", "name": "Block if \"DO NOT COMMIT\" is found", "entry": "DO NOT COMMIT", "language": "pygrep"}, {"id": "hadolint", "name": "hadolint", "description": "Tests files Dockerfiles with hadolint", "entry": "pre_commit_hooks/docker/hadolint.sh", "language": "script", "types": ["file"], "files": "Dockerfile(.*)"}, {"id": "docker-compose-check", "name": "Validate docker-compose files", "description": "Checks that docker-compose files are valid", "language": "script", "entry": "pre_commit_hooks/docker/docker-compose.sh", "files": "docker-compose.y[a]{0,1}ml$"}, {"id": "gitleaks", "name": "gitleaks validate commits", "description": "Validates all commits with gitleaks.", "entry": "pre_commit_hooks/git/gitleaks.sh", "pass_filenames": false, "language": "script", "minimum_pre_commit_version": "0.15.0"}, {"id": "prepare-commit-msg", "name": "prepare-commit-msg", "entry": "pre_commit_hooks/git/hooks/prepare-commit-msg.sh", "language": "script", "stages": ["prepare-commit-msg"], "minimum_pre_commit_version": "0.15.0", "pass_filenames": false}]
[{"id": "brack", "name": "brack", "description": "The relentless git branch name acknowledger", "entry": "pre_commit_hooks/brack", "language": "script", "always_run": true, "pass_filenames": false}]
[{"id": "check-file-change", "name": "Check files change", "description": "Check that listed files don't change.", "entry": "check-file-change", "language": "python", "files": "^$"}, {"id": "check-comments", "name": "Count comments in files", "description": "Check if file contains at least more than 0% of comments", "entry": "pre_commit_hooks/check-comments.sh", "language": "script", "types": ["python"]}, {"id": "check-branch-name", "name": "Check the compliance of your branch name", "description": "Checks that the name of the branch you are committing to is compliant with a given regex", "entry": "pre_commit_hooks/check-branch-name.sh", "language": "script", "pass_filenames": false}]
[{"id": "poetry-check", "name": "poetry-check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}, {"id": "poetry-lock", "name": "poetry-lock", "description": "run poetry lock to update lock file", "entry": "poetry lock --no-update", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^(pyproject.toml|poetry.lock)$"}, {"id": "poetry-export", "name": "poetry-export", "description": "run poetry export to sync lock file with requirements.txt", "entry": "poetry export", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^poetry.lock$", "args": ["-f", "requirements.txt", "-o", "requirements.txt", "--without-hashes", "--dev"]}]
[{"id": "changelogger", "name": "changelogger", "entry": "cl precommit", "language": "python"}]
[{"id": "zptlint", "name": "zptlint", "description": "`zptlint` is a command-line utility for enforcing style consistency across ZPT.", "entry": "zptlint", "language": "python", "files": "^.*\\.z?pt$", "require_serial": true}]
[{"id": "no-commit-on-main", "name": "no-commit-on-main", "description": "fail if the developper would like to commit to the main or the master branch", "entry": "pre_commit_hooks/no-commit-on-main.sh", "language": "script", "fail_fast": true, "minimum_pre_commit_version": "2.16.0", "stages": ["commit", "push"]}]
[{"id": "check-ruby-debug", "name": "Check ruby debug breakpoints", "description": "Check ruby files for the presence of byebug, binding.b or binding.break", "entry": "pre_commit_hooks/check-ruby-debug", "language": "script", "files": "(\\.rb|.erb)$"}]
[{"id": "sort-all", "name": "Sort __all__ records", "description": "Automatically Sort __all__ records alphabetically.", "entry": "sort-all", "language": "python", "types": ["python"]}]
[{"id": "pyright", "name": "pyright", "entry": "python -m pyright-precommit", "language": "python", "pass_filenames": true, "types": ["python"], "args": []}]
[{"id": "req-lock", "name": "Request Lock Hook", "description": "Yell if requirements file has changed but lock file hasn't", "entry": "run-hook.sh", "language": "script", "types": ["text"], "require_serial": true}]
[{"id": "fixmyjs", "name": "fixmyjs", "entry": "fixmyjs", "language": "node", "files": "\\.js$", "args": [], "additional_dependencies": ["fixmyjs@2.0.0"], "minimum_pre_commit_version": "0.7.0"}]
[{"id": "k8svalidate", "name": "k8svalidate", "description": "A pre-commit hook to validate Kubernetes YAML files", "entry": "k8svalidate", "language": "python", "types": ["yaml"]}]
[{"id": "make-typed", "name": "make-typed", "entry": "daves-dev-tools make-typed", "language": "python", "pass_filenames": false, "always_run": true, "stages": ["commit"]}, {"id": "git-tag-version", "name": "git-tag-version", "entry": "daves-dev-tools git tag-version", "language": "python", "pass_filenames": false, "always_run": true, "stages": ["push"], "require_serial": true}, {"id": "git-push-tags", "name": "git-push-tags", "entry": "git push --no-verify --tags", "language": "system", "pass_filenames": false, "always_run": true, "stages": ["push"], "require_serial": true}]
[{"id": "openapi-lint", "name": "Cimpress OpenAPI Linter", "description": "This hook lints OpenAPI spec according to the rfc specifications of RFC-2", "entry": "spectral lint --ruleset /app/.spectral.yml", "language": "docker", "types": ["yaml", "json"], "always_run": true}, {"id": "openapi-lint-node", "name": "Cimpress OpenAPI Linter using Node Runtime", "description": "This hook lints OpenAPI spec according to the rfc specifications of RFC-2", "types": ["yaml", "json"], "language": "node", "entry": "spectral", "always_run": true}]
[{"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "jupyter-cleanup", "name": "Clean Output Common Notebooks", "description": "This notebooks clean notebooks in common folder", "entry": "jupyter-cleanup", "language": "python", "types": ["text"], "files": ".ipynb$", "stages": ["commit", "push", "manual"]}]
[{"id": "checkov", "name": "Checkov", "description": "This hook runs checkov.", "entry": "checkov", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}]
[{"id": "qml-format", "name": "QML formatter.", "description": "This hook format .qml files.", "entry": "qmlformatter", "language": "python", "types": ["text"], "files": "(.*?)\\.qml$"}]
[{"id": "clevercsv-standardize", "name": "CleverCSV Standardize", "entry": "clevercsv standardize", "language": "python", "types": ["csv"], "args": ["--in-place"], "require_serial": false, "additional_dependencies": []}]
[{"id": "osv-scanner", "name": "osv-scanner", "description": "osv-scanner: Vulnerability scanner written in Go which uses the data provided by https://osv.dev", "entry": "osv-scanner --recursive .", "language": "system", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "pass_filenames": false}, {"id": "govulncheck", "name": "govulncheck", "description": "govulncheck: Govulncheck reports known vulnerabilities that affect Go code. It uses static analysis of source code or a binary's symbol table to narrow down reports to only those that could affect the applicatio", "entry": "govulncheck", "language": "system", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "pass_filenames": false}, {"id": "gitleaks", "name": "gitleaks", "description": "gitleaks: Detect hardcoded secrets using Gitleaks", "entry": "gitleaks detect --verbose", "language": "system", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "pass_filenames": false}]
[{"id": "normalize_po", "name": "Normalize PO files", "description": "Sort, wrap & stuff", "entry": "normalize-po", "language": "python", "files": "\\.po$", "types": ["text"]}]
[{"id": "unify", "name": "unify", "entry": "unify", "language": "python", "types": ["python"], "require_serial": true, "args": ["--in-place"]}]
[{"id": "black", "name": "black formatter", "entry": "scripts/black-formatter.sh", "language": "script", "types": ["python"]}, {"id": "flake8", "name": "flake8 linter", "entry": "scripts/flake8.sh", "language": "script", "types": ["python"]}, {"id": "pytest", "name": "pytest (quiet, stops on first failure)", "entry": "scripts/pytest.sh", "language": "script", "types": ["python"]}]
[{"id": "gradle-check", "name": "gradle-check", "description": "Run ./gradlew check", "entry": "bin/gradle-check", "language": "script"}]
[{"id": "pyright", "name": "pyright", "description": "Python command line wrapper for pyright, a static type checker", "entry": "pyright", "language": "python", "types_or": ["python", "pyi"], "require_serial": true, "additional_dependencies": [], "minimum_pre_commit_version": "2.9.2"}]
[{"id": "do-not-commit", "name": "DO NOT COMMIT", "entry": "./git/hooks/pre-commit", "language": "script"}, {"id": "do-not-push", "name": "DO NOT PUSH", "entry": "./git/hooks/pre-push", "language": "script"}]
[{"id": "typstfmt", "name": "typstfmt", "description": "format typst\n", "entry": "typstfmt", "language": "rust", "files": "\\.typ$"}]
[{"id": "ns-sort-docker", "name": "Sort Clojure Namespaces", "description": "Runs ns-sort Docker image to sort clojure files", "language": "docker_image", "types": ["clojure"], "entry": "allisoncasey327/ns-sort:v1.1.3"}]
[{"id": "mjml", "name": "mjml", "description": "Convert MJML email templates to HTML", "entry": "mjml_hook", "language": "node", "additional_dependencies": ["mjml@4.12.0"], "minimum_pre_commit_version": "0", "files": ".*\\.mjml"}, {"id": "cog", "name": "run cog to generate code", "entry": "run-cog", "args": ["--working-directory-level", "-1"], "language": "python"}]
[{"id": "nbcheckorder", "name": "Check notebook cell order.", "description": "Prevents notebooks with unordered from being committed.", "entry": "nbcheckorder", "language": "python", "types": ["jupyter"]}]
[{"id": "jsonlint", "name": "jsonlint", "entry": "jsonlint", "language": "node", "files": "json", "args": ["--quiet", "--compact"], "require_serial": false, "additional_dependencies": ["jsonlint@1.6.3"]}]
[{"id": "giticket", "name": "giticket", "entry": "giticket", "language": "python", "stages": ["commit-msg"], "description": "Utility to prepend your commits with info from your branch."}]
[{"id": "sample-dotnet-tool", "name": "run the sample tool", "entry": "sample-tool", "language": "dotnet"}]
[{"id": "docker-hook", "name": "Docker test hook", "entry": "echo", "language": "docker", "files": "\\.txt$"}, {"id": "docker-hook-arg", "name": "Docker test hook", "entry": "echo -n", "language": "docker", "files": "\\.txt$"}, {"id": "docker-hook-failing", "name": "Docker test hook with nonzero exit code", "entry": "bork", "language": "docker", "files": "\\.txt$"}]
[{"id": "cesar", "name": "cesar", "description": "The images radical compressor", "entry": "cesar", "language": "script", "always_run": true, "pass_filenames": true, "verbose": false, "types": ["image"]}]
[{"id": "notebook_convert", "name": "notebook_convert", "description": "convert jupyter notebooks to readable formats", "entry": "python -m nb_lib.tool", "language": "docker", "files": "\\.ipynb$"}]
[{"id": "check-version-equality", "name": "check version equality", "description": "checks whether the versions specified in pyproject.toml and project/__init__.py are equal.", "files": "^pyproject.toml|.+/__init__.py$", "pass_filenames": false, "entry": "check-version-equality", "language": "python", "types": ["python"]}]
[{"id": "xygeni", "name": "xygeni (script)", "description": "Runs Xygeni scanner as a script", "stages": ["commit"], "entry": "xygeni", "args": ["-q", "scan", "--format=text", "--run=secrets,suspectdeps,misconf,iac,codetamper,compliance", "--fail-on=severity:critical"], "language": "script", "pass_filenames": false, "always_run": true}, {"id": "xygeni-docker", "name": "xygeni (docker)", "description": "Runs Xygeni scanner docker image", "stages": ["commit"], "language": "docker", "entry": "-e XYGENI_TOKEN xygeni/xygeni_scanner:latest", "args": ["-q", "scan", "--format=text", "--run=secrets,suspectdeps,misconf,iac,codetamper,compliance", "--fail-on=severity:critical"], "pass_filenames": false, "always_run": true}]
[{"id": "brie-commit", "name": "\ud83e\uddc0\ud83e\uddc0\ud83e\uddc0", "entry": "echo \"So Cheesy!\"", "language": "system"}, {"id": "up-to-no-gouda", "name": "good2gouda", "entry": "good2gouda", "language": "python", "types": ["text"]}]
[{"id": "clang-format", "name": "clang-format", "description": "Automatically install any specific version of clang-format and format C/C++ code", "entry": "clang-format-hook", "language": "python", "files": "\\.(h\\+\\+|h|hh|hxx|hpp|c|cc|cpp|c\\+\\+|cxx)$"}, {"id": "clang-tidy", "name": "clang-tidy", "description": "Automatically install any specific version of clang-tidy and diagnose/fix typical programming errors", "entry": "clang-tidy-hook", "language": "python", "files": "\\.(h\\+\\+|h|hh|hxx|hpp|c|cc|cpp|c\\+\\+|cxx)$"}]
[{"id": "flake8-trio", "name": "flake8-trio", "entry": "flake8-trio", "language": "python", "types": ["python"]}]
[{"id": "change-version", "name": "change-version", "description": "", "entry": "change_version", "require_serial": true, "language": "python", "additional_dependencies": ["gitpython", "semantic-version==2.10.0"]}]
[{"id": "check-added-large-files", "name": "check for added large files", "description": "prevents giant files from being committed.", "entry": "check-added-large-files", "language": "python", "stages": ["commit", "push", "manual"]}, {"id": "check-ast", "name": "check python ast", "description": "simply checks whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "check BOM - deprecated: use fix-byte-order-marker", "description": "forbids files which have a utf-8 byte-order marker.", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "check builtin type constructor use", "description": "requires literal syntax when initializing empty or zero python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "check for case conflicts", "description": "checks for files that would conflict in case-insensitive filesystems.", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "check docstring is first", "description": "checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "check that executables have shebangs", "description": "ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "check json", "description": "checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "check-shebang-scripts-are-executable", "name": "check that scripts with shebangs are executable", "description": "ensures that (non-binary) files with a shebang are executable.", "entry": "check-shebang-scripts-are-executable", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "pretty-format-json", "name": "pretty format json", "description": "sets a standard for formatting json files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "check for merge conflicts", "description": "checks for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "check for broken symlinks", "description": "checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "check toml", "description": "checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "check vcs permalinks", "description": "ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "check xml", "description": "checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "check yaml", "description": "checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "debug statements (python)", "description": "checks for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "destroyed-symlinks", "name": "detect destroyed symlinks", "description": "detects symlinks which are changed to regular files with a content of a path which that symlink was pointing to.", "entry": "destroyed-symlinks", "language": "python", "types": ["file"]}, {"id": "detect-aws-credentials", "name": "detect aws credentials", "description": "detects *your* aws credentials from the aws cli credentials file.", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "detect private key", "description": "detects the presence of private keys.", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "fix double quoted strings", "description": "replaces double quoted strings with single quoted strings.", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "fix end of files", "description": "ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "file contents sorter", "description": "sorts the lines in specified files (defaults to alphabetical). you must provide list of target files as input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-byte-order-marker", "name": "fix utf-8 byte order marker", "description": "removes utf-8 byte order marker.", "entry": "fix-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "fix-encoding-pragma", "name": "fix python encoding pragma", "description": "adds # -*- coding: utf-8 -*- to the top of python files.", "language": "python", "entry": "fix-encoding-pragma", "types": ["python"]}, {"id": "forbid-new-submodules", "name": "forbid new submodules", "description": "prevents addition of new git submodules.", "language": "python", "entry": "forbid-new-submodules", "types": ["directory"]}, {"id": "mixed-line-ending", "name": "mixed line ending", "description": "replaces or checks mixed line ending.", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "python tests naming", "description": "verifies that test files are named correctly.", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "requirements-txt-fixer", "name": "fix requirements.txt", "description": "sorts entries in requirements.txt.", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "sort simple yaml files", "description": "sorts simple yaml files which consist only of top-level keys, preserving comments and blocks.", "language": "python", "entry": "sort-simple-yaml", "files": "^$"}, {"id": "trailing-whitespace", "name": "trim trailing whitespace", "description": "trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "poetry-check", "name": "poetry-check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "pass_filenames": false, "files": "^(.*/)?pyproject.toml$"}, {"id": "poetry-lock", "name": "poetry-lock", "description": "run poetry lock to update lock file", "entry": "poetry lock", "language": "python", "pass_filenames": false}, {"id": "poetry-export", "name": "poetry-export", "description": "run poetry export to sync lock file with requirements.txt", "entry": "poetry export", "language": "python", "pass_filenames": false, "files": "^poetry.lock$", "args": ["-f", "requirements.txt", "-o", "requirements.txt"]}]
[{"id": "format_check", "name": "Commit Format Checker", "description": "Validates commit format", "entry": "commit_format_check.sh", "language": "script"}]
[{"id": "stylua", "name": "StyLua", "description": "An opinionated Lua code formatter", "entry": "stylua", "language": "python", "types": ["lua"]}]
[{"id": "rspec", "name": "RSpec Runner", "description": "Runs RSpec against your codebase", "entry": "run-rspec", "language": "ruby", "types": ["ruby"], "pass_filenames": false}]
[{"id": "overlong-py-comment-blocks-check", "name": "overlong python comment blocks pre-commit check", "description": "check that python modules don't contain over-long comment blocks (which e.g. might be commented out code)", "entry": "overlong-py-comment-blocks-check", "language": "python", "types": ["python"]}]
[{"id": "swiftformat", "name": "swiftformat", "description": "Runs swiftformat.", "entry": "swiftformat", "language": "system", "exclude": "^Pods/.*$", "types": ["swift"]}]
[{"id": "check_commit_message", "name": "Check commit message format", "description": "Check commit message format, prefixes.", "entry": "wc_check_commit_message", "language": "python", "stages": ["prepare-commit-msg"]}]
[{"id": "copyright-license-disclaimer", "name": "copyright-license-disclaimer", "entry": "copyright-license-disclaimer --fix-in-place", "language": "python", "types_or": ["dockerfile", "javascript", "less", "markdown", "python", "shell"]}, {"id": "sigoptlint-python", "name": "sigoptlint-python", "entry": "sigoptlint-python", "language": "python", "types": ["python"]}, {"id": "sigoptlint-shell", "name": "sigoptlint-shell", "entry": "sigoptlint-shell", "language": "python", "types": ["shell"]}]
[{"id": "shellcheck", "name": "Shell Check", "description": "Check Shell Syntax on ALL staged files with user friendly messages and colors", "entry": "shell-lint.sh", "language": "script", "types": ["shell"]}]
[{"id": "copyright-year", "name": "copyright-year", "description": "Check the copyright year", "entry": "copyright-year -i", "language": "python", "files": "\\.(py|c|cc|cxx|cpp|frag|glsl|h|hpp|hxx|ih|ispc|ipp|java|js|m|mm|proto|textproto|vert)$", "args": []}]
[{"id": "snyk-container", "name": "Snyk Container", "description": "Runs 'snyk container test' command", "entry": "hooks/snyk-container.sh", "language": "script", "pass_filenames": true, "files": "Dockerfile", "types": ["file", "text"]}, {"id": "snyk-iac", "name": "Snyk IaC", "description": "Runs 'snyk iac test' command", "entry": "hooks/snyk-iac.sh", "language": "script", "pass_filenames": false}, {"id": "snyk-test", "name": "Snyk Test", "description": "Runs 'snyk test' command", "entry": "hooks/snyk-test.sh", "language": "script", "pass_filenames": false}, {"id": "snyk-log4shell", "name": "Snyk log4shell", "description": "Runs 'snyk log4shell' command", "entry": "hooks/snyk-log4shell.sh", "language": "script", "pass_filenames": false}]
[{"id": "validate-schema", "name": "Validate Schema datasets", "description": "Validate Amsterdam Schema dataset files", "entry": "schema batch-validate", "language": "python", "types": ["json"]}, {"id": "validate-publishers", "name": "Validate Schema publishers", "description": "Validate Amsterdam Schema publisher files", "entry": "schema validate-publishers", "language": "python", "exclude": "^.*$", "always_run": true}]
[{"id": "md-toc", "name": "Update markdown table of contents", "description": "Automatically generate and add a table of contents to markdown files", "language": "python", "types": ["markdown"], "entry": "md_toc", "args": ["-p", "github"]}]
[{"id": "dart-format", "name": "dart format", "description": "Runs dart format on all dart files", "entry": "dart format --set-exit-if-changed", "language": "system", "types": ["dart"], "files": "\\.dart$"}]
[{"id": "future", "name": "future", "entry": "futurize", "language": "python", "types": ["python"], "require_serial": false, "additional_dependencies": []}]
[{"id": "prettyson", "name": "prettyson", "description": "A JSON file formatter", "entry": "prettyson", "language": "python", "language_version": "python3", "require_serial": true}]
[{"id": "helm-schema", "description": "Uses helm-schema to create a jsonschema.", "entry": "helm-schema", "files": "^(Chart|values)\\.yaml$", "language": "golang", "name": "Generate jsonschema", "require_serial": true}]
[{"id": "format", "name": "format code", "description": "format solidity code with `forge fmt`", "language": "system", "entry": "forge fmt", "pass_filenames": false}, {"id": "snapshot", "name": "take gas snapshot", "description": "generate gas snapshot report with `forge snapshot`", "language": "system", "entry": "forge snapshot", "pass_filenames": false}]
[{"id": "cljfmt-docker", "name": "Lint Clojure", "description": "Runs cljfmt Docker image to lint clojure files", "language": "docker_image", "types": ["clojure"], "entry": "allisoncasey327/cljfmt:v0.9.1", "args": ["fix"]}]
[{"id": "check-upto-date-with-main", "name": "Check branch is up to date with main", "description": "Pull main and then ensure our branch isn't missing any of those commits", "entry": "run.sh", "language": "script", "always_run": true}]
[{"id": "tfsecurity", "name": "TFSecurity", "description": "TFSecurity is a tool to statically analyze Terraform templates to spot potential security issues.", "language": "golang", "entry": "tfsecurity", "pass_filenames": false}, {"id": "tfsecurity-docker", "name": "TFSecurity Docker", "description": "TFSecurity is a tool to statically analyze Terraform templates to spot potential security issues, uses projects official docker image.", "language": "docker_image", "entry": "khulnasoft/tfsecurity-alpine", "pass_filenames": false}, {"id": "tfsecurity-system", "name": "TFSecurity system", "description": "TFsec is a tool to statically analyze Terraform templates to spot potential security issues, uses systems installed tfsecurity.", "language": "system", "entry": "tfsecurity", "pass_filenames": false}]
[{"id": "circleci_validate", "name": "Validate CircleCI config", "description": "This hook validates CircleCI config", "entry": "circleci_validate.sh", "language": "script", "files": ".circleci/.*.yml", "pass_filenames": false}]
[{"id": "texcleanup", "name": "texcleanup", "description": "Run texcleanup", "minimum_pre_commit_version": "2.1.0", "entry": "texcleanup", "language": "python", "types": ["tex"]}, {"id": "texindent", "name": "texindent", "description": "Run texindent", "minimum_pre_commit_version": "2.1.0", "entry": "texindent", "language": "conda", "types": ["tex"]}]
[{"id": "jhu-check-closing-block-comments", "name": "check for comments at end of blocks", "description": "ensures blocks are properly commented", "entry": "jhu-check-closing-block-comments", "language": "python", "types": ["java"], "stages": ["commit", "push", "manual"]}]
[{"id": "arg-per-line", "name": "Args per line hook", "entry": "bin/hook.sh", "language": "script", "files": "", "args": ["hello", "world"]}]
[{"id": "ansdoc-go", "name": "ansdoc", "description": "Generate documentation for Ansible Roles (via Go binary)", "language": "golang", "entry": "ansdoc", "pass_filenames": false, "types": ["yaml"]}, {"id": "ansdoc-system", "name": "ansdoc", "description": "Generate documentation for Ansible Roles (via locally-installed CLI)", "language": "system", "entry": "ansdoc", "pass_filenames": false, "types": ["yaml"]}, {"id": "ansdoc-docker", "name": "ansdoc", "description": "Generate documentation for Ansible Roles (via Docker build)", "language": "docker", "entry": "ansdoc", "pass_filenames": false, "types": ["yaml"]}]
[{"id": "tox", "name": "tox", "entry": "tox", "language": "python", "types": ["python"], "additional_dependencies": []}]
[{"id": "config-gen", "name": "avocado-config-gen", "description": "run the config generator", "entry": "config-gen", "language": "python", "types_or": ["json", "yaml"], "require_serial": true}]
[{"id": "foo", "name": "foo", "entry": "foo", "always_run": true, "language": "python"}]
[{"id": "lint", "name": "Lint JS & TS", "entry": "eslint", "language": "node", "args": ["--fix"], "additional_dependencies": ["@paulhfischer/prettier-config@1.8.0", "@typescript-eslint/eslint-plugin@5.61.0", "@typescript-eslint/parser@5.61.0", "eslint@8.44.0", "eslint-config-airbnb-base@15.0.0", "eslint-config-airbnb-typescript@17.0.0", "eslint-config-prettier@8.8.0", "eslint-plugin-html@7.1.0", "eslint-plugin-import@2.27.5", "eslint-plugin-jinja2-processor@1.2.0", "eslint-plugin-prettier@4.2.1", "prettier@2.8.8"], "types": ["file"], "files": "\\.(js|ts|html|php)$", "exclude": "(^node_modules|\\.min\\.js$)"}]
[{"id": "yapf", "name": "yapf", "description": "A formatter for Python files.", "entry": "yapf", "args": ["-i", "-vv"], "language": "python", "types": ["python"]}]
[{"id": "clean-sandboxer", "name": "Clean Sandboxer", "description": "Remove unchanged sandboxer template files.", "entry": "sandboxer --clean", "language": "system", "always_run": true, "pass_filenames": false}]
[{"id": "adacore-style-checker", "name": "AdaCore Style Checker", "entry": "style_checker", "language": "python"}]
[{"id": "standard", "name": "standard", "entry": "standard", "language": "node", "files": "\\.jsx?$", "args": [], "additional_dependencies": ["standard@14.3.3", "eslint@6.8.0", "babel-eslint@10.1.0"], "minimum_pre_commit_version": "0.7.0"}]
[{"id": "requirements-txt-sorter", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-sorter", "language": "python", "files": ".*requirements.*\\.txt$"}, {"id": "bind-requirements", "name": "Bind requirements.txt", "description": "Bind versions in requirements.txt", "entry": "bind-requirements", "language": "python", "files": ".*requirements.*\\.txt$"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}]
[{"id": "code-scan-action", "name": "Check Staged Commits for Sensitive Data", "description": "This hook checks if stage commit files have senstive data.", "entry": "code_scan_action", "verbose": true, "require_serial": true, "language": "python", "types": ["file", "text"]}]
[{"id": "check-accounts-drf-version", "name": "check-accounts-drf-version", "entry": "check_version.sh", "language": "script", "pass_filenames": false}]
[{"id": "format", "name": "format code", "description": "format solidity code with `forge fmt`", "language": "system", "entry": "forge fmt", "pass_filenames": true}]
[{"id": "elixir-mix-format", "name": "mix format", "description": "Format Elixir files", "language": "system", "entry": "mix format", "files": "\\.exs?$", "stages": ["commit", "merge-commit", "push", "manual"]}, {"id": "elixir-mix-credo", "name": "mix credo", "description": "Launch credo static code analysis", "language": "system", "entry": "mix credo", "stages": ["commit", "merge-commit", "push", "manual"], "pass_filenames": false}, {"id": "elixir-mix-deps-check-unused", "name": "mix deps.unlock", "description": "Check for unused dependencies", "language": "system", "entry": "mix deps.unlock --check-unused", "stages": ["commit", "merge-commit", "push", "manual"], "pass_filenames": false}, {"id": "elixir-mix-dialyzer", "name": "mix dialyzer", "description": "Launch dialyzer", "language": "system", "entry": "mix dialyzer", "stages": ["commit", "merge-commit", "push", "manual"], "pass_filenames": false}, {"id": "elixir-mix-test", "name": "mix test", "description": "Launch tests", "language": "system", "entry": "mix test", "stages": ["commit", "merge-commit", "push", "manual"], "pass_filenames": false}]
[{"id": "pyspelling-docker", "name": "Pyspelling in docker", "description": "Pyspelling with aspell using Dockerfile of github action, based on https://github.com/rojopolis/spellcheck-github-actions", "entry": "/entrypoint.sh", "language": "docker", "pass_filenames": false}]
[{"id": "not-found-exe", "name": "Not found exe", "entry": "i-dont-exist-lol", "language": "system", "files": ""}]
[{"id": "not-found-exe", "name": "Not found exe", "entry": "i-dont-exist-lol", "language": "system", "files": ""}]
[{"id": "prettier", "name": "prettier", "entry": "Prettier support for pre-commit has been moved to https://github.com/pre-commit/mirrors-prettier, please use the new repository.", "language": "fail", "pass_filenames": false}]
[{"id": "prettier", "name": "prettier", "entry": "Prettier support for pre-commit has been moved to https://github.com/pre-commit/mirrors-prettier, please use the new repository.", "language": "fail", "pass_filenames": false}]
[{"id": "commit-message-validator", "name": "Commit Message Validator", "description": "Checks that commit messages are compliant with Lumapps rules.", "entry": "check_message.sh", "language": "script"}]
[{"id": "cc-template-scanner", "name": "Cloud Conformity Template Scanner", "description": "Scans CloudFormation templates before they're deployed.", "entry": "conformity-scan", "language": "node"}]
[{"id": "git-submodule-sanity-check", "name": "Git submodule sanity check", "description": "Sanity Check on git submodules", "language": "script", "entry": "hooks/submodule-sanity-check.sh"}, {"id": "validate-semantic-version", "name": "Validate content of VERSION is a semantic version", "language": "python", "files": "VERSION", "entry": "validate-semantic-version"}]
[{"id": "ansible-lint", "name": "Ansible-lint", "description": "This hook runs ansible-lint.", "entry": "ansible-lint --force-color", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "yamllint", "name": "yamllint", "description": "This hook runs yamllint.", "entry": "yamllint", "language": "python", "types": ["file", "yaml"]}]
[{"id": "ansible-lint", "name": "Ansible-lint", "description": "This hook runs ansible-lint.", "entry": "ansible-lint --force-color", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "yamllint", "name": "yamllint", "description": "This hook runs yamllint.", "entry": "yamllint", "language": "python", "types": ["file", "yaml"]}]
[{"id": "ansible-lint", "name": "Ansible-lint", "description": "This hook runs ansible-lint.", "entry": "ansible-lint --force-color", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "yamllint", "name": "yamllint", "description": "This hook runs yamllint.", "entry": "yamllint", "language": "python", "types": ["file", "yaml"]}]
[{"id": "docker-hook", "name": "Docker test hook", "entry": "echo", "language": "docker", "files": "\\.txt$"}, {"id": "docker-hook-arg", "name": "Docker test hook", "entry": "echo -n", "language": "docker", "files": "\\.txt$"}, {"id": "docker-hook-failing", "name": "Docker test hook with nonzero exit code", "entry": "bork", "language": "docker", "files": "\\.txt$"}]
[{"id": "arg-per-line", "name": "Args per line hook", "entry": "bin/hook.sh", "language": "script", "files": "", "args": ["hello", "world"]}]
[{"id": "arg-per-line", "name": "Args per line hook", "entry": "bin/hook.sh", "language": "script", "files": "", "args": ["hello", "world"]}]
[{"id": "yapf", "name": "yapf", "description": "A formatter for Python files.", "entry": "yapf", "args": ["-i", "-vv"], "language": "python", "types": ["python"]}]
[{"id": "yapf", "name": "yapf", "description": "A formatter for Python files.", "entry": "yapf", "args": ["-i", "-vv"], "language": "python", "types": ["python"]}]
[{"id": "pipx", "name": "pipx", "entry": "pipx run", "require_serial": true, "language": "python", "minimum_pre_commit_version": "2.9.2"}]
[{"id": "terraform-pre-commit", "name": "terrascan", "description": "Runs terrascan on supported IaC templates.", "language": "script", "entry": "scripts/pre-commit-hook.sh"}]
[{"id": "nbdev_clean", "name": "nbdev_clean", "entry": "nbdev_clean", "description": "Clean metadata from notebooks to avoid merge conflicts", "language": "python", "always_run": true, "pass_filenames": false}, {"id": "nbdev_export", "name": "nbdev_export", "entry": "nbdev_export", "description": "Export notebooks to modules and build modidx", "language": "python", "always_run": true, "pass_filenames": false}]
[{"id": "prints_cwd", "name": "Prints Cwd", "entry": "pwd", "language": "system", "files": "\\.sh$"}]
[{"id": "yamllint", "name": "yamllint", "description": "This hook runs yamllint.", "entry": "yamllint", "language": "python", "types": ["file", "yaml"]}]
[{"id": "cfn-nag", "name": "stelligent CFN_NAG", "description": "Looks for patterns in CloudFormation templates that may indicate insecure infrastructure.", "entry": "cfn_nag_scan --input-path", "language": "ruby", "files": "\\.(json|ya?ml|template)$"}]
[{"id": "pylama", "name": "pylama", "description": "This hook runs pylama.", "entry": "pylama", "language": "python", "types": ["file", "python"], "args": [], "additional_dependencies": []}]
[{"id": "doc8", "name": "doc8", "description": "This hook runs doc8 for linting docs", "entry": "python -m doc8", "language": "python", "files": "\\.rst$", "require_serial": true}]
[{"id": "dotenv-linter", "name": "dotenv-linter", "entry": "dotenv-linter", "language": "python", "types": ["text"], "files": "\\.env*"}]
[{"id": "unimport", "name": "unimport", "description": "\ud83d\ude80 The ultimate linter and formatter for removing unused import statements in your code.", "entry": "unimport", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "vint", "name": "Vint Vim script linting", "description": "Lints all vim files", "language": "python", "entry": "vint", "types": ["vim"]}]
[{"id": "sqlvalidator", "name": "sqlvalidator", "description": "Validate SQL snippets inside Python code.", "entry": "sqlvalidator --format", "language": "python", "types": ["python"]}]
[{"id": "check-autopkg-recipe-list", "name": "Check AutoPkg Recipe List", "description": "This hook checks AutoPkg recipe lists (in txt, plist, yaml, or json format) for common issues.", "entry": "check-autopkg-recipe-list", "language": "python", "files": "recipe.?list\\.(plist|yaml|yml|json|txt)$", "types": ["text"]}, {"id": "check-autopkg-recipes", "name": "Check AutoPkg Recipes", "description": "This hook checks AutoPkg recipes to ensure they contain required top-level keys.", "entry": "check-autopkg-recipes", "language": "python", "files": "\\.recipe(\\.plist|\\.yaml|\\.json)?$", "types": ["text"]}, {"id": "check-git-config-email", "name": "Check Git Config Email", "description": "This hook checks to ensure the Git config email matches one of the specified domains.", "entry": "check-git-config-email", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "check-jamf-extension-attributes", "name": "Check Jamf EAs", "description": "This hook checks Jamf extension attributes for common issues.", "entry": "check-jamf-extension-attributes", "language": "python", "files": "(jamf|jss)/extension.?attributes/.*\\.(sh|bash|py|rb|js|pl)$", "types": ["text"]}, {"id": "check-jamf-profiles", "name": "Check Jamf Profiles", "description": "This hook checks Jamf profiles for common issues.", "entry": "check-jamf-profiles", "language": "python", "files": "(jamf|jss)/profiles/.*\\.(mobileconfig|plist)$", "types": ["text"]}, {"id": "check-jamf-scripts", "name": "Check Jamf Scripts", "description": "This hook checks Jamf scripts for common issues.", "entry": "check-jamf-scripts", "language": "python", "files": "(jamf|jss)/scripts/.*\\.(sh|bash|py|rb|js|pl)$", "types": ["text"]}, {"id": "check-munki-pkgsinfo", "name": "Check Munki Pkginfo Files", "description": "This hook checks Munki pkginfo files to ensure they are valid.", "entry": "check-munki-pkgsinfo", "language": "python", "files": "pkgsinfo/", "types": ["text"]}, {"id": "check-munkiadmin-scripts", "name": "Check MunkiAdmin Scripts", "description": "This hook ensures MunkiAdmin scripts are executable.", "entry": "check-munkiadmin-scripts", "language": "python", "files": "^MunkiAdmin/scripts/", "types": ["text"]}, {"id": "check-munkipkg-buildinfo", "name": "Check MunkiPkg Build-Info Files", "description": "This hook checks MunkiPkg build-info files to ensure they are valid.", "entry": "check-munkipkg-buildinfo", "language": "python", "files": "build-info\\.(plist|yml|yaml|json)$", "types": ["text"]}, {"id": "check-outset-scripts", "name": "Check Outset Scripts", "description": "This hook checks Outset scripts to ensure they're executable.", "entry": "check-outset-scripts", "language": "python", "files": "usr/local/outset/(boot-once|boot-every|login-once|login-every|login-privileged-once|login-privileged-every|on-demand)/", "types": ["text"]}, {"id": "check-plists", "name": "Check Plists", "description": "This hook checks XML property list (plist) files for basic syntax errors.", "entry": "check-plists", "language": "python", "files": "\\.(plist|recipe|mobileconfig|pkginfo)$", "types": ["text"]}, {"id": "check-preference-manifests", "name": "Check Apple Preference Manifests", "description": "This hook checks preference manifest plists for inconsistencies and common issues.", "entry": "check-preference-manifests", "language": "python", "files": "\\.plist$", "types": ["text"]}, {"id": "forbid-autopkg-overrides", "name": "Forbid AutoPkg Overrides", "description": "This hook prevents AutoPkg overrides from being added to the repo.", "entry": "forbid-autopkg-overrides", "language": "python", "files": "\\.recipe(\\.plist|\\.yaml|\\.json)?$", "types": ["text"]}, {"id": "forbid-autopkg-trust-info", "name": "Forbid AutoPkg Trust Info", "description": "This hook prevents AutoPkg recipes with trust info from being added to the repo.", "entry": "forbid-autopkg-trust-info", "language": "python", "files": "\\.recipe(\\.plist|\\.yaml|\\.json)?$", "types": ["text"]}, {"id": "munki-makecatalogs", "name": "Run Munki Makecatalogs", "description": "This hook runs the \"makecatalogs\" command to ensure all referenced packages are present and catalogs are up to date.", "entry": "munki-makecatalogs", "language": "python", "pass_filenames": false, "always_run": true}]
[{"id": "ansible-syntax-check", "name": "Syntax check Ansible playbooks", "description": "Check Ansible playbooks for syntax errors.", "language": "python", "entry": "ansible-playbook", "files": "playbook\\.yml", "types": ["yaml"], "args": ["--inventory=localhost,", "--syntax-check"]}]
[{"id": "flakehell", "name": "flakehell", "description": "`flakehell` is a `flake8` wrapper to make a nice, legacy-friendly, configurable command-line utility for enforcing style consistency across Python projects.", "entry": "flakehell lint", "language": "python", "types": ["file", "text"], "files": "\\.(ipynb|md|py|rst|yaml|yml)$", "require_serial": true}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format", "entry": "hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files", "entry": "hooks/terraform-validate.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "packer-validate", "name": "Packer validate", "description": "Validates all Packer configuration files", "entry": "hooks/packer-validate.sh", "language": "script", "files": "(\\.pkr\\.(hcl|json)|\\.pkrvars\\.hcl)$", "require_serial": true}, {"id": "tflint", "name": "tflint", "description": "Linter for Terraform source code", "entry": "hooks/tflint.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "terragrunt-hclfmt", "name": "Terragrunt hclfmt", "description": "Rewrites all Terragrunt configuration files to a canonical format", "entry": "hooks/terragrunt-hclfmt.sh", "language": "script", "files": "\\.hcl$", "exclude": "(?x)^(\n  .+\\.terraform\\/.*$|\n  .+\\.terragrunt-cache\\/.*$|\n)$\n"}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "hooks/shellcheck.sh", "language": "script"}, {"id": "gofmt", "name": "gofmt", "description": "Gofmt formats Go programs", "entry": "hooks/gofmt.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "goimports", "name": "goimports", "description": "Goimports updates imports and formats in the same style as gofmt", "entry": "hooks/goimports.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golint", "name": "golint", "description": "Golint is a linter for Go source code", "entry": "hooks/golint.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golangci-lint", "name": "golangci-lint", "description": "golangci-lint is a Go linters aggregator", "entry": "hooks/golangci-lint.sh", "language": "script", "files": "\\.go$", "require_serial": true}, {"id": "yapf", "name": "yapf", "description": "yapf (Yet Another Python Formatter) is a python formatter from Google", "entry": "hooks/yapf.sh", "language": "script", "files": "\\.py$", "exclude": "(?x)^(\n  \\.tox\\/.*$|\n  __pycache__\\/.*$\n)$\n"}, {"id": "helmlint", "name": "helmlint", "description": "Run helm lint, a linter for helm charts", "entry": "hooks/helmlint.sh", "language": "script", "files": "\\.((ya?ml)|(tpl))$", "require_serial": true}, {"id": "markdown-link-check", "name": "markdown-link-check", "description": "Run markdown-link-check to check all the relative and absolute links in markdown docs.", "entry": "hooks/mdlink-check.sh", "language": "script", "files": "\\.md$", "exclude": "vendor\\/.*$"}, {"id": "check-terratest-skip-env", "name": "check-terratest-skip-env", "description": "Check all go source files for any uncommented os.Setenv calls setting a terratest SKIP environment.", "entry": "./hooks/check_skip_env.py", "language": "script", "files": "\\.go$"}, {"id": "sentinel-fmt", "name": "Sentinel fmt", "description": "Rewrites all Sentinel configuration files to a canonical format", "entry": "hooks/sentinel-fmt.sh", "language": "script", "files": "\\.sentinel$", "require_serial": true}]
[{"id": "commitizen", "name": "commitizen check", "description": "Check whether the current commit message follows commiting rules. Allow empty commit messages by default, because they typically indicate to Git that the commit should be aborted.\n", "entry": "cz check", "args": ["--allow-abort", "--commit-msg-file"], "stages": ["commit-msg"], "language": "python", "language_version": "python3", "minimum_pre_commit_version": "1.4.3"}, {"id": "commitizen-branch", "name": "commitizen check branch", "description": "Check all commit messages that are already on the current branch but not the default branch on the origin repository. Useful for checking messages after the fact (e.g., pre-push or in CI) without an expensive check of the entire repository history.\n", "entry": "cz check", "args": ["--rev-range", "origin/HEAD..HEAD"], "always_run": true, "pass_filenames": false, "language": "python", "language_version": "python3", "minimum_pre_commit_version": "1.4.3"}]
[{"id": "sbt-fatal-warnings", "name": "Scala fatal warnings", "stages": ["commit", "push"], "language": "python_venv", "entry": "sbt-fatal-warnings", "pass_filenames": false, "always_run": true, "minimum_pre_commit_version": "0.19.0"}, {"id": "sbt-unused-imports", "name": "Scala unused imports (+ fatal warnings)", "stages": ["commit", "push"], "language": "python_venv", "entry": "sbt-fatal-warnings --add_arg='-Ywarn-unused-import'", "pass_filenames": false, "always_run": true, "minimum_pre_commit_version": "0.19.0"}, {"id": "sbt-scalafmt", "name": "scalafmt formatting check", "stages": ["commit", "push"], "language": "python_venv", "entry": "scalafmt", "pass_filenames": false, "always_run": true, "minimum_pre_commit_version": "0.19.0"}, {"id": "sbt-wartremover", "name": "Scala WartRemover plugin check", "language": "python_venv", "stages": ["commit", "push"], "entry": "sbt-wartremover", "pass_filenames": false, "always_run": true, "minimum_pre_commit_version": "0.19.0"}]
[{"id": "generate-toc", "name": "Generate ADR TOC", "description": "Generates a table of contents based on architecture decision register items", "language": "python", "entry": "pyadr toc --no-interaction", "files": "\\d{4}-.*\\.md$", "pass_filenames": false}, {"id": "check-adr", "name": "Check repository ADR", "description": "Perform sanity checks typically required on ADR files before merging a Pull Request", "language": "python", "entry": "pyadr check-adr-repo --no-interaction", "files": "\\d{4}-.*\\.md$", "pass_filenames": false}]
[{"id": "pyproject-fmt", "name": "pyproject-fmt", "description": "apply a consistent format to `pyproject.toml` files", "entry": "pyproject-fmt", "language": "python", "language_version": "python3", "files": "(^|/)pyproject\\.toml$", "types": ["file", "text", "toml"]}]
[{"id": "shared-hooks", "name": "shared-hooks", "language": "script", "entry": "./run-shared-hooks", "verbose": true}]
[{"id": "stylus-supremacy", "name": "Stylus Supremacy", "description": "Format Stylus files", "language": "node", "types": ["stylus"], "additional_dependencies": ["stylus-supremacy@2.17.5"], "entry": "stylus-supremacy format --replace"}]
[{"id": "python-safety-dependencies-check", "name": "safety", "description": "Analyze your Python requirements for known security vulnerabilities", "entry": "safety_check", "language": "python", "files": "pyproject\\.toml|requirements"}]
[{"id": "cargo-spellcheck", "name": "cargo-spellcheck", "description": "Spellcheck rust files", "entry": "cargo-spellcheck", "language": "rust", "types": ["rust"], "args": ["--code=99", "--"]}]
[{"id": "install-commit-msg", "name": "install-commit-msg", "entry": "install-commit-msg", "verbose": true, "language": "python", "pass_filenames": false, "stages": ["manual"]}, {"id": "check-release-notes", "name": "check-release-notes", "entry": "check-release-notes", "verbose": true, "language": "python", "pass_filenames": true}, {"id": "tox-black", "name": "tox-black", "entry": "tox -e black", "always_run": true, "verbose": true, "pass_filenames": false, "language": "system"}, {"id": "tox-cover", "name": "tox-cover", "entry": "tox -e cover", "always_run": true, "verbose": true, "pass_filenames": false, "language": "system"}, {"id": "tox-flake8", "name": "tox-flake8", "entry": "tox -e flake8", "always_run": true, "verbose": true, "pass_filenames": false, "language": "system"}, {"id": "tox-pylint", "name": "tox-pylint", "entry": "tox -e pylint", "always_run": true, "verbose": true, "pass_filenames": false, "language": "system"}, {"id": "tox-safety", "name": "tox-safety", "entry": "tox -e safety", "always_run": true, "verbose": true, "pass_filenames": false, "language": "system"}]
[{"id": "bellybutton", "name": "bellybutton", "description": "bellybutton is a customizable, easy-to-configure linting engine for Python.", "entry": "bellybutton lint", "pass_filenames": false, "language": "python", "types": ["python"]}]
[{"id": "tsclint", "name": "tsclint", "entry": "node_modules/.bin/tsc", "language": "node", "files": "\\.ts$", "args": []}]
[{"id": "tslint", "name": "tslint", "entry": "tslint", "language": "node", "files": "\\.ts$", "args": [], "additional_dependencies": ["tslint@5.11.0"], "minimum_pre_commit_version": "0.7.0"}]
[{"id": "black-nb", "name": "black-nb", "entry": "black-nb", "language": "python", "language_version": "python3", "files": "\\.ipynb$"}]
[{"id": "ksconf-check", "name": "Ksconf Splunk CONF - Check syntax", "description": "Check that all .conf files are syntactically valid", "entry": "ksconf check -q", "language": "python", "files": "(\\.conf|(local|default)\\.meta)$"}, {"id": "ksconf-sort", "name": "Ksconf Splunk CONF - Sort conf files", "description": "Sort all stanzas and keys in .conf files.  Files can be skipped by adding a comment with KSCONF-NO-SORT", "entry": "ksconf sort -i -q", "language": "python", "files": "(\\.conf|(local|default)\\.meta)$"}, {"id": "ksconf-xml-format", "name": "Ksconf Splunk CONF - Normalize XML", "description": "Normalize and apply consistent XML indentation and CDATA usage for XML dashboards and navigation files.", "entry": "ksconf xml-format -q", "language": "python", "files": "data/ui/(views|nav)/[^/]+\\.xml$"}]
[{"id": "rubocop", "name": "Check Ruby style with rubocop", "description": "Enforce Ruby style guide with rubocop", "entry": "bin/rubocop-wrapper.sh", "language": "script", "pass_filenames": true, "types": ["ruby"]}, {"id": "rspec", "name": "Unit test Ruby code with rspec", "description": "Run rspec in changed paths with spec directories", "entry": "bin/rspec-wrapper.rb", "language": "script", "pass_filenames": true, "types": ["ruby"]}, {"id": "foodcritic", "name": "Enforce Chef style guide with foodcritic", "description": "Enforce Chef style guide with foodcritic", "entry": "bin/foodcritic-wrapper.rb", "language": "script", "pass_filenames": true, "types": ["file"], "files": "(?x)^(\n    .*/(recipes|attributes|resources|providers)/.*\\.rb|\n    .*/metadata\\.rb\n)$\n", "exclude": ".*/test/.*\\.rb$"}, {"id": "cookstyle", "name": "Enforce Chef style guide with cookstyle", "description": "Enforce Chef style guide with cookstyle", "entry": "bin/cookstyle-wrapper.rb", "language": "script", "pass_filenames": true, "types": ["ruby"], "require_serial": true}, {"id": "chef-cookbook-version", "name": "Ensure Chef cookbook version bump", "description": "Ensure Chef cookbook versions are bumped when contents are changed", "entry": "bin/cookbook-wrapper.rb", "language": "script", "pass_filenames": true, "types": ["file"]}]
[{"id": "shellcheck", "name": "shellcheck", "description": "Test shell scripts with shellcheck", "entry": "shellcheck", "language": "python", "types": ["shell"], "require_serial": true}]
[{"id": "bazel-buildifier", "name": "bazel buildifier", "description": "format Bazel files with buildifier", "entry": "buildifier", "language": "python", "types": ["bazel"]}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format", "entry": "hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "pipeline-generator", "name": "pipeline-generator", "description": "Generate ci config automatically.", "entry": "hooks/pipeline-generator.sh", "language": "script", "pass_filenames": false}]
[{"id": "chartpress", "name": "chartpress --reset", "files": "(Chart|chartpress|values).ya?ml", "description": "Run `chartpress --reset` to clean up helm charts before committing.", "entry": "chartpress --reset", "language": "python", "pass_filenames": false}]
[{"id": "prepend-jira-issue", "name": "Prepend Jira Issue", "entry": "prepend_jira_issue", "language": "python", "description": "This hook prepends a Jira issue to a commit message", "always_run": true, "stages": ["commit-msg"]}]
[{"id": "helm-docs", "args": [], "description": "Uses 'helm-docs' to create documentation from the Helm chart's 'values.yaml' file, and inserts the result into a corresponding 'README.md' file.", "entry": "git-hook/helm-docs", "files": "(README\\.md\\.gotmpl|(Chart|requirements|values)\\.yaml)$", "language": "script", "name": "Helm Docs", "require_serial": true}, {"id": "chart-lint", "args": [], "description": "Uses 'chart-lint' to to run static-analysis on your charts.", "entry": "git-hook/chart-lint", "language": "script", "name": "Chart Lint", "require_serial": true}]
[{"id": "mend-io-sca", "name": "Mend.io SCA Scan", "description": "Runs Mend.io SCA Scan on each commit", "entry": "hooks/mend-io-sca.sh", "language": "script", "require_serial": true, "always_run": true}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "encryption-check", "name": "Ansible Vault Encryption Check", "description": "Checks that vault files are encrypted", "entry": "encryption-check.sh", "files": "((?:^|\\/)vault|vault\\.ya?ml$|\\.vault$)", "language": "script"}]
[{"id": "Flake8-pyproject", "name": "Flake8-pyproject", "description": "Runs Flake8 with configuration from pyproject.toml.", "entry": "flake8p", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "snippet-fmt", "name": "snippet-fmt", "entry": "snippet-fmt", "language": "python", "types_or": ["rst"], "require_serial": false, "args": ["--verbose", "--diff"], "additional_dependencies": []}]
[{"id": "swift-lint", "name": "swift lint", "entry": "run-swift-lint.sh", "files": "\\.swift$", "language": "script", "description": "Lint swift files. Runs `swift-lint`, requires swift and swiftlint"}, {"id": "swift-format", "name": "swift format", "entry": "run-swift-format.sh", "files": "\\.swift$", "language": "script", "description": "Format swift files. Runs `swift-format`, requires swift and swiftformat"}]
[{"id": "phpstan-analyze", "name": "phpstan-analyze", "description": "Run phpstan analyze with the 8 level as default", "entry": "./phpstan-analyze.sh", "args": ["--level 8"], "language": "script", "types": ["php"], "files": "\\.php$"}]
[{"id": "popie", "name": "popie", "description": "A tool for string extraction in pumpkin.py repositories", "entry": "popie", "language": "python", "types_or": ["python"]}]
[{"id": "gomarkdoc", "name": "gomarkdoc", "entry": "run-gomarkdoc.sh", "files": "\\.go$", "language": "script", "description": "Runs `gormakdoc`, requires golang"}]
[{"id": "salt-lint", "name": "Salt-lint", "description": "This hook runs salt-lint.", "entry": "salt-lint", "language": "python", "files": "\\.(sls)$"}]
[{"id": "gitlab-ci-local", "name": "Execute gitlab-ci-local", "description": "This hook executes gitlab-ci-local", "entry": "gitlab-ci-local", "language": "node", "additional_dependencies": ["gitlab-ci-local"], "always_run": true, "pass_filenames": false, "require_serial": true}]
[{"id": "generate_owners", "name": "Generate CODEOWNERS", "language": "python", "entry": "generate_codeowners.py"}]
[{"id": "tslint", "name": "tslint", "entry": "tslint", "language": "node", "files": "\\.(ts|tsx)$", "args": [], "minimum_pre_commit_version": "0.12.0"}]
[{"id": "check-message", "name": "check commit message", "description": "requiring commit message to match regex", "entry": "env IS_PRE_COMMIT=1 commit-check", "args": ["--message"], "pass_filenames": false, "language": "python", "stages": ["commit-msg", "commit"]}, {"id": "check-branch", "name": "check branch naming", "description": "requiring branch naming to match regex", "entry": "commit-check", "args": ["--branch"], "pass_filenames": false, "language": "python"}, {"id": "check-author-name", "name": "check committer name", "description": "requiring committer name to match regex", "entry": "commit-check", "args": ["--author-name"], "pass_filenames": false, "language": "python"}, {"id": "check-author-email", "name": "check committer email", "description": "requiring committer email to match regex", "entry": "commit-check", "args": ["--author-email"], "pass_filenames": false, "language": "python"}]
[{"id": "terraform_fmt", "name": "terraform_fmt", "description": "Formats terraform scripts into the correct checkstyle", "entry": "bin/tf_fmt.sh", "language": "script", "types": ["terraform"], "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "terraform_validate", "description": "Validates terraform scripts syntax", "entry": "bin/tf_validate.sh", "language": "script", "types": ["terraform"], "exclude": "\\.terraform\\/.*$"}, {"id": "prometheus_check_rules", "name": "prometheus_check_rules", "description": "Validates prometheus rules", "entry": "bin/prom_rules.sh", "language": "script", "files": "\\.rules$"}, {"id": "prometheus_check_config", "name": "prometheus_check_config", "description": "Validates prometheus configuration", "entry": "bin/prom_config.sh", "language": "script", "files": "prometheus.yml$"}]
[{"id": "indents-to-tabs", "name": "Indents to tabs", "description": "Replace spaces with tabs in indents", "entry": "indents-to-tabs", "language": "python", "types": ["text"]}]
[{"id": "php-lint-all", "name": "PHP Syntax Check (Comprehensive)", "description": "Check PHP Syntax on ALL PHP staged files with user friendly messages and colors", "entry": "/pre_commit_hooks/php-lint.sh", "language": "docker", "files": "\\.php$", "args": ["-s all"]}, {"id": "php-lint", "name": "PHP Syntax Check (Quick)", "description": "Runs php -l on all staged files. Exits when it hits the first errored file", "entry": "php -l", "language": "docker", "files": "\\.php$"}, {"id": "php-unit", "name": "PHP Unit", "description": "Run the full php unit test. Checks which PHPUnit executable is available first and then runs it. Preference order is vendor/bin, phpunit and phpunit.phar.", "entry": "/pre_commit_hooks/php-unit.sh", "language": "docker", "files": "\\.php$"}, {"id": "php-cs", "name": "PHP Codesniffer", "description": "Run php codesniffer against all staged files.", "entry": "/pre_commit_hooks/php-cs.sh", "language": "docker", "files": "\\.php$"}, {"id": "php-cbf", "name": "PHP Codesniffer (Code Beutifier and Formatter)", "description": "Run php codesniffer against all staged files.", "entry": "/pre_commit_hooks/php-cbf.sh", "language": "docker", "files": "\\.php$"}, {"id": "php-cs-fixer", "name": "PHP Coding Standards Fixer", "description": "Run php coding standards fixer against all staged files.", "entry": "/pre_commit_hooks/php-cs-fixer.sh", "language": "docker", "files": "\\.php$"}, {"id": "php-md", "name": "PHP Mess Detector", "description": "Examine code for potential problems.", "entry": "/pre_commit_hooks/php-md.sh", "language": "docker", "files": "\\.php$"}, {"id": "php-cpd", "name": "PHP Copy Paste Detector", "description": "Examine code for duplicate code and reject if found", "entry": "/pre_commit_hooks/php-cpd.sh", "language": "docker", "files": "\\.php$"}, {"id": "only-branch-pushes", "name": "only branch pushes", "description": "prevent pushes to a list of forbidden branches", "entry": "pre_commit_hooks/only-branch-pushes.sh", "language": "script", "files": ""}, {"id": "cake-php-unit", "name": "CakePHP Unit Tests", "entry": "pre_commit_hooks/cake-php-unit.sh", "language": "script", "files": ""}]
[{"id": "stdout-stderr", "name": "stdout-stderr", "language": "script", "entry": "./stdout-stderr-entry"}, {"id": "tty-check", "name": "tty-check", "language": "script", "entry": "./tty-check-entry"}]
[{"id": "check-recipes", "name": "Check workflows recipes", "description": "Ensure recipes designed to work with python-workflows are compliant", "entry": "workflows.validate_recipe", "language": "python", "types": ["json"]}]
[{"id": "generate-images-list", "args": [], "description": "Generate list of images used in the chart", "entry": "src/generate-image-list.sh", "files": "((Chart|values)\\.yaml)$", "language": "script", "name": "Generate Images List", "require_serial": true}]
[{"id": "bump-semver", "name": "bump-semver", "description": "Automatically bumps version", "entry": "b8y version semver", "language": "python", "always_run": true}]
[{"id": "check-conventional-commits", "name": "check for conventional-commits", "description": "check about that commit message is based on conventional-commits", "entry": "check-conventional-commits", "language": "python", "stages": ["commit-msg"]}]
[{"id": "fix-future-annotations", "name": "fix-future-annotations", "description": "Upgrade the typing annotations syntax to PEP 585 and PEP 604.", "entry": "fix-future-annotations", "language": "python", "types": ["python"]}]
[{"id": "dotnet-sonarscanner", "name": "Run dotnet sonarscanner for SonarQube", "description": "Analyze .NET code on SonarCloud or SonarQube server", "entry": "main", "language": "python", "types": ["python"]}]
[{"id": "conventional-commit-check", "name": "Conventional Commit Check", "entry": "run-conventional-commit-check.sh", "language": "script", "description": "Checks that your 'git commit' matches the 'Conventional Commits' standard", "always_run": true}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format", "entry": "hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files", "entry": "hooks/terraform-validate.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "tflint", "name": "tflint", "description": "Linter for Terraform source code", "entry": "hooks/tflint.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "terragrunt-fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format", "entry": "hooks/terragrunt-hclfmt.sh", "language": "script", "files": "\\.hcl", "exclude": "\\.+.terragrunt-cache\\/.*$"}, {"id": "terragrunt-validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files", "entry": "hooks/terragrunt-validate.sh", "language": "script", "files": "\\.hcl$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "hooks/shellcheck.sh", "language": "script"}, {"id": "dockerfiles", "name": "Hadolint runner", "description": "Runs Hadolint fo check for Dockerfile best practices", "entry": "hadolint/hadolint hadolint", "language": "docker_image", "files": "Dockerfile.*$"}]
[{"id": "bannedk8skinds", "name": "bannedk8skinds", "description": "Disallows commit of Kubernetes YAML files containing specific kinds.", "entry": "bannedk8skinds", "language": "python", "always_run": true, "types": ["yaml"]}, {"id": "disallowunquoted", "name": "disallowunquoted", "description": "Disallows the use of certain YAML values unless quoted.", "entry": "disallowunquoted", "language": "python", "always_run": true, "types": ["yaml"]}, {"id": "valueregex", "name": "valueregex", "description": "Disallows the use of certain YAML values based on a regex.", "entry": "valueregex", "language": "python", "always_run": false, "types": ["yaml"]}]
[{"id": "codelimit", "name": "codelimit", "description": "CodeLimit: Your Refactoring Alarm", "verbose": true, "entry": "codelimit check --quiet", "require_serial": true, "language": "python", "types": ["file", "python"]}]
[{"id": "check-migrations-created", "name": "Check migrations created", "entry": "check-migrations-created", "files": ".*/models.py$", "language": "python", "language_version": "python3", "pass_filenames": false}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "renovate-helm-releases", "name": "Renovate Helm Releases", "description": "Update comments for running Renovate for Helm Releases.", "entry": "renovate-helm-releases --cluster-path", "pass_filenames": false, "language": "python", "files": "^[^.].*\\.yaml$"}]
[{"id": "rust-fmt", "name": "format rust", "description": "Format files with cargo fmt.", "entry": "cargo fmt", "language": "system", "types": ["rust"], "args": ["--"]}, {"id": "rust-check", "name": "check rust", "description": "Check the package for errors.", "entry": "cargo check", "args": ["--all-targets", "--all-features", "--workspace", "--", "-D", "warnings"], "language": "system", "types": ["file"], "files": "\\.(rs|toml|md)$|Cargo.lock$", "pass_filenames": false}, {"id": "rust-clippy", "name": "check rust clippy", "description": "Lint rust sources", "entry": "cargo clippy", "language": "system", "args": ["--all-targets", "--all-features", "--workspace", "--", "-D", "warnings"], "types": ["file"], "files": "\\.(rs|toml|md)$|Cargo.lock$", "pass_filenames": false}, {"id": "rust-doc", "name": "rust docs", "description": "Build the documentation", "entry": "env RUSTDOCFLAGS='--cfg docsrs -D warnings' cargo doc", "args": ["--no-deps", "--all-features", "--workspace"], "types": ["file"], "files": "\\.(rs|toml|md)$|Cargo.lock$", "language": "system", "pass_filenames": false}, {"id": "rust-hack", "name": "check all features", "description": "Use cargo-hack to check all features with clippy", "entry": "cargo hack", "args": ["--feature-powerset", "--workspace", "check"], "types": ["file"], "files": "\\.(rs|toml|md)$|Cargo.lock$", "language": "system", "pass_filenames": false}, {"id": "rust-sqlx", "name": "check sqlx queries", "description": "Check that the sqlx queries are up to date", "entry": "cargo sqlx", "args": ["prepare", "--check"], "types": ["file"], "files": "\\.(rs|toml|md|sql)$|Cargo.lock$", "language": "system", "pass_filenames": false}, {"id": "rust-test", "name": "test rust", "description": "Run the project test suite", "entry": "cargo test", "args": ["--all-targets", "--all-features", "--workspace"], "types": ["file"], "files": "\\.(rs|toml|md|sql)$|Cargo.lock$", "language": "system", "pass_filenames": false}, {"id": "rust-test-doc", "name": "test rust doc", "description": "Run the project test suite", "entry": "cargo test --doc", "args": ["--all-features", "--workspace"], "types": ["file"], "files": "\\.(rs|toml|md|sql)$|Cargo.lock$", "language": "system", "pass_filenames": false}, {"id": "rust-build", "name": "build rust", "description": "Build the project", "entry": "cargo build", "args": ["--all-features", "--all-targets", "--workspace"], "types": ["file"], "files": "\\.(rs|toml|md|sql)$|Cargo.lock$", "language": "system", "pass_filenames": false}, {"id": "php-cs-fixer", "name": "format php", "description": "Fix PHP Code Standard", "entry": "vendor/bin/php-cs-fixer fix", "language": "system", "types": ["php"], "pass_filenames": true}, {"id": "php-stan", "name": "check php", "description": "PHP Static Analysis", "entry": "vendor/bin/phpstan analyse", "language": "system", "types": ["php"], "pass_filenames": true}, {"id": "nix-flake-check", "name": "check nix flake", "description": "Check the flake.nix file for errors", "entry": "nix flake check", "language": "system", "files": "^(flake\\.lock|.*\\.nix)$", "types": ["file"], "pass_filenames": false}, {"id": "nix-nixpkgs-fmt", "name": "format nix nixpkgs-fmt", "description": "Format nix package with nixpkgs-fmt", "entry": "nixpkgs-fmt", "language": "system", "types": ["nix"], "pass_filenames": true}, {"id": "nix-nixfmt", "name": "format nix nixfmt", "description": "Format nix package with nixfmt", "entry": "nixfmt --check", "language": "system", "types": ["nix"], "pass_filenames": true}, {"id": "nix-alejandra", "name": "format nix alejandra", "description": "Format nix package with alejandra", "entry": "alejandra", "language": "system", "types": ["nix"], "pass_filenames": true}, {"id": "nix-statix", "name": "check nix statix", "description": "Link nix code with statix", "entry": "statix check", "language": "system", "types": ["nix"], "pass_filenames": false}, {"id": "nix-build", "name": "nix build", "description": "Build the package with nix", "entry": "nix build", "language": "system", "pass_filenames": false}, {"id": "js-yarn-run", "name": "yarn run", "description": "Run a custom Yarn command", "entry": "yarn", "language": "system", "types_or": ["javascript", "jsx", "ts", "tsx", "json"], "pass_filenames": true}, {"id": "js-yarn-run-filenames", "name": "yarn run with filenames", "description": "Run a custom Yarn command, passing the filenames", "entry": "yarn", "language": "system", "types_or": ["javascript", "jsx", "ts", "tsx", "json"], "pass_filenames": true}, {"id": "lua-stylua", "name": "format lua", "description": "Format Lua files with Stylua", "entry": "stylua", "types": ["lua"], "language": "system", "pass_filenames": true}]
[{"id": "mix-format-check", "name": "mix format", "description": "Formats Elixir files with mix format.", "language": "system", "entry": "mix format --check-formatted", "files": "\\.exs?$"}, {"id": "mix-credo", "name": "mix credo", "description": "Analyses Elixir files with mix credo", "language": "system", "entry": "mix credo --strict", "files": "\\.exs?$"}]
[{"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "hooks/terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "hooks/terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "hooks/terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "entry": "hooks/terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "entry": "hooks/terraform_tfsec.sh", "language": "script"}, {"id": "checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "terrascan", "name": "terrascan", "description": "Runs terrascan on Terraform templates.", "language": "script", "entry": "hooks/terrascan.sh"}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "hooks/shellcheck.sh", "language": "script"}, {"id": "helmlint", "name": "helmlint", "description": "Run helm lint, a linter for helm charts", "entry": "hooks/helmlint.sh", "language": "script", "files": "\\.((ya?ml)|(tpl))$", "require_serial": true}, {"id": "markdown-link-check", "name": "markdown-link-check", "description": "Run markdown-link-check to check all the relative and absolute links in markdown docs.", "entry": "hooks/mdlink-check.sh", "language": "script", "files": "\\.md$", "exclude": "vendor\\/.*$"}]
[{"id": "copyright", "name": "check copyright year", "entry": "copyright-check", "language": "python", "types": ["text"]}, {"id": "copyright-required", "name": "check copyright year", "entry": "copyright-check", "args": ["--required"], "language": "python", "types": ["text"]}, {"id": "workflows-require-timeout", "name": "workflows require timeout", "description": "Check that the workflows have a timeout", "entry": "workflow-timeout-check", "files": "^\\.github/workflows/.+\\.ya?ml$", "language": "python"}, {"id": "poetry-check", "name": "poetry check", "description": "Validates the structure of the pyproject.toml file", "entry": "run-in-dir --cmd poetry check", "args": ["--files"], "language": "python", "additional_dependencies": ["poetry"], "files": "^(|.*/)pyproject\\.toml$"}, {"id": "poetry-lock", "name": "poetry lock", "description": "Lock the from the pyproject.toml file", "entry": "run-in-dir --cmd poetry lock", "args": ["-a--no-update", "--files"], "language": "python", "additional_dependencies": ["poetry"], "files": "^(|.*/)pyproject\\.toml$"}, {"id": "pipenv-lock", "name": "pipenv lock", "description": "Lock the from the Pipfile file", "entry": "run-in-dir --cmd pipenv lock", "args": ["-a--keep-outdated", "--files"], "language": "python", "additional_dependencies": ["pipenv"], "files": "^(|.*/)Pipfile$"}, {"id": "helm-lock", "name": "helm lock", "description": "Lock the from the Chart.yaml file", "entry": "run-in-dir --cmd helm dependency update", "args": ["--files"], "language": "python", "files": "^(|.*/)Chart\\.yaml$"}, {"id": "npm-lock", "name": "npm lock", "description": "Lock the npm package from the package.json file", "entry": "run-in-dir --cmd npm install", "args": ["--files"], "language": "python", "files": "^(|.*/)package\\.json$"}]
[{"id": "js-beautify", "name": "js-beautify", "entry": "js-beautify", "language": "node", "files": "\\.js$", "args": [], "additional_dependencies": ["js-beautify@1.13.0"], "minimum_pre_commit_version": "2.7.1", "description": "Runs `js-beautify`"}]
[{"id": "shfmt", "name": "Format bash shell scripts", "description": "Format bash scripts to a canonical format using the shfmt tool.", "entry": "hooks/shfmt.sh", "language": "script", "types": ["shell"]}]
[{"id": "downgrade-source", "name": "Downgrade Source Code", "entry": "downgrade-source", "language": "python", "args": [], "require_serial": false, "additional_dependencies": []}]
[{"id": "opa-test", "name": "OPA test", "description": "Runs OPA unit tests on rego source files", "entry": "opa test", "args": ["."], "pass_filenames": false, "language": "system", "files": "(\\.rego)$"}, {"id": "opa-fmt", "name": "OPA fmt", "description": "Formats Rego policy using opa fmt", "entry": "opa fmt", "args": ["-w"], "language": "system", "files": "(\\.rego)$"}, {"id": "opa-check", "name": "OPA check", "description": "Check syntax of staged Rego files", "entry": "opa check", "args": [".", "--strict"], "pass_filenames": false, "language": "system", "files": "(\\.rego)$"}, {"id": "conftest-test", "name": "Conftest test", "description": "Run `conftest test` on staged config files", "entry": "conftest test", "language": "system", "files": "(\\.rego|\\.yml|\\.yaml|\\.json|\\.ini|\\.toml|\\.conf|\\.hcl|\\.cue|\\.edn|\\.vcl|\\.xml|\\.jsonnet|Dockerfile)$"}, {"id": "conftest-fmt", "name": "Conftest fmt", "description": "Run `conftest fmt` on staged Rego files", "entry": "conftest fmt", "language": "system", "args": ["."], "files": "(\\.rego)$"}, {"id": "conftest-verify", "name": "Conftest verify", "description": "Run `conftest verify` on rego files", "entry": "conftest verify", "args": ["."], "pass_filenames": false, "language": "system", "files": "(\\.rego)$"}]
[{"id": "tanka_validate", "name": "Tanka validate", "description": "This hook runs `tk diff --diff-strategy=validate` on appropriate files.", "entry": "hooks/tanka-validate.sh", "language": "script", "files": "(\\.jsonnet)$", "pass_filenames": true}, {"id": "tanka_lint", "name": "Tanka lint", "description": "This hook runs `tk lint` on appropriate files.", "entry": "hooks/tanka-lint.sh", "language": "script", "files": "(\\.jsonnet)$", "pass_filenames": true, "always_run": true}]
[{"id": "swimm-verify", "name": "swimm-verify", "description": "Verify all Swimm documentation to be current.", "entry": "hooks/swimm-verify.sh", "language": "script"}, {"id": "swimm-verify-nonblocking", "name": "swimm-verify-nonblocking", "description": "Like swimm-verify, but don't block the commit on failure.", "entry": "hooks/swimm-verify-nonblocking.sh", "language": "script"}]
[{"id": "prepare-commit-msg", "name": "JudCoCo prepare", "description": "Use 'JudCoCo' help to write commit messages", "entry": "./tools/hooks/prepare-commit-msg", "language": "script", "stages": ["prepare-commit-msg"]}, {"id": "check-commit-msg", "name": "JudCoCo check", "description": "Run 'JudCoCo' for commit policy enforcement", "entry": "./tools/hooks/commit-msg", "language": "script", "stages": ["commit-msg"]}]
[{"id": "flynt", "name": "flynt", "description": "flynt: string formatting converter", "entry": "flynt", "args": ["--fail-on-change"], "language": "python", "language_version": "python3", "require_serial": true, "types": ["python"]}]
[{"id": "golangci-lint", "name": "golangci-lint", "description": "Fast linters runner for Go.", "entry": "golangci-lint run", "types": ["go"], "language": "golang", "pass_filenames": false}]
[{"id": "dataform_format", "name": "Dataform format", "entry": "hooks/dataform_format.sh", "language": "script", "files": "(\\.sqlx|\\.js)$", "pass_filenames": false}]
[{"id": "ruby_hook", "name": "Ruby Hook", "entry": "ruby_hook", "language": "ruby", "language_version": "2.5.1", "files": "\\.rb$"}]
[{"id": "gofumpt", "name": "gofumpt", "description": "A stricter gofmt.", "entry": "gofumpt -l -w", "types": ["go"], "language": "golang", "pass_filenames": true}]
[{"id": "travis-yml-lint", "name": "Travislint Travis Yaml", "description": "This hook lints travis.yml files.", "entry": "travis_lint", "language": "ruby", "files": "\\.travis\\.y(a?)ml"}]
[{"id": "check-oas", "name": "check-oas", "entry": "./spectral-lint.sh check", "language": "script", "pass_filenames": true, "types_or": ["json", "yaml"], "stages": ["commit"]}]
[{"id": "terraform-fmt", "name": "Format Terraform configuration files", "description": "Rewrites Terraform `.tf` and `.tfvars` files to a canonical format", "entry": "terraform fmt -list=true -write=true -recursive", "language": "system", "files": "(\\.tf|\\.tfvars)$", "pass_filenames": false}, {"id": "packer-fmt", "name": "Format Packer configuration files", "description": "Rewrites all Packer configuration files to a canonical format. Both configuration files (.pkr.hcl) and variable files (.pkrvars.hcl) are updated.", "entry": "packer fmt -write=true", "language": "system", "files": "(\\.pkr\\.hcl|\\.pkrvars\\.hcl)$", "pass_filenames": true}]
[{"id": "autopep8-wrapper", "name": "autopep8 wrapper", "description": "This is deprecated, use pre-commit/mirrors-autopep8 instead.", "entry": "autopep8-wrapper", "language": "python", "types": ["python"], "args": ["-i"]}, {"id": "check-added-large-files", "name": "Check for added large files", "description": "Prevent giant files from being committed", "entry": "check-added-large-files", "language": "python"}, {"id": "check-ast", "name": "Check python ast", "description": "Simply check whether the files parse as valid python.", "entry": "check-ast", "language": "python", "types": ["python"]}, {"id": "check-byte-order-marker", "name": "Check for byte-order marker", "description": "Forbid files which have a UTF-8 byte-order marker", "entry": "check-byte-order-marker", "language": "python", "types": ["text"]}, {"id": "check-builtin-literals", "name": "Check builtin type constructor use", "description": "Require literal syntax when initializing empty or zero Python builtin types.", "entry": "check-builtin-literals", "language": "python", "types": ["python"]}, {"id": "check-case-conflict", "name": "Check for case conflicts", "description": "Check for files that would conflict in case-insensitive filesystems", "entry": "check-case-conflict", "language": "python"}, {"id": "check-docstring-first", "name": "Check docstring is first", "description": "Checks a common error of defining a docstring after code.", "entry": "check-docstring-first", "language": "python", "types": ["python"]}, {"id": "check-executables-have-shebangs", "name": "Check that executables have shebangs", "description": "Ensures that (non-binary) executables have a shebang.", "entry": "check-executables-have-shebangs", "language": "python", "types": ["text", "executable"], "stages": ["commit", "push", "manual"]}, {"id": "check-json", "name": "Check JSON", "description": "This hook checks json files for parseable syntax.", "entry": "check-json", "language": "python", "types": ["json"]}, {"id": "pretty-format-json", "name": "Pretty format JSON", "description": "This hook sets a standard for formatting JSON files.", "entry": "pretty-format-json", "language": "python", "types": ["json"]}, {"id": "check-merge-conflict", "name": "Check for merge conflicts", "description": "Check for files that contain merge conflict strings.", "entry": "check-merge-conflict", "language": "python", "types": ["text"]}, {"id": "check-symlinks", "name": "Check for broken symlinks", "description": "Checks for symlinks which do not point to anything.", "entry": "check-symlinks", "language": "python", "types": ["symlink"]}, {"id": "check-toml", "name": "Check Toml", "description": "This hook checks toml files for parseable syntax.", "entry": "check-toml", "language": "python", "types": ["toml"]}, {"id": "check-vcs-permalinks", "name": "Check vcs permalinks", "description": "Ensures that links to vcs websites are permalinks.", "entry": "check-vcs-permalinks", "language": "python", "types": ["text"]}, {"id": "check-xml", "name": "Check Xml", "description": "This hook checks xml files for parseable syntax.", "entry": "check-xml", "language": "python", "types": ["xml"]}, {"id": "check-yaml", "name": "Check Yaml", "description": "This hook checks yaml files for parseable syntax.", "entry": "check-yaml", "language": "python", "types": ["yaml"]}, {"id": "debug-statements", "name": "Debug Statements (Python)", "description": "Check for debugger imports and py37+ `breakpoint()` calls in python source.", "entry": "debug-statement-hook", "language": "python", "types": ["python"]}, {"id": "detect-aws-credentials", "name": "Detect AWS Credentials", "description": "Detects *your* aws credentials from the aws cli credentials file", "entry": "detect-aws-credentials", "language": "python", "types": ["text"]}, {"id": "detect-private-key", "name": "Detect Private Key", "description": "Detects the presence of private keys", "entry": "detect-private-key", "language": "python", "types": ["text"]}, {"id": "double-quote-string-fixer", "name": "Fix double quoted strings", "description": "This hook replaces double quoted strings with single quoted strings", "entry": "double-quote-string-fixer", "language": "python", "types": ["python"]}, {"id": "end-of-file-fixer", "name": "Fix End of Files", "description": "Ensures that a file is either empty, or ends with one newline.", "entry": "end-of-file-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}, {"id": "file-contents-sorter", "name": "File Contents Sorter", "description": "Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file.", "entry": "file-contents-sorter", "language": "python", "files": "^$"}, {"id": "fix-encoding-pragma", "name": "Fix python encoding pragma", "language": "python", "entry": "fix-encoding-pragma", "description": "Add # -*- coding: utf-8 -*- to the top of python files", "types": ["python"]}, {"id": "flake8", "name": "Flake8 (deprecated, use gitlab.com/pycqa/flake8)", "description": "This hook runs flake8.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true}, {"id": "forbid-new-submodules", "name": "Forbid new submodules", "language": "python", "entry": "forbid-new-submodules", "description": "Prevent addition of new git submodules"}, {"id": "mixed-line-ending", "name": "Mixed line ending", "description": "Replaces or checks mixed line ending", "entry": "mixed-line-ending", "language": "python", "types": ["text"]}, {"id": "name-tests-test", "name": "Tests should end in _test.py", "description": "This verifies that test files are named correctly", "entry": "name-tests-test", "language": "python", "files": "(^|/)tests/.+\\.py$"}, {"id": "no-commit-to-branch", "name": "Don't commit to branch", "entry": "no-commit-to-branch", "language": "python", "pass_filenames": false, "always_run": true}, {"id": "pyflakes", "name": "Pyflakes (DEPRECATED, use flake8)", "description": "This hook runs pyflakes. (This is deprecated, use flake8).", "entry": "pyflakes", "language": "python", "types": ["python"]}, {"id": "requirements-txt-fixer", "name": "Fix requirements.txt", "description": "Sorts entries in requirements.txt", "entry": "requirements-txt-fixer", "language": "python", "files": "requirements.*\\.txt$"}, {"id": "sort-simple-yaml", "name": "Sort simple YAML files", "language": "python", "entry": "sort-simple-yaml", "description": "Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.", "files": "^$"}, {"id": "trailing-whitespace", "name": "Trim Trailing Whitespace", "description": "This hook trims trailing whitespace.", "entry": "trailing-whitespace-fixer", "language": "python", "types": ["text"], "stages": ["commit", "push", "manual"]}]
[{"id": "check-json5", "name": "check json5", "description": "checks json files for syntax parsable as json5 (with comments).", "entry": "check-json5", "language": "python", "types": ["json"]}]
[{"id": "check-nocommit", "name": "check for nocommit reminders", "description": "This hook checks for '#NOCOMMIT' messages in any text files", "entry": "check-nocommit", "language": "python", "types": ["text"]}]
[{"id": "stable_po", "name": "Stable PO files", "entry": "stabilise_po", "language": "python", "files": "\\.(po|pot)$", "description": "This uses pybabel to regenerate PO files using settings that are reproducable", "stages": ["commit"]}]
[{"id": "markdown-attachment-renamer", "name": "Rename Markdown Attachments", "description": "This hook rename markdown attachments", "entry": "python -m markdown_attachment_renamer", "language": "python", "types": ["text"]}]
[{"id": "bandit", "name": "bandit", "description": "Bandit is a tool for finding common security issues in Python code", "entry": "bandit", "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "gitleaks", "name": "Check for credential leaks", "description": "Check for tokens, passwords, and other secrets using gitleaks", "entry": "pre_commit_hooks/gitleaks", "language": "script"}]
[{"id": "pylic", "name": "pylic", "entry": "pylic check", "language": "python", "pass_filenames": false}]
[{"id": "commit-msg-hook", "name": "commit-msg-hook", "description": "Checks if commit message matches the chaos-hub commit rules", "entry": "commit-msg-hook", "language": "python", "types": ["text"]}]
[{"id": "terraform-fmt", "name": "Terraform fmt (Format)", "description": "Rewrite all Terraform files (.tf) to canonical format.", "entry": "./terraform-fmt.sh", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$", "language": "script"}]
[{"id": "secret-file", "name": "Secret File Checker", "description": "Yell if the specified file is included in the commit", "entry": "run-hook.sh", "language": "script", "types": ["text"], "require_serial": true}]
[{"id": "format-sql", "name": "format-sql", "entry": "format-sql", "language": "python", "files": "\\.sql$"}, {"id": "sqlformat", "name": "sqlformat", "entry": "sqlformat-inplace", "language": "python", "files": "\\.sql$"}]
[{"id": "commitizen-cli", "name": "commitizen guide", "description": "Guide the user in creating a conventional commit", "entry": "cz commit", "args": [], "stages": ["prepare-commit-msg"], "language": "python", "language_version": "python3", "minimum_pre_commit_version": "1.4.3"}]
[{"id": "zpretty", "name": "zpretty", "entry": "zpretty", "language": "python", "files": ".*.(zcml|pt|xml|html)$", "args": ["--inplace"], "require_serial": false, "additional_dependencies": []}]
[{"id": "lint", "name": "lint", "description": "Run a number of python linters", "entry": "lint", "args": ["--bootstrap"], "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "dockerfile-lint", "name": "dockerfile-lint", "description": "Lint Dockerfiles with hadolint", "entry": "virtualroot/pre-commit:latest hadolint", "language": "docker_image", "types": ["file"], "files": "Dockerfile(.*)"}, {"id": "golang-staticcheck", "name": "golang-staticcheck", "description": "Lint Golang files with staticcheck", "entry": "virtualroot/pre-commit:latest staticcheck", "language": "docker_image", "types": ["file"], "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golang-golint", "name": "golang-golint", "description": "Lint Golang files with golint", "entry": "virtualroot/pre-commit:latest fgt golint", "language": "docker_image", "types": ["file"], "files": "\\.go$", "exclude": "vendor\\/.*$"}]
[{"id": "packer_validate", "name": "Packer Validate", "description": "This hook runs `packer validate` on appropriate files.", "entry": "hooks/packer_validate.sh", "language": "script", "files": "(packer\\.json|\\.pkr\\.hcl)$", "pass_filenames": true, "always_run": true}, {"id": "packer_fmt", "name": "Packer Format", "description": "This hook runs `packer fmt` on appropriate files.", "entry": "hooks/packer_fmt.sh", "language": "script", "files": "(\\.pkr\\.hcl)$", "pass_filenames": true}]
[{"id": "pre-commit-runner", "name": "execute pre-commit-config in subdir", "description": "execute pre-commit-config in subdir", "entry": "pre-commit-runner", "language": "python", "language_version": "3.10", "types": ["python"]}]
[{"id": "pytest", "name": "Pytest", "description": "This hook runs Pytest on ./tests", "entry": "pre_commit_hooks/pytest.sh", "language": "script"}]
[{"id": "blocktrans-trimmed-check", "name": "blocktrans trimmed check", "description": "check that multi-line blocktrans blocks in django templates include a \"trimmed\" directive", "entry": "blocktrans-trimmed-check", "language": "python", "types": ["html"]}]
[{"id": "add-ticket-to-commit", "name": "Add ticket ID to commit message", "description": "prepare-commit-msg hook for adding ticket code with pre-commit.", "entry": "./scripts/add-ticket-to-commit.sh", "stages": ["prepare-commit-msg"], "language": "script", "always_run": true}, {"id": "shellcheck", "name": "Shellcheck bash scripts", "description": "Check Bash scripts using shellcheck", "entry": "./scripts/validate-bash.sh", "language": "script", "types": ["executable"], "stages": ["commit"]}]
[{"id": "pylint", "name": "pylint", "entry": "pylint", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "check-readme", "name": "Check for readme file", "description": "Validate for readme file presence", "entry": "hooks/scripts/check-readme.sh", "language": "script"}, {"id": "validate-author-email", "name": "Validate the author flux7 email address", "description": "Valid flux7 email address", "entry": "hooks/scripts/validate-author-email.sh", "language": "script"}, {"id": "security-check", "name": "security-check", "description": "Scans Terraform, AWS CloudFormation and Kubernetes configuration files.", "entry": "hooks/scripts/security_check.sh", "language": "script", "files": "(\\.tf|\\.yaml|\\.yml)$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "terraform-fmt", "name": "Terraform fmt", "description": "Runs `terraform fmt` on all Terraform files", "language": "script", "entry": "hooks/scripts/terraform_fmt.sh", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "packer-validate", "name": "Packer validate", "description": "Runs `packer validate` on all staged packer files", "language": "script", "entry": "hooks/scripts/packer_validate.sh", "files": "\\.json$"}, {"id": "cfn-lint", "name": "Cloudformation Lint", "description": "Runs cfn-lint on CloudFormation Templates", "language": "script", "entry": "hooks/scripts/cfn_lint.sh", "files": "(\\.yml|\\.yaml)$"}, {"id": "flake8-lint", "name": "flake8-lint", "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.", "entry": "flake8 --ignore=E501,W503", "language": "system", "files": "\\.py$"}, {"id": "check-prtemplate", "name": "Check for PR Template", "description": "Validate for PR Template file presence", "entry": "hooks/scripts/check-prtemplate.sh", "language": "script"}]
[{"id": "rst-linter", "name": "Check .rst files with the same linter used by pypi.org", "entry": "rst_linter", "language": "python", "files": "\\.rst$"}]
[{"id": "flutter-precommit", "name": "Pre-commit hook for Flutter", "description": "Executes the Flutter pre-commit checks", "entry": "./flutter-pre-commit.sh", "language": "script", "files": "\\.dart$"}]
[{"id": "pylint-reenable", "name": "Strip unnecessary `pylint disable`s", "description": "Automatically remove unnecessary `pylint disable` comments", "entry": "pylint-reenable", "language": "python", "types": ["python"]}]
[{"id": "check-dbt-resource-configuraton", "name": "check for missing or invalid configurations", "description": "prevents missing or invalid configurations from being committed.", "entry": "check-dbt-resource-configuraton", "language": "python"}]
[{"id": "npmtest", "name": "node.js npm test", "entry": "npm test", "language": "node", "pass_filenames": false}]
[{"id": "stylua", "name": "StyLua", "description": "An opinionated Lua code formatter", "entry": "stylua", "language": "rust", "types": ["lua"]}]
[{"id": "check-file-and-directory-names", "name": "Check file names and directory names", "description": "Check directory and file names are consistent", "entry": "python3 check_file_and_directory_names/main.py", "language": "python", "types": ["file"], "exclude": "^.*$", "always_run": true}]
[{"id": "astyle_py", "name": "astyle formatter", "description": "Astyle python wrapper. By default checks the formatting according to the given options. If '--fix' option is given, corrects formatting. Pass astyle options (such as '--style=otbs') via 'args' array.", "entry": "astyle_py", "language": "python", "pass_filenames": true, "files": "^.*\\.(c|cpp|cxx|h|hpp|inc)$"}]
[{"id": "commit-msg-regex-hook", "name": "Validate commit message with Regex", "description": "Checks if commit message matches the passed in regex", "entry": "commit-msg-regex-hook", "language": "python", "types": ["text"]}]
[{"id": "check-git-hooks-installed", "name": "check git hooks installed correctly", "description": "checks to ensure git hooks are all installed correctly", "entry": "check-git-hooks-installed", "language": "python", "stages": ["commit", "push", "manual"]}]
[{"id": "runtests_julia", "name": "runtests_julia", "entry": "pre_commit_hooks/runtests.sh", "files": "\\.(jl|JL)$", "verbose": true, "language": "script", "description": "Runs julia tests"}, {"id": "format_julia", "name": "format_julia", "entry": "pre_commit_hooks/format.sh", "files": "\\.(jl|JL)$", "verbose": true, "language": "script", "description": "Reformats Julia code"}]
[{"id": "dialplan-check", "name": "dialplan-check", "description": "Run asterisklint dialplan-check on extensions.conf files", "entry": "asterisklint dialplan-check", "language": "python", "types": ["text"], "files": "extensions\\.conf$", "args": [], "require_serial": false, "additional_dependencies": [], "minimum_pre_commit_version": "2.9.2"}, {"id": "func-odbc-check", "name": "func-odbc-check", "description": "Run asterisklint func_odbc-check on func_odbc.conf files", "entry": "asterisklint func_odbc-check", "language": "python", "files": "func_odbc\\.conf$", "args": [], "require_serial": false, "additional_dependencies": [], "minimum_pre_commit_version": "2.9.2"}]
[{"id": "shellcheck-system", "name": "find bugs in your shell scripts.", "description": "statically checks your shell scripts for errors & potential bugs", "entry": "shellcheck", "language": "system", "types": ["shell"]}, {"id": "shfmt-system", "name": "Format your shell scripts.", "description": "Unclutter your Shell scripts with shfmt!", "entry": "shfmt", "language": "system", "types": ["shell"]}]
[{"id": "swatch", "name": "swatch", "description": "Automatically upgrade syntax for newer versions.", "entry": "swatch", "language": "python", "types": ["python"], "files": "", "minimum_pre_commit_version": "0.15.0"}]
[{"id": "assert-changelog-version", "name": "Check CHANGELOG has an entry that matches the currently defined __VERSION__", "description": "Check CHANGELOG has an entry that matches the currently defined __VERSION__", "entry": "assert-changelog version", "language": "python", "language_version": "python3", "always_run": true, "pass_filenames": false}, {"id": "assert-changelog-contents", "name": "Check for untracked or unstaged moduled paths referred to in the CHANGELOG", "description": "Check for untracked or unstaged moduled paths referred to in the CHANGELOG", "entry": "assert-changelog contents", "language": "python", "language_version": "python3", "always_run": true, "pass_filenames": false}]
[{"id": "xml-formatter", "name": "Format XML", "description": "This hook formats XML.", "language": "python", "types": ["xml"], "entry": "xmlformat", "args": ["--overwrite"]}]
[{"id": "ansible_role_find_unused_variable", "name": "Find unused variables in an Ansible role", "entry": "ansible_role_find_unused_variable.sh", "language": "script", "description": "Find unused variables in an Ansible role."}, {"id": "ansible_role_find_empty_files", "name": "Find empty files in an Ansible role", "entry": "ansible_role_find_empty_files.sh", "language": "script", "description": "Find emtpy files in an Ansible role."}, {"id": "ansible_role_find_empty_directories", "name": "Find empty directories in an Ansible role", "entry": "ansible_role_find_empty_directories.sh", "language": "script", "description": "Find emtpy directories in an Ansible role."}, {"id": "ansible_role_fix_readability", "name": "Fix readability in Ansible role", "entry": "ansible_role_fix_readability.sh", "language": "script", "description": "Fix readability in Ansible role"}, {"id": "ansible_role_find_undefined_handlers", "name": "Find undefined handlers", "entry": "ansible_role_find_undefined_handlers.sh", "language": "script", "description": "Find notified handlers that are not defined."}, {"id": "ansible_role_find_unquoted_values", "name": "Find unquoted values that look like a version", "entry": "ansible_role_find_unquoted_values.sh", "language": "script", "description": "Find version-like values that are not quoted."}, {"id": "ansible_role_find_horizontal_when", "name": "Find when statements that are not spread vertically", "entry": "ansible_role_find_horizontal_when.sh", "language": "script", "description": "Find when statements that can be improved by vertical spreading."}]
[{"id": "yaq-traits-check", "name": "yaq-traits-check", "description": "Check that avpr files match expected traits.", "entry": "yaq-traits check --fix", "language": "python", "always_run": true, "files": "\\.avpr$"}, {"id": "yaq-traits-compose", "name": "yaq-traits-compose", "description": "Compose new avpr files when tomls change.", "entry": "yaq-traits compose --save", "language": "python", "files": "\\.toml$"}]
[{"id": "prenotebook", "name": "Prepare a notebook for committing.", "description": "Clean up notebooks.", "entry": "python -m prenotebook", "language": "python", "files": ".+\\.ipynb"}]
[{"id": "puppet-lint", "name": "puppet-lint", "description": "", "entry": "puppet-lint", "language": "ruby", "types": ["puppet"], "args": [], "require_serial": false, "additional_dependencies": [], "minimum_pre_commit_version": "0"}]
[{"id": "dart-precommit", "name": "Pre-commit hook for Dart", "description": "Executes the Dart pre-commit checks", "entry": "./dart-pre-commit.sh", "language": "script", "files": "\\.dart$"}]
[{"id": "validate_manifest", "name": "validate pre-commit manifest", "description": "This validator validates a pre-commit hooks manifest file", "entry": "pre-commit validate-manifest", "language": "python", "files": "^\\.pre-commit-hooks\\.yaml$"}]
[{"id": "beancount-check", "name": "beancount-check", "entry": "bean-check", "language": "python", "files": ".*(\\.bean|\\.beancount|\\.ledger)$", "require_serial": true, "additional_dependencies": ["beancount"]}]
[{"id": "validate-html", "name": "HTML syntax validator using W3C v.Nu checker, with support for handlebars/jinja2 templates", "entry": "validate_html", "language": "python", "files": ".*\\.(html|hbs|jinja)$"}]
[{"id": "docker-image", "name": "Docker image", "description": "Run Docker image with extended DinD detection.", "entry": "docker-image", "language": "python"}, {"id": "check-helm-version", "name": "Helm version", "description": "Check whether the Helm chart version was incremented.", "entry": "check-helm-version", "language": "python", "files": "^(helper-|)charts/[^/]+/(\\.kubeconform|\\.helmignore|templates/NOTES.txt|.*\\.(ya?ml|json|tpl))$", "require_serial": true}]
[{"id": "check-branch-for-push", "name": "Only push to matching branch", "entry": "check-branch-for-push", "language": "python", "pass_filenames": false, "always_run": true, "stages": ["push"]}]
[{"id": "checkstyle-java", "name": "checkstyle-java", "description": "", "entry": "./.scripts/checkstyle-pre-commit.sh", "language": "script", "require_serial": false}]
[{"id": "hello-world-lua", "name": "hello world lua", "entry": "hello-world-lua", "language": "lua"}]
[{"id": "auto-walrus", "name": "auto-walrus", "description": "Automatically use the walrus operator!", "entry": "auto-walrus", "language": "python", "types": ["python"]}]
[{"id": "terraform-pre-commit", "name": "terrascan", "description": "Runs terrascan on supported IaC templates.", "language": "script", "entry": "scripts/pre-commit-hook.sh"}]
[{"id": "prints_cwd", "name": "Prints Cwd", "entry": "pwd", "language": "system", "files": "\\.sh$"}]
[{"id": "prints_cwd", "name": "Prints Cwd", "entry": "pwd", "language": "system", "files": "\\.sh$"}]
[{"id": "dotenv-linter", "name": "dotenv-linter", "entry": "dotenv-linter", "language": "python", "types": ["text"], "files": "\\.env*"}]
[{"id": "ansible-syntax-check", "name": "Syntax check Ansible playbooks", "description": "Check Ansible playbooks for syntax errors.", "language": "python", "entry": "ansible-playbook", "files": "playbook\\.yml", "types": ["yaml"], "args": ["--inventory=localhost,", "--syntax-check"]}]
[{"id": "ansible-syntax-check", "name": "Syntax check Ansible playbooks", "description": "Check Ansible playbooks for syntax errors.", "language": "python", "entry": "ansible-playbook", "files": "playbook\\.yml", "types": ["yaml"], "args": ["--inventory=localhost,", "--syntax-check"]}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format", "entry": "hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files", "entry": "hooks/terraform-validate.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "packer-validate", "name": "Packer validate", "description": "Validates all Packer configuration files", "entry": "hooks/packer-validate.sh", "language": "script", "files": "(\\.pkr\\.(hcl|json)|\\.pkrvars\\.hcl)$", "require_serial": true}, {"id": "tflint", "name": "tflint", "description": "Linter for Terraform source code", "entry": "hooks/tflint.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "terragrunt-hclfmt", "name": "Terragrunt hclfmt", "description": "Rewrites all Terragrunt configuration files to a canonical format", "entry": "hooks/terragrunt-hclfmt.sh", "language": "script", "files": "\\.hcl$", "exclude": "(?x)^(\n  .+\\.terraform\\/.*$|\n  .+\\.terragrunt-cache\\/.*$|\n)$\n"}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "hooks/shellcheck.sh", "language": "script"}, {"id": "gofmt", "name": "gofmt", "description": "Gofmt formats Go programs", "entry": "hooks/gofmt.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "goimports", "name": "goimports", "description": "Goimports updates imports and formats in the same style as gofmt", "entry": "hooks/goimports.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golint", "name": "golint", "description": "Golint is a linter for Go source code", "entry": "hooks/golint.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golangci-lint", "name": "golangci-lint", "description": "golangci-lint is a Go linters aggregator", "entry": "hooks/golangci-lint.sh", "language": "script", "files": "\\.go$", "require_serial": true}, {"id": "yapf", "name": "yapf", "description": "yapf (Yet Another Python Formatter) is a python formatter from Google", "entry": "hooks/yapf.sh", "language": "script", "files": "\\.py$", "exclude": "(?x)^(\n  \\.tox\\/.*$|\n  __pycache__\\/.*$\n)$\n"}, {"id": "helmlint", "name": "helmlint", "description": "Run helm lint, a linter for helm charts", "entry": "hooks/helmlint.sh", "language": "script", "files": "\\.((ya?ml)|(tpl))$", "require_serial": true}, {"id": "markdown-link-check", "name": "markdown-link-check", "description": "Run markdown-link-check to check all the relative and absolute links in markdown docs.", "entry": "hooks/mdlink-check.sh", "language": "script", "files": "\\.md$", "exclude": "vendor\\/.*$"}, {"id": "check-terratest-skip-env", "name": "check-terratest-skip-env", "description": "Check all go source files for any uncommented os.Setenv calls setting a terratest SKIP environment.", "entry": "./hooks/check_skip_env.py", "language": "script", "files": "\\.go$"}, {"id": "sentinel-fmt", "name": "Sentinel fmt", "description": "Rewrites all Sentinel configuration files to a canonical format", "entry": "hooks/sentinel-fmt.sh", "language": "script", "files": "\\.sentinel$", "require_serial": true}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format", "entry": "hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "pipeline-generator", "name": "pipeline-generator", "description": "Generate ci config automatically.", "entry": "hooks/pipeline-generator.sh", "language": "script", "pass_filenames": false}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}]
[{"id": "stdout-stderr", "name": "stdout-stderr", "language": "script", "entry": "./stdout-stderr-entry"}, {"id": "tty-check", "name": "tty-check", "language": "script", "entry": "./tty-check-entry"}]
[{"id": "stdout-stderr", "name": "stdout-stderr", "language": "script", "entry": "./stdout-stderr-entry"}, {"id": "tty-check", "name": "tty-check", "language": "script", "entry": "./tty-check-entry"}]
[{"id": "check-conventional-commits", "name": "check for conventional-commits", "description": "check about that commit message is based on conventional-commits", "entry": "check-conventional-commits", "language": "python", "stages": ["commit-msg"]}]
[{"id": "renovate-helm-releases", "name": "Renovate Helm Releases", "description": "Update comments for running Renovate for Helm Releases.", "entry": "renovate-helm-releases --cluster-path", "pass_filenames": false, "language": "python", "files": "^[^.].*\\.yaml$"}]
[{"id": "ruby_hook", "name": "Ruby Hook", "entry": "ruby_hook", "language": "ruby", "language_version": "2.5.1", "files": "\\.rb$"}]
[{"id": "pre-commit-runner", "name": "execute pre-commit-config in subdir", "description": "execute pre-commit-config in subdir", "entry": "pre-commit-runner", "language": "python", "language_version": "3.10", "types": ["python"]}]
[{"id": "ansible_role_find_unused_variable", "name": "Find unused variables in an Ansible role", "entry": "ansible_role_find_unused_variable.sh", "language": "script", "description": "Find unused variables in an Ansible role."}, {"id": "ansible_role_find_empty_files", "name": "Find empty files in an Ansible role", "entry": "ansible_role_find_empty_files.sh", "language": "script", "description": "Find emtpy files in an Ansible role."}, {"id": "ansible_role_find_empty_directories", "name": "Find empty directories in an Ansible role", "entry": "ansible_role_find_empty_directories.sh", "language": "script", "description": "Find emtpy directories in an Ansible role."}, {"id": "ansible_role_fix_readability", "name": "Fix readability in Ansible role", "entry": "ansible_role_fix_readability.sh", "language": "script", "description": "Fix readability in Ansible role"}, {"id": "ansible_role_find_undefined_handlers", "name": "Find undefined handlers", "entry": "ansible_role_find_undefined_handlers.sh", "language": "script", "description": "Find notified handlers that are not defined."}, {"id": "ansible_role_find_unquoted_values", "name": "Find unquoted values that look like a version", "entry": "ansible_role_find_unquoted_values.sh", "language": "script", "description": "Find version-like values that are not quoted."}, {"id": "ansible_role_find_horizontal_when", "name": "Find when statements that are not spread vertically", "entry": "ansible_role_find_horizontal_when.sh", "language": "script", "description": "Find when statements that can be improved by vertical spreading."}]
[{"id": "ansible-lint", "name": "Ansible-lint", "description": "This hook runs ansible-lint.", "entry": "python3 -m ansiblelint -v --force-color", "language": "python", "pass_filenames": false, "always_run": true, "additional_dependencies": ["ansible-core>=2.13.3"]}]
[{"id": "vulture", "name": "vulture", "language": "python", "entry": "vulture", "description": "Find unused Python code.", "types": ["python"], "pass_filenames": false, "require_serial": true}]
[{"id": "image_optim", "name": "image_optim", "entry": "image_optim", "language": "ruby", "types": ["image"], "args": [], "additional_dependencies": ["image_optim_pack"]}]
[{"id": "clj-kondo", "name": "clj-kondo", "description": "`clj-kondo` is a command-line utility for enforcing style consistency across Clojure projects.", "entry": "clj-kondo --lint", "language": "system", "types": ["clojure"]}, {"id": "clj-kondo-docker", "name": "clj-kondo (via docker)", "description": "`clj-kondo` is a command-line utility for enforcing style consistency across Clojure projects.", "entry": "cljkondo/clj-kondo:2023.07.13", "args": ["clj-kondo", "--lint"], "language": "docker_image", "types": ["clojure"]}]
[{"id": "bash_hook", "name": "Bash hook", "entry": "bin/hook.sh", "language": "script", "files": "foo.py"}, {"id": "bash_hook2", "name": "Bash hook", "entry": "bin/hook2.sh", "language": "script", "files": ""}, {"id": "bash_hook3", "name": "Bash hook", "entry": "bin/hook3.sh", "language": "script", "files": "bar.py"}]
[{"id": "check-conditional-mark-sort", "name": "check conditional mark sort", "description": "check conditional mark yaml file sort from A to Z.", "entry": "check-conditional-mark-sort", "language": "python", "types": ["yaml"]}]
[{"id": "docformatter", "name": "docformatter", "description": "Formats docstrings to follow PEP 257.", "entry": "docformatter", "args": ["-i"], "language": "python", "types": ["python"]}, {"id": "docformatter-venv", "name": "docformatter-venv", "description": "Formats docstrings to follow PEP 257. Uses python3 -m venv.", "entry": "docformatter", "args": ["-i"], "language": "python_venv", "types": ["python"]}]
[{"id": "pydoc-markdown", "name": "pydoc-markdown", "description": "Run pydoc-markdown. Use a configuration file or command line arguments to get a custom behavior.", "entry": "pydoc-markdown", "language": "python", "language_version": "python3", "pass_filenames": false, "types_or": ["python", "pyi"], "require_serial": true}]
[{"id": "sphinx-lint", "name": "Sphinx lint", "description": "Searches for common typos in sphinx-flavored rst files.", "files": "\\.rst$", "entry": "sphinx-lint", "language": "python"}]
[{"id": "docstr-coverage", "name": "docstr-coverage", "entry": "docstr-coverage", "require_serial": true, "language": "python", "language_version": "python3", "types_or": ["cython", "pyi", "python"], "minimum_pre_commit_version": "2.9.0", "always_run": true, "pass_filenames": false}]
[{"id": "poetry-check", "name": "poetry-check", "description": "run poetry check to validate config", "entry": "poetry check", "language": "python", "language_version": "python3", "pass_filenames": false, "files": "^pyproject.toml$"}, {"id": "poetry-lock", "name": "poetry-lock", "description": "run poetry lock to update lock file", "entry": "poetry lock", "language": "python", "language_version": "python3", "pass_filenames": false}]
[{"id": "importanize", "name": "importanize", "description": "Organize python imports", "entry": "importanize", "language": "python", "language_version": "python3", "types": ["python"], "args": ["-v", "--no-auto-pipe"]}]
[{"id": "go-fmt", "name": "go fmt", "entry": "run-go-fmt.sh", "files": "\\.go$", "language": "script", "description": "Runs `gofmt`, requires golang"}, {"id": "go-imports", "name": "go imports", "entry": "run-go-imports.sh", "files": "\\.go$", "language": "script", "description": "Runs `goimports`, requires golang"}, {"id": "go-vet", "name": "go vet", "entry": "run-go-vet.sh", "files": "\\.go$", "language": "script", "description": "Runs `go vet`, requires golang"}, {"id": "go-lint", "name": "go lint", "entry": "run-go-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `golint`, requires https://github.com/golang/lint"}, {"id": "go-cyclo", "name": "go-cyclo", "entry": "run-go-cyclo.sh", "files": "\\.go$", "language": "script", "description": "Runs `gocyclo`, requires https://github.com/fzipp/gocyclo", "args": ["-over=15"]}, {"id": "validate-toml", "name": "validate toml", "entry": "tomlv", "files": "\\.toml$", "language": "system", "description": "Runs `tomlv`, requires https://github.com/BurntSushi/toml/tree/master/cmd/tomlv\"\n"}, {"id": "no-go-testing", "name": "Check files aren't using go's testing package", "entry": "testing\\.T", "files": "test_.*\\.go$", "language": "pygrep", "description": "Checks that no files are using `testing.T`, if you want developers to use a different testing framework\n"}, {"id": "gometalinter", "name": "gometalinter", "entry": "run-gometalinter.sh", "files": "\\.go$", "language": "script", "description": ""}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "run-golangci-lint.sh", "types": ["go"], "language": "script", "pass_filenames": false, "description": "Runs `golangci-lint`, requires https://github.com/golangci/golangci-lint"}, {"id": "go-critic", "name": "go-critic", "entry": "run-go-critic.sh", "files": "\\.go$", "language": "script", "description": "Runs `go-critic`, requires https://github.com/go-critic/go-critic"}, {"id": "go-unit-tests", "name": "go-unit-tests", "entry": "run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`"}, {"id": "go-build", "name": "go-build", "entry": "run-go-build.sh", "files": "\\.go$", "language": "script", "description": "Runs `go build`, requires golang"}, {"id": "go-generate", "name": "go-generate", "entry": "run-go-generate.sh", "files": "\\.go$", "language": "script", "description": "Runs `go generate`, requires golang"}, {"id": "go-mod-tidy", "name": "go-mod-tidy", "entry": "run-go-mod-tidy.sh", "pass_filenames": false, "language": "script", "description": "Runs `go mod tidy -v`, requires golang"}, {"id": "go-mod-vendor", "name": "go-mod-vendor", "entry": "run-go-mod-vendor.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod vendor`, requires golang"}]
[{"id": "flake8-nb", "name": "flake8-nb", "description": "flake8 checking for jupyter notebooks", "entry": "flake8-nb", "language": "python", "language_version": "python3", "require_serial": true, "types": ["file"], "files": "\\.(py|ipynb)$"}]
[{"id": "docformatter-conda", "name": "docformatter-conda", "entry": "docformatter", "args": ["-i"], "language": "conda", "description": "Formats docstrings to follow PEP 257.", "types": ["python"]}]
[{"id": "trivyfs-docker", "name": "trivyfs-docker", "entry": "aquasec/trivy:0.44.0 fs --cache-dir /src/.pre-commit-trivy-cache --exit-code 1", "language": "docker_image", "pass_filenames": false}, {"id": "trivyconfig-docker", "name": "trivyconfig-docker", "entry": "aquasec/trivy:0.44.0 config --cache-dir /src/.pre-commit-trivy-cache --exit-code 1", "language": "docker_image", "pass_filenames": false}]
[{"id": "black", "name": "black", "description": "Black: The uncompromising Python code formatter", "entry": "black", "language": "python", "minimum_pre_commit_version": "2.9.2", "require_serial": true, "types_or": ["python", "pyi"]}, {"id": "flake8", "name": "flake8", "description": "`flake8` is a command-line utility for enforcing style consistency across Python projects.", "entry": "flake8", "language": "python", "types": ["python"], "require_serial": true}, {"id": "isort", "name": "isort", "entry": "isort", "require_serial": true, "language": "python", "types_or": ["cython", "pyi", "python"], "args": ["--filter-files"], "minimum_pre_commit_version": "2.9.2"}, {"id": "pyupgrade", "alias": "format", "name": "pyupgrade", "description": "Automatically upgrade syntax for newer versions.", "entry": "pyupgrade", "args": ["--py39-plus"], "language": "system", "types": ["python"], "minimum_pre_commit_version": "0.15.0"}, {"id": "bandit", "name": "bandit", "description": "Bandit is a tool for finding common security issues in Python code", "entry": "bandit", "language": "python", "language_version": "python3", "types": ["python"], "args": ["--quiet", "--format=custom", "--configfile=.bandit"]}, {"id": "mypy", "alias": "lint", "name": "mypy", "entry": "mypy", "language": "system", "types": ["python"], "require_serial": true}]
[{"id": "packages-inspector", "name": "Packages inspector", "description": "Check missing and unused dependencies", "entry": "packages_inspector", "language": "python", "language_version": "3.8", "types": ["python"], "pass_filenames": false, "args": ["--error-on-diff", "--no-interaction", "--no-pypi-calls"]}]
[{"id": "rmstar", "name": "rmstar", "description": "Automatically replace `import *` imports in Python files with explicit imports", "entry": "rmstar", "language": "python", "types_or": ["python", "pyi"], "args": [], "require_serial": true, "additional_dependencies": ["pyflakes"], "minimum_pre_commit_version": "2.9.2", "verbose": true}]
[{"id": "napari-plugin-checks", "name": "napari-plugin-checks", "description": "basic checks for napari plugins", "entry": "napari-plugin-check", "language": "python", "language_version": "python3"}]
[{"id": "terraform_fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format.", "entry": "terraform_fmt.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs", "name": "Terraform docs", "description": "Inserts input and output documentation into README.md (using terraform-docs).", "require_serial": true, "entry": "terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_without_aggregate_type_defaults", "name": "Terraform docs (without aggregate type defaults)", "description": "Inserts input and output documentation into README.md (using terraform-docs). Identical to terraform_docs.", "require_serial": true, "entry": "terraform_docs.sh", "language": "script", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_docs_replace", "name": "Terraform docs (overwrite README.md)", "description": "Overwrite content of README.md with terraform-docs.", "require_serial": true, "entry": "terraform_docs_replace", "language": "python", "files": "(\\.tf)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files.", "require_serial": true, "entry": "terraform_validate.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tflint", "name": "Terraform validate with tflint", "description": "Validates all Terraform configuration files with TFLint.", "entry": "terraform_tflint.sh", "language": "script", "files": "(\\.tf|\\.tfvars)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_fmt", "name": "Terragrunt fmt", "description": "Rewrites all Terragrunt configuration files to a canonical format.", "entry": "terragrunt_fmt.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terragrunt_validate", "name": "Terragrunt validate", "description": "Validates all Terragrunt configuration files.", "entry": "terragrunt_validate.sh", "language": "script", "files": "(\\.hcl)$", "exclude": "\\.terraform\\/.*$"}, {"id": "terraform_tfsec", "name": "Terraform validate with tfsec", "description": "Static analysis of Terraform templates to spot potential security issues.", "entry": "terraform_tfsec.sh", "language": "script"}, {"id": "checkov", "name": "Checkov", "description": "Runs checkov on Terraform templates.", "entry": "checkov -d .", "language": "python", "pass_filenames": false, "always_run": false, "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "terrascan", "name": "terrascan", "description": "Runs terrascan on Terraform templates.", "language": "script", "entry": "terrascan.sh"}]
[{"id": "cargo-fmt", "name": "Cargo fmt", "description": "Format files with cargo fmt.", "types": ["rust"], "entry": "hooks/cargo_fmt.sh", "language": "script", "require_serial": true}, {"id": "cargo-check", "name": "cargo check", "description": "Check the package for errors.", "entry": "cargo check", "language": "system", "types": ["rust"], "pass_filenames": false}, {"id": "cargo-clippy", "name": "clippy", "description": "Lint rust sources", "entry": "cargo clippy", "language": "system", "args": ["--", "-D", "warnings"], "types": ["rust"], "pass_filenames": false}, {"id": "cargo-machete", "name": "cargo machete", "description": "Check unused dependencies", "entry": "cargo machete", "language": "system", "args": ["--"], "types": ["rust"], "pass_filenames": false}]
[{"id": "run-python", "name": "Run python", "description": "Run any python command, use additional_dependencies to add necessary packages.", "entry": "run-python", "language": "python"}, {"id": "run-node", "name": "Run node", "description": "Run any node command, use additional_dependencies to add necessary packages.", "entry": "run-node", "language": "node"}]
[{"id": "cairo-lint", "name": "check lint cairo", "description": "checks lint of contracts using amarna", "entry": "check-lint", "language": "python"}, {"id": "cairo-format", "name": "check format cairo", "description": "checks formatting of contracts using cairo-format", "entry": "check-format", "language": "python"}]
[{"id": "terraform-fmt", "name": "Terraform fmt", "description": "Rewrites all Terraform configuration files to a canonical format", "entry": "hooks/terraform-fmt.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "terraform-validate", "name": "Terraform validate", "description": "Validates all Terraform configuration files", "entry": "hooks/terraform-validate.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$", "require_serial": true}, {"id": "packer-validate", "name": "Packer validate", "description": "Validates all Packer configuration files", "entry": "hooks/packer-validate.sh", "language": "script", "files": "(\\.pkr\\.(hcl|json)|\\.pkrvars\\.hcl)$", "require_serial": true}, {"id": "tflint", "name": "tflint", "description": "Linter for Terraform source code", "entry": "hooks/tflint.sh", "language": "script", "files": "\\.tf$", "exclude": "\\.+.terraform\\/.*$"}, {"id": "terragrunt-hclfmt", "name": "Terragrunt hclfmt", "description": "Rewrites all Terragrunt configuration files to a canonical format", "entry": "hooks/terragrunt-hclfmt.sh", "language": "script", "files": "\\.hcl$", "exclude": "(?x)^(\n  .+\\.terraform\\/.*$|\n  .+\\.terragrunt-cache\\/.*$|\n)$\n"}, {"id": "shellcheck", "name": "Shellcheck Bash Linter", "description": "Performs linting on bash scripts", "entry": "hooks/shellcheck.sh", "language": "script"}, {"id": "gofmt", "name": "gofmt", "description": "Gofmt formats Go programs", "entry": "hooks/gofmt.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "goimports", "name": "goimports", "description": "Goimports updates imports and formats in the same style as gofmt", "entry": "hooks/goimports.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "golint", "name": "golint", "description": "Golint is a linter for Go source code", "entry": "hooks/golint.sh", "language": "script", "files": "\\.go$", "exclude": "vendor\\/.*$"}, {"id": "yapf", "name": "yapf", "description": "yapf (Yet Another Python Formatter) is a python formatter from Google", "entry": "hooks/yapf.sh", "language": "script", "files": "\\.py$", "exclude": "(?x)^(\n  \\.tox\\/.*$|\n  __pycache__\\/.*$\n)$\n"}, {"id": "helmlint", "name": "helmlint", "description": "Run helm lint, a linter for helm charts", "entry": "hooks/helmlint.sh", "language": "script", "files": "\\.((ya?ml)|(tpl))$", "require_serial": true}, {"id": "markdown-link-check", "name": "markdown-link-check", "description": "Run markdown-link-check to check all the relative and absolute links in markdown docs.", "entry": "hooks/mdlink-check.sh", "language": "script", "files": "\\.md$", "exclude": "vendor\\/.*$"}, {"id": "check-terratest-skip-env", "name": "check-terratest-skip-env", "description": "Check all go source files for any uncommented os.Setenv calls setting a terratest SKIP environment.", "entry": "./hooks/check_skip_env.py", "language": "script", "files": "\\.go$"}]
[{"id": "gitlabci_refs", "name": "Gitlab-ci refs", "description": "Rewrites refs of included gitlab-ci yml files.", "entry": "check_included_ci_ref.py", "language": "script", "files": "(\\.yml)$"}]
[{"id": "go-fmt-import", "name": "go import/fmt", "entry": "run-go-fmt-import.sh", "files": "\\.go$", "language": "script", "description": "Runs `goimport,gofmt`, requires golang"}, {"id": "go-vet", "name": "go vet", "entry": "run-go-vet.sh", "files": "\\.go$", "language": "script", "description": "Runs `go vet`, requires golang"}, {"id": "go-lint", "name": "golint", "entry": "run-go-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `go lint`, requires golang"}, {"id": "go-unit-tests", "name": "go unit test", "entry": "run-go-unit-tests.sh", "files": "\\.go$", "language": "script", "description": "Runs `go test`, requires golang"}, {"id": "gofumpt", "name": "gofumpt", "entry": "run-go-gofumpt.sh", "files": "\\.go$", "language": "script", "description": "Runs `gofumpt`, requires github.com/mvdan/gofumpt"}, {"id": "go-err-check", "name": "go errcheck", "entry": "run-go-err-check.sh", "files": "\\.go$", "language": "script", "description": "Runs `errcheck`, requires github.com/kisielk/errcheck"}, {"id": "go-static-check", "name": "go staticcheck", "entry": "run-go-static-check.sh", "files": "\\.go$", "language": "script", "description": "Runs `staticcheck`, install https://staticcheck.io/docs/"}, {"id": "golangci-lint", "name": "go golangci-lint", "entry": "run-golangci-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `golangci-lint`, install https://github.com/golangci/golangci-lint"}, {"id": "go-ruleguard", "name": "go-ruleguard", "entry": "run-go-ruleguard.sh", "files": "\\.go$", "language": "script", "description": "Runs `go-ruleguard`, install https://github.com/quasilyte/go-ruleguard"}]
[{"id": "stylelint", "name": "stylelint", "entry": "stylelint", "language": "node", "files": "\\.(css|scss|sass)$", "args": [], "require_serial": false, "additional_dependencies": ["stylelint@15.10.3"], "minimum_pre_commit_version": "0"}]
[{"id": "terraform", "name": "terraform", "description": "", "entry": "terraform", "language": "docker", "types": ["file"], "args": [], "require_serial": false, "minimum_pre_commit_version": "0"}]
[{"id": "julia-format", "name": "format julia code", "description": "Run `JuliaFormatter.jl` against Julia source files", "language": "system", "files": "\\.jl$", "entry": "julia -e '\nusing Pkg\nPkg.activate(\".\")\nusing JuliaFormatter\nformat(ARGS)\nout = Cmd(`git diff --name-only`) |> read |> String\nif out == \"\"\n    exit(0)\nelse\n    @error \"Some files have been formatted !!!\"\n    write(stdout, out)\n    exit(1)\nend'\n"}]
[{"id": "trufflehog", "name": "TruffleHog", "description": "Finds leaked credentials in your code", "entry": "hooks/trufflehog.sh", "language": "script", "require_serial": true}]
[{"id": "dead", "name": "detect dead code", "description": "dead simple python dead code detection", "entry": "dead", "pass_filenames": false, "language": "python", "language_version": "python3", "types": ["python"]}]
[{"id": "max-files-per-commit", "name": "Max files per commit", "description": "This hooks fails if above limit files per commit", "entry": "max-files-per-commit", "language": "python", "language_version": "python3"}]
[{"id": "swiftlint", "name": "Swift Lint", "description": "Run swift lint validation on code.", "entry": "pre_commit_hooks/swiftlint.sh", "language": "script", "files": "\\.(swift)$"}, {"id": "podfile-local-path", "name": "Local Path in Podfile", "description": "Verify there are no local paths in the Podfile and Podfile.lock.", "entry": "pre_commit_hooks/podfile-local-path.sh", "language": "script", "files": "Podfile.*"}]
[{"id": "eradicate", "name": "eradicate", "description": "Apply eradicate", "entry": "eradicate", "language": "python", "files": "\\.py$", "args": ["--in-place"]}]
[{"id": "hlint-ignore-duplication", "name": "hlint-ignore-duplication", "description": "Runs HLint, but ignores duplications.", "entry": "hlint -i 'Reduce duplication'", "language": "system", "files": "\\.l?hs$"}, {"id": "stylish-haskell", "name": "stylish-haskell", "description": "Prettifies Haskell code using stylish-haskell.", "entry": "stylish-haskell --inplace", "language": "system", "files": "\\.l?hs$"}]
[{"id": "formate", "name": "formate", "entry": "formate", "language": "python", "types_or": ["python", "pyi"], "require_serial": false, "args": ["--verbose", "--diff"], "additional_dependencies": []}]
[{"id": "format-xmllint", "name": "Formats XML files", "description": "Format XML files to match xmllint --format option", "entry": "check-xmllint", "args": ["-i"], "language": "script", "types_or": ["xml"]}, {"id": "check-xmllint", "name": "Check XML files formatting", "description": "Check that XML files format matches xmllint --format option", "entry": "check-xmllint", "language": "script", "types_or": ["xml"]}]
[{"id": "go-run-test", "name": "go test", "description": "Run golang tests", "entry": "go-run-test", "language": "python", "pass_filenames": false}, {"id": "go-run-fmt", "name": "go fmt", "description": "Run golang formatter", "entry": "go-run-fmt", "language": "python", "pass_filenames": false}]
[{"id": "kubeconform-helm", "name": "Kubeconform Helm", "description": "Run kubeconform for Helm charts", "language": "script", "entry": "scripts/pre-commit.py", "files": "^(helper-|)charts/[^/]+/(\\.kubeconform|\\.helmignore|templates/NOTES.txt|.*\\.(ya?ml|json|tpl))$", "require_serial": true}]
[{"id": "elixir-format", "name": "Run elixir format", "description": "Runs elixir formatter.", "language": "system", "entry": "mix format", "files": "^(.*).(ex|exs)$"}, {"id": "elixir-credo", "name": "Run credo", "description": "Runs static code analysis tool for the Elixir language .", "language": "system", "entry": "mix credo --strict", "files": "^(.*).(ex|exs)$"}]
[{"id": "bandit", "name": "bandit", "description": "Bandit is a tool for finding common security issues in Python code", "entry": "bandit", "language": "python", "language_version": "python3", "types": ["python"]}, {"id": "mypy", "name": "mypy", "entry": "mypy", "language": "python", "types_or": ["python", "pyi"], "args": ["--ignore-missing-imports", "--scripts-are-modules"], "require_serial": true, "additional_dependencies": [], "minimum_pre_commit_version": "2.9.2"}, {"id": "hadolint-docker", "name": "Lint Dockerfiles", "description": "Runs hadolint Docker image to lint Dockerfiles", "language": "docker_image", "types": ["dockerfile"], "entry": "hadolint/hadolint:v2.8.0 hadolint"}]
[{"id": "env-sample-sync", "name": "env-sample-sync env sample file synchronizer", "description": "Automatically and safely synchronize .env files with env.sample", "language": "golang", "entry": "env-sample-sync", "always_run": true, "pass_filenames": false, "stages": ["commit"]}]
[{"id": "orca-cli-secrets", "name": "Orca Security - Secret Detection", "description": "Detect hardcoded secrets using orca-cli", "entry": "orca-cli --silent secrets pre-commit scan", "language": "system", "stages": ["commit"], "pass_filenames": false}, {"id": "docker-orca-cli-secrets", "name": "Orca Security - Secret Detection", "description": "Detect hardcoded secrets using orca-cli", "entry": "-e ORCA_SECURITY_PROJECT_KEY -e ORCA_SECURITY_API_TOKEN ghcr.io/orcasecurity/orca-cli:latest --silent secrets pre-commit scan --path /src", "language": "docker_image", "stages": ["commit"], "pass_filenames": false}]
[{"id": "test-hook", "name": "Test Hook", "entry": "run-test-hook.sh", "types": ["text"], "exclude": ".yaml$|.yml$", "language": "script", "description": "This is an example hook to demonstrate how to create a pre-commit hook", "args": ["--d"]}]
[{"id": "bashate", "name": "bashate", "description": "This hook runs bashate for linting shell scripts", "entry": "bashate", "language": "python", "types": ["shell"]}]
[{"id": "pyupgrade-conda", "name": "pyupgrade-conda", "entry": "pyupgrade", "language": "conda", "description": "Automatically upgrade syntax for newer versions.", "types": ["python"]}]
[{"id": "prepare-commit-msg", "name": "prepare-commit-msg", "description": "add TASK-NO to git commit message template", "entry": "config/git/prepare-commit-msg", "language": "script", "files": ""}]
[{"id": "commit-msg-format", "name": "Validate commit message format", "description": "This hook validates that commit messages meet a certain format criteria", "entry": "hooks/commit-msg-format.sh", "language": "script"}]
[{"id": "check-po", "name": "check syntax of po files", "entry": "check-po", "language": "python", "files": "\\.po"}]
[{"id": "prettier-conda", "name": "prettier-conda", "description": "An opinionated code formatter", "entry": "prettier", "language": "conda", "types": ["text"], "args": ["--write", "--list-different", "--ignore-unknown"]}]
[{"id": "svglint", "name": "svglint", "entry": "svglint -C", "description": "Linter for SVGs", "language": "node", "types": ["svg"], "minimum_pre_commit_version": "1.5.0"}]
[{"id": "yamlfix", "name": "yamlfix", "entry": "yamlfix", "language": "python", "language_version": "python3", "types": ["yaml"]}]
[{"id": "circleci-config-validate", "name": "CircleCI config validation", "description": "Test if the CircleCI config is well formed.", "entry": "hooks/circleci-config-validate.sh", "language": "script", "files": "^.circleci/*.yml$"}, {"id": "go-fmt", "name": "go fmt", "description": "Runs `go fmt` and asserts no changes are needed.", "entry": "hooks/go-fmt.sh", "language": "script", "files": "\\.go$"}, {"id": "go-test", "name": "go test", "description": "Runs `go test` and asserts no tests are failing.", "entry": "hooks/go-test.sh", "language": "script", "files": "\\.go$"}, {"id": "go-mod-tidy", "name": "go mod tidy", "description": "Runs `go mod tidy` to ensure `go.mod` matches the project source.", "entry": "hooks/go-mod-tidy.sh", "language": "script", "files": "\\.go$"}, {"id": "go-generate", "name": "go generate", "description": "Runs `go generate` against the projects go files.", "entry": "hooks/go-generate.sh", "language": "script", "files": "\\.go$", "always_run": true}, {"id": "forbid-binary", "name": "Forbid binaries", "description": "Forbid binary files from being committed", "entry": "hooks/forbid-binary.sh", "language": "script", "types": ["binary"]}, {"id": "shellcheck", "name": "Test shell scripts with shellcheck", "description": "Shell scripts conform to shellcheck", "entry": "hooks/shellcheck.sh", "language": "script", "types": ["shell"], "exclude_types": ["csh", "perl", "python", "ruby", "tcsh", "zsh"], "args": ["-e", "SC1091"]}, {"id": "shfmt", "name": "Check shell style with shfmt", "language": "script", "entry": "hooks/shfmt.sh", "types": ["shell"], "exclude_types": ["csh", "perl", "python", "ruby", "tcsh", "zsh"], "args": ["-l", "-i", "2", "-ci"]}]
[{"id": "bazel-buildifier", "name": "bazel buildifier", "entry": "run-bazel-buildifier.sh", "files": "BUILD.bazel|BUILD", "language": "script", "description": "Runs `buildifier`, requires bazel buildifier"}, {"id": "go-imports", "name": "go imports", "entry": "run-go-imports.sh", "files": "\\.go$", "language": "script", "description": "Runs `go imports`, requires golang"}, {"id": "go-critic", "name": "go-critic", "entry": "run-go-critic.sh", "files": "\\.go$", "language": "script", "description": "Runs `go-critic`, requires go-critic"}, {"id": "golangci-lint", "name": "golangci-lint", "entry": "run-golangci-lint.sh", "files": "\\.go$", "language": "script", "description": "Runs `golangci-lint`, requires golangci-lint"}, {"id": "golangci-lint-conf", "name": "golangci-lint-conf", "entry": "run-golangci-lint-conf.sh", "files": "\\.go$", "language": "script", "description": "Runs `golangci-lint` read local config file, requires golangci-lint"}, {"id": "go-mod-tidy", "name": "go mod tidy", "entry": "run-go-mod-tidy.sh", "files": "\\.go$", "language": "script", "description": "Runs `go mod tidy` make sure latest and avaliable go mod file"}]
[{"id": "pylint", "name": "pylint", "entry": "run_pylint", "language": "python", "types": ["python"], "require_serial": true}]
[{"id": "swift-format", "name": "swift-format", "description": "Check swift files for formating issues with swift-format", "entry": "hooks/format.sh", "language": "script", "require_serial": true, "types": ["swift"]}]
[{"id": "shfmt", "name": "Check shell style with shfmt", "language": "script", "entry": "pre_commit_hooks/shfmt", "types": ["shell"]}]
[{"id": "hide-hassio-secrets", "name": "hide home assistant secrets", "description": "generates a dummy secrets.yaml file", "language": "python", "entry": "hide-hassio-secrets", "files": "^$"}]
[{"id": "pretty-format-golang", "name": "Go Formatter", "description": "Runs gofmt over golang source files.", "entry": "pretty-format-golang", "language": "python", "types": ["go"], "minimum_pre_commit_version": "1"}, {"id": "pretty-format-ini", "name": "Pretty format INI", "description": "This hook sets a standard for formatting INI files.", "entry": "pretty-format-ini", "language": "python", "types": ["ini"], "minimum_pre_commit_version": "1"}, {"id": "pretty-format-java", "name": "Google Java Formatter", "description": "Runs Google Java Formatter over Java source files", "entry": "pretty-format-java", "language": "python", "types": ["java"], "require_serial": true, "minimum_pre_commit_version": "1"}, {"id": "pretty-format-kotlin", "name": "KTLint", "description": "Runs KTLint over Kotlin source files", "entry": "pretty-format-kotlin", "language": "python", "types": ["kotlin"], "minimum_pre_commit_version": "1", "require_serial": true}, {"id": "pretty-format-rust", "name": "cargo-fmt", "description": "Runs cargo fmt over Rust source files", "entry": "pretty-format-rust", "language": "python", "types": ["rust"], "minimum_pre_commit_version": "1"}, {"id": "pretty-format-toml", "name": "Pretty format TOML", "description": "This hook sets a standard for formatting TOML files.", "entry": "pretty-format-toml", "language": "python", "types": ["toml"], "minimum_pre_commit_version": "1"}, {"id": "pretty-format-yaml", "name": "Pretty format YAML", "description": "This hook sets a standard for formatting YAML files.", "entry": "pretty-format-yaml", "language": "python", "types": ["yaml"], "minimum_pre_commit_version": "1"}]
[{"id": "buf-lint", "name": "Lint Protobuf files", "description": "Runs `buf lint` on your Protobuf project", "language": "docker_image", "types": ["proto"], "entry": "bufbuild/buf:1.4.0", "args": ["lint"]}]
[{"id": "beautysh", "name": "beautysh", "description": "A Bash beautifier for the masses.\nhttps://pypi.python.org/pypi/beautysh\n", "entry": "beautysh", "language": "python", "types": ["shell"]}]
