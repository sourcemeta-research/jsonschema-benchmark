{"name": "scaling", "root": "~/", "windows": [{"servers": {"layout": "tiled", "panes": [{"test_0": ["clear"]}]}}]}
{"name": "Quasipanacea", "root": "./repos", "windows": [{"client-web": "cd client-web && ./bake dev"}, {"server-deno": "cd server-deno && ./bake dev"}, {"webext": "cd webext && ./bake dev"}]}
{"name": "scaling", "root": "~/", "windows": [{"servers": {"layout": "tiled", "panes": [{"test_0": ["clear"]}, {"test_1": ["clear"]}, {"test_2": ["clear"]}, {"test_3": ["clear"]}]}}]}
{"name": "scaling", "root": "~/", "windows": [{"servers": {"layout": "tiled", "panes": [{"test_0": ["clear"]}, {"test_1": ["clear"]}, {"test_2": ["clear"]}, {"test_3": ["clear"]}, {"test_4": ["clear"]}, {"test_5": ["clear"]}, {"test_6": ["clear"]}]}}]}
{"name": "taskcafe", "root": ".", "windows": [{"services": {"root": "./", "panes": [{"api": ["go run cmd/taskcafe/main.go web"]}, {"yarn": ["cd frontend", "yarn start"]}, {"worker": ["go run cmd/taskcafe/main.go worker"]}]}}, {"web/editor": {"root": "./frontend", "panes": ["vim src/index.tsx"]}}, {"api/editor": {"root": "./", "panes": ["vim cmd/taskcafe/main.go"]}}, {"database": {"root": "./", "panes": ["pgcli postgres://taskcafe:taskcafe_test@localhost:8855/taskcafe"]}}]}
{"name": "struct-scss", "root": "<%= Dir.pwd %>", "windows": [{"editor": {"layout": "main-vertical", "panes": ["vim", "npm run build:watch", "npm run test:watch", null]}}]}
{"name": "example", "root": "~/rails/example", "on_project_start": "lsof -t -i tcp:3000 | xargs kill -KILL; lsof -t -i tcp:3035 | xargs kill -KILL;", "windows": [{"shell": "nvm use && code ."}, {"server": {"layout": "3c9e,117x81,0,0[117x58,0,0,2,117x22,0,59{84x22,0,59,3,32x22,85,59,4}]", "panes": ["nvm use && bundle exec rails s", "nvm use && bin/webpack-dev-server", "nvm use && redis-cli flushall && bundle exec sidekiq -C config/sidekiq.yml"]}}, {"console": "bundle exec rails c"}]}
{"name": "deploy-qownnotes", "windows": [{"deploy": {"layout": "tiled", "panes": [{"launchpad": ["../ubuntu-launchpad/build-for-launchpad.sh"]}, {"obs": ["../obs/build-for-obs.sh"]}, {"aur": ["aur/build-for-aur.sh"]}, {"gentoo": ["gentoo/build-for-gentoo.sh"]}, {"slackware": ["slackware/build-for-slackware.sh"]}, {"snap": ["snap/build-for-launchpad-snap.sh"]}, {"launchpad-qt6": ["../ubuntu-launchpad/build-for-launchpad-qt6.sh"]}]}}]}
{"name": "<%= ENV.fetch(\"APP_NAME\") %>", "root": "<%= @root_dir %>", "on_project_start": "code .", "on_project_exit": "docker compose down", "windows": [{"main": {"synchronize": "after", "panes": [{"terminal": ["sleep 10", "bin/rails db:migrate RAILS_ENV=development", "git status"]}]}}, {"frontend": "bin/webpack-dev-server"}, {"backend": "bin/rails s"}, {"database": "docker compose up"}, {"logs": "tail -f log/development.log"}]}
{"name": "dev", "root": "~/code/the-cure", "windows": [{"editor": {"layout": "main-vertical", "panes": ["lvim", "modd", "npm --prefix ./assets run watch"]}}]}
{"name": "changepack", "root": "~/", "socket_name": "changepack", "windows": [{"changepack": {"layout": "tiled", "panes": ["bundle exec rails tailwindcss:watch", "CYPRESS=1 RAILS_ENV=test bundle exec rails server -p 5017", "bundle exec guard", "bundle exec sidekiq -C config/sidekiq.yml"]}}]}
{"name": "movie_rating", "root": "~/Projects/MovieRating", "on_project_start": "source venv/bin/activate", "pre_window": "source venv/bin/activate", "windows": [{"MovieRating": {"layout": "main-horizontal", "panes": ["vim", "tail -f log/movie_rating.log", null]}}]}
{"name": "serverless-adapter", "root": "./", "windows": [{"lib": {"layout": "tilled", "panes": ["npm run test:watch", "clear"]}}, {"docs": {"layout": "tilled", "panes": ["cd www && npm run start", "cd www"]}}]}
{"name": "example", "root": "~/rails/example", "on_project_start": "lsof -t -i tcp:3000 | xargs kill -KILL; lsof -t -i tcp:3035 | xargs kill -KILL;", "windows": [{"shell": "nvm use && code ."}, {"server": {"layout": "3c9e,117x81,0,0[117x58,0,0,2,117x22,0,59{84x22,0,59,3,32x22,85,59,4}]", "panes": ["nvm use && bundle exec rails s", "nvm use && bin/webpack-dev-server", "nvm use && redis-cli flushall && bundle exec sidekiq -C config/sidekiq.yml"]}}, {"console": "bundle exec rails c"}]}
{"name": "zenodotus", "root": "~/Repositories/Reporters_Lab/zenodotus", "attach": false, "on_project_exit": "tmux -CC attach", "windows": [{"Zenodotus": {"layout": "main-vertical", "panes": ["bundle exec rails s", "./bin/webpack-dev-server"]}}]}
{"name": "webfolio", "root": "./", "windows": [{"editor": "vim"}, {"misc": "bash"}, {"pages": {"root": "../../pages/", "panes": ["vim"]}}, {"server": {"root": "../../../", "panes": ["php -S localhost:8000 system/router.php"]}}, {"sass": "sass -s compressed --watch scss/theme.scss css-compiled/theme.min.css"}]}
{"name": "skyport", "root": "<%= ENV[\"SOURCES_PARENT_DIR\"] %>/swm-core", "pre_window": "make cr", "startup_window": "core", "windows": [{"core": {"layout": "main-horizontal", "panes": [{"core": ["scripts/run-in-shell.sh -x"]}]}}, {"logs": {"layout": "main-horizontal", "panes": [{"core-logs": ["tail -f /opt/swm/spool/node\\@*/log/$(date +\"%Y\")"]}, {"scheduler-logs": ["tail -f /opt/swm/spool/node\\@*/log/scheduler.log"]}]}}, {"terminal": {"layout": "2b0d,137x56,0,0{26x56,0,0,2,110x56,27,0[110x27,27,0,7,110x28,27,28,8]}", "panes": [{"grid-tree": ["sleep 3", "watch ./scripts/swmctl grid tree"]}, {"list-jobs": ["sleep 3", "cd <%= ENV[\"SOURCES_PARENT_DIR\"] %>/swm-console-term", "watch ./swm-console --job-list"]}, {"list-nodes": ["sleep 3", "cd <%= ENV[\"SOURCES_PARENT_DIR\"] %>/swm-console-term", "watch ./swm-console --node-list"]}]}}, {"jupyter": {"panes": [{"jupyterlab": ["clear", "cd <%= ENV[\"SOURCES_PARENT_DIR\"] %>/swm-jupyter-term", "conda activate swm-jupyter", ". .venv/bin/activate", "jupyterhub"]}]}}, {"gate": {"panes": [{"cloud-gate": ["clear", "cd <%= ENV[\"SOURCES_PARENT_DIR\"] %>/swm-cloud-gate", "./run.sh"]}]}}, {"openstack": {"pre_window": "make cr", "root": "<%= ENV[\"SOURCES_PARENT_DIR\"] %>/openstack-box", "panes": [{"vagrant": ["clear", "vagrant status 2>/dev/null | grep \"Current machine states\" -A 2"]}]}}]}
{"name": "geotranslator", "root": ".", "windows": [{"main": {"layout": "main-vertical", "panes": ["ls src/*.elm | entr -cr bash -c \"clear && tmux clear-history && make\"", "cd server && npm install && echo \"run> W3WAPIKEY=[YOUR-API-KEY] RUNTIME_ENV=1 npm start\""]}}]}
{"name": "oas", "root": "<%= ENV[\"PWD\"] %>", "windows": [{"editor": {"panes": ["vi"]}}, {"run": {"panes": ["cargo run -- --dev run", "docker-compose -f docker-compose.dev.yml up", "cd frontend; yarn start", null]}}, {"cli": ["git status"]}]}
{"name": "gamepack", "root": "~/", "socket_name": "gamepack", "windows": [{"gamepack": {"layout": "tiled", "panes": ["bundle exec rails tailwindcss:watch", "CYPRESS=1 RAILS_ENV=test bundle exec rails server -p 5017", "bundle exec guard", "bundle exec sidekiq -C config/sidekiq.yml"]}}]}
{"name": "emulate_windows", "root": ".", "windows": [{"editor": {"layout": "even-horizontal", "panes": ["firebase emulators:start", "npm run watch"]}}]}
{"name": "eslint-configs", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "zsh-goenv", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "cli-demos", "root": ".", "tmux_command": "byobu", "windows": [{"ranger": ["cd ~", "clear", "echo -e \"\\nranger\\nDemo in kitty\" | boxes -d peek -a c"]}, {"bat": ["clear", "echo -e \"\\nbat slides.md\\n\" | boxes -d peek -a c"]}, {"(porn) colorls": ["clear", "echo -e \"\\nlc\\n\" | boxes -d peek -a c"]}, {"(porn) lolcat": ["clear", "echo -e \"\\nla | lolcat\\n\" | boxes -d peek -a c"]}, {"(porn) no-more-secrets": ["clear", "echo -e \"\\nla | nms | lolcat\\n\" | boxes -d peek -a c"]}]}
{"name": "my_tmux", "root": "~/", "windows": [{"ui": {"root": "~/code/repos", "layout": "even-horizontal", "panes": ["cd proj1", "cd proj2"]}}, {"api": {"root": "~/code/repos", "layout": "even-horizontal", "panes": ["cd proj3"]}}, {"services": {"root": "~/code/repos/", "layout": "tiled", "panes": ["cd proj4", "cd proj5", "cd proj6", "cd proj7", "cd proj8", "cd proj9"]}}, {"test-containers": {"root": "~/code/repos", "layout": "tiled", "panes": ["cd proj1", "cd proj2", "cd proj3", "cd proj4"]}}]}
{"name": "timestamps-elm", "root": "~/dev/timestamps-elm", "pre_window": "export PUBLIC_URL=.", "windows": [{"main": {"layout": "main-vertical", "panes": ["emacs -nw .", "elm-app start", null]}}]}
{"name": "blog", "pre_window": "nix-shell --run zsh", "windows": [{"server": "jekyll serve --drafts --incremental"}, {"editor": "emacs"}]}
{"name": "nextjs", "root": "~/git/nextjs", "windows": [{"editor": "vim"}, {"server": "yarn run dev"}]}
{"name": "mrl", "root": "~/multimodal-reward-learning", "pre_window": "conda activate mrl", "windows": [{"monitor": "htop"}, {"gpu": "nvidia-smi"}, {"run": null}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch sarc_environment sarc.launch", "waitForRos; roslaunch sarc_environment sarc_low_map.launch", "waitForOdometry; gz camera -c gzclient_camera -f ${UAV_NAME}; history -s gz camera -c gzclient_camera -f ${UAV_NAME}"]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos/pos1.yaml\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"arming": {"layout": "tiled", "panes": ["waitForRos; rosrun sarc_environment fall.py"]}}]}
{"name": "terraform-aws-api-gateway", "root": "<%= ENV[\"PROJECTS\"] %>/terraform/modules/terraform-aws-api-gateway", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate terraform-aws-api-gateway", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": ["editor", "pwd", "pwd"]}}, {"python": {"layout": "main-vertical", "panes": ["ipython"]}}, {"databases": {"layout": "main-vertical", "panes": ["postgresql", "ls"]}}, {"aws": {"layout": "main-vertical", "panes": ["webserver", "databases"]}}, {"docker": {"layout": "main-vertical", "panes": ["webserver", "databases"]}}]}
{"name": "sean_tutorial", "root": "~/sim_ws", "windows": [{"navstack": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"bridge": ["roslaunch --wait social_sim_ros sim_tcp_bridge.launch"]}, {"move_base": ["rosrun social_sim_ros tutorial_controller.py"]}, {"description": ["roslaunch --wait social_sim_ros kuri_description.launch"]}, {"map_publisher": ["rosrun social_sim_ros map_publisher.py"]}, {"trial_info": ["roslaunch --wait social_sim_ros trial_info.launch prefix:=./data/metrics/<%=@settings['task']%> condition:=navstack"]}, {"scan": ["roslaunch --wait social_sim_ros depth_to_laserscan.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find social_sim_ros)/config/move.rviz"]}]}}]}
{"name": "e-bpm", "root": "~/Workspace/e-bpm/", "windows": [{"client": {"root": "e-bpm-client", "layout": "main-vertical", "panes": [{"develop": "gatsby develop"}]}}, {"server": {"root": "e-bpm", "layout": "main-vertical", "panes": [{"develop": "air"}]}}]}
{"name": "sharptools", "root": "~/path/to/sharptools", "on_project_start": "lsof -t -i tcp:3000 | xargs kill -KILL; lsof -t -i tcp:3035 | xargs kill -KILL;", "windows": [{"shell": "nvm use && code ."}, {"server": {"layout": "3c9e,117x81,0,0[117x58,0,0,2,117x22,0,59{84x22,0,59,3,32x22,85,59,4}]", "panes": ["nvm use && bundle exec rails s", "nvm use && bin/webpack-dev-server"]}}, {"console": "bundle exec rails c"}]}
{"name": "hadenlabs-terraform-module-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "webservice", "root": ".", "windows": [{"webservice": {"layout": "tiled", "panes": ["celery -A webservice.celery worker -c 2", "python run.py", null]}}]}
{"name": "landing", "root": "~/ghq/github.com/sentrei/landing", "attach": true, "windows": [{"zsh": "neofetch"}, {"zsh": "neofetch"}, {"zsh": "neofetch"}]}
{"name": "demo", "root": "<%= ENV[\"PWD\"] %>", "on_project_start": "brew services start zookeeper; brew services start kafka; sleep 2", "windows": [{"run": {"layout": "tiled", "panes": ["cd streamingdemo; source .envrc; cd src/streamingdemo; DEVICE_IDS=drnic-pi,drnic-laptop go run main.go", "cd images-from-postapi; source .envrc; cd src/images-from-postapi; DEVICE_IDS=drnic-pi,drnic-pi,drnic-laptop go run main.go", "sleep 5; cd imagesfromopencv-to-postapi; DEVICE_ID=drnic-laptop POST_ENDPOINT=http://localhost:8000/image CAMERA=opencv python3 app.py", "cd objectdetector; DEVICE_ID=drnic-laptop python3 app.py", "cd edgedetector;   DEVICE_ID=drnic-laptop python3 app.py", "cd objectdetector; DEVICE_ID=drnic-pi python3 app.py", "cd edgedetector;   DEVICE_ID=drnic-pi python3 app.py"]}}, {"cf-logs": {"layout": "tiled", "panes": ["cf logs statusconsumer", "cf logs images-from-postapi", "cf logs objectdetector-drnic-laptop", "cf logs streamingdemo"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch offshore_uav_pack offshore_rig.launch \"world_name:=fase3\""]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/uav1_pos.yaml --enable-bluefox-camera\"", "history -s roslaunch offshore_uav_pack spawn_wamv1.launch \";\" roslaunch offshore_uav_pack spawn_wamv3.launch \";\" roslaunch offshore_uav_pack spawn_wamv2.launch \";\" roslaunch offshore_uav_pack spawn_mes_wamv.launch"]}}, {"control": {"layout": "tiled", "panes": ["waitForOdometry; roslaunch mrs_uav_general core.launch config_odometry:=./custom_configs/odometry.yaml"]}}, {"takeoff": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}]}
{"name": "rec3d_pkg", "root": "~/", "startup_window": "planner", "windows": [{"bash": {"layout": "tiled", "panes": [null]}}, {"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"statue": {"layout": "tiled", "panes": ["sleep 2;roslaunch rec3d statue.launch"]}}, {"uavs": {"layout": "tiled", "panes": ["sleep 2; roslaunch rec3d spawn_uav.launch mav_name:=pelican y:=0.5"]}}, {"planner": {"layout": "tiled", "panes": ["sleep 6; rosrun rec3d mission_planner_cpp"]}}]}
{"name": "zzr_mailer", "root": ".", "windows": [{"editor": "nvim"}, {"server": "make run"}, {"django-q": "make q"}, {"temp": "sleep 2 && open -g -a \"Firefox\" http://localhost:8000 && exit"}]}
{"name": "blog", "root": ".", "windows": [{"content": {"layout": "main-horizontal", "panes": ["cd content && lc", "lc", "./run-docker-compose-server-start.sh", "sleep 5; source run-attach-to-running-container.sh"]}}, {"docs": {"panes": ["bat README.md"]}}]}
{"name": "zsh-scmbreeze", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "sextans", "root": "/home/kumiko/sextans", "socket_name": "sextans", "tmux_options": "-L sextans -f ./tmux.conf.dashboard", "windows": [{"dashboard": {"layout": "3201,286x42,0,0{64x42,0,0[64x13,0,0{32x13,0,0,0,31x13,33,0,15},64x28,0,14,3],221x42,65,0[221x20,65,0{110x20,65,0,1,110x20,176,0,7},221x8,65,21,2,221x12,65,30,6]}", "panes": ["watch -n 600 --color \"curl --silent wttr.in/Shanghai\\?0FQ\"", "watch -n 60 cal", "cava", "./github-activity.py", "hackernews_tui", "ncpamixer", "btm -C bottom-dashboard.toml"]}}]}
{"name": "delivery", "root": ".", "pre_window": "tmux set-option mouse on", "windows": [{"main": {"layout": "even-vertical", "panes": ["./compose.sh logs --follow server_fms server_auth server_comms", "./compose.sh logs --follow --tail 100 server_monitor", "./compose.sh logs --follow robot_central robot_comms", "./compose.sh logs --follow --tail 100 robot_monitor"]}}, {"robot": {"layout": "tiled", "panes": ["./compose.sh logs --follow robot_hmi", "./compose.sh logs --follow robot_locker", "./compose.sh logs --follow robot_sensors", "./compose.sh logs --follow robot_motion", "./compose.sh logs --follow robot_odom", "./compose.sh logs --follow robot_location"]}}]}
{"name": "shunkakinokicom", "root": "~/ghq/github.com/shunkakinoki/shunkakinoki.com", "attach": true, "windows": [{"zsh": "neofetch"}, {"zsh": "neofetch"}, {"zsh": "neofetch"}]}
{"name": "subsonic-now-playing", "windows": [{"vim": "vim ."}, {"zsh": "ls -la"}]}
{"name": "vasil-dev", "root": "/home/artur/Playground/blockchain_networks/Base_Projects", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["if [ -d \"cardano-node\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-node; fi", "cd cardano-node", "if [ -d \"vasil-dev\" ]; then echo \"vasil-dev Config folder already exists.\"; else cp -R /home/artur/Playground/blockchain_networks/vasil-dev/vasil-dev . ; fi", "./_cardano-node run --topology vasil-dev/topology.json --database-path vasil-dev/db --socket-path vasil-dev/node.socket --config vasil-dev/config.json"]}, {"db-sync": ["if [ -d \"cardano-db-sync\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-db-sync; fi", "cd cardano-db-sync", "PGPASSFILE=config/pgpass-vasil-dev db-sync-node/bin/cardano-db-sync --config config/vasil-dev-config.yaml --socket-path ../cardano-node/vasil-dev/node.socket --schema-dir schema/ --state-dir ledger-state/vasil-dev"]}, {"smash": ["cd cardano-db-sync", "PGPASSFILE=config/pgpass-vasil-dev ./_cardano-smash-server --config config/vasil-dev-config.yaml --port 3100 --admins admins.txt"]}, {"node_playground": ["sleep 20", "export CARDANO_NODE_SOCKET_PATH=/home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/vasil-dev/node.socket", "cardano-cli query tip --testnet-magic 9"]}, {"smash_playground": ["sleep 20", "cat /home/artur/Playground/blockchain_networks/vasil-dev/vasil-dev.txt", "echo \"Checking SMASH service status:\"", "curl http://localhost:3100/api/v1/status"]}]}}]}
{"name": "luca", "root": "<%= ENV[\"PROJECTS\"] %>/python/luca", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate luca", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "change-structures", "windows": [{"shell": "nix-shell --run zsh"}, {"editor": "nix-shell --run emacs"}, {"compile": "nix-shell --run \"latexmk -pdf -pvc -view=none -interaction=nonstopmode change-structures\""}, {"view": "evince change-structures.pdf"}]}
{"name": "sean_joystick", "root": "~/sim_ws", "windows": [{"joystick": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"bridge": ["roslaunch --wait social_sim_ros sim_tcp_bridge.launch"]}, {"move_base": ["roslaunch --wait social_sim_ros kuri_move_base_global_only.launch"]}, {"description": ["roslaunch --wait social_sim_ros kuri_description.launch"]}, {"map_publisher": ["rosrun social_sim_ros map_publisher.py"]}, {"recorder": ["rosrun social_sim_ros ros_controlled_recorder.py prefix:=/media/ntsoi/SEAN1/data/sim/"]}, {"scan": ["roslaunch --wait social_sim_ros depth_to_laserscan.launch"]}, {"voice": ["roslaunch --wait ros_vosk ros_vosk.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find social_sim_ros)/config/move.rviz"]}]}}]}
{"name": "hw2", "root": ".", "startup_window": "ros", "windows": [{"ros": {"layout": "01b7,205x57,0,0{102x57,0,0[102x28,0,0{51x28,0,0,0,50x28,52,0,2},102x28,0,29,3],102x57,103,0[102x14,103,0,4,102x13,103,15,8,102x28,103,29,6]}", "panes": ["roscore", {"vrep": ["until rostopic list ; do sleep 1; done", "clear", "vrep -s $VREP_SCENES/rosControlKinect.ttt"]}, {"rostopic": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rostopic list"]}, {"roslaunch": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "roslaunch turtlejoy turtlejoy.launch"]}]}}, {"vim": "vim -O floor_plane_ceres/src/floor_plane_regression.cpp floor_plane_regression/src/floor_plane_regression.cpp -c 'cd ~/ros_ws/build'"}, {"build": {"layout": "even-horizontal", "panes": [{"build": ["cd ~/ros_ws/", "clear"]}, {"git": ["cd ..", "clear"]}]}}]}
{"name": "fformation", "root": "~/", "windows": [{"fformation": {"layout": "main-vertical", "panes": [{"record": ["sleep 5"]}, {"rviz": ["sleep 5", "DISPLAY=:1 rosrun rviz rviz"]}, {"roscore": ["roscore"]}, {"interaction": ["sleep 5", "DISPLAY=:1 roslaunch shutter_photography shutter_photography.launch"]}, {"motors": ["sleep 5", "DISPLAY=:1 roslaunch shutter_bringup motors.launch"]}, {"face": ["sleep 5", "DISPLAY=:1 roslaunch shutter_face simple_face.launch"]}, {"movetostart": ["sleep 15", "rosrun shutter_photography move_to_start.py"]}, {"kinect": ["sleep 5", "DISPLAY=:1 roslaunch azure_kinect_ros_driver driver.launch body_tracking_enabled:=true point_cloud:=false rgb_point_cloud:=false fps:=5"]}, {"static_transform": ["sleep 5", "rosrun fformation_ros publish_static_transforms.py"]}, {"republish_markers": ["sleep 5", "rosrun fformation_ros republish_markers.py"]}, {"republish_group_markers": ["sleep 5", "rosrun fformation_ros republish_group_markers.py"]}, {"group_detection": ["sleep 5", "rosrun fformation_ros predict_groups.py"]}]}}]}
{"name": "zsh-jira", "root": "<%= ENV[\"PROJECTS\"] %>/zsh/zsh-jira", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate zsh-jira", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "vscode-extension-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch sarc_environment sarc.launch", "waitForRos; roslaunch sarc_environment sarc_map.launch", "waitForOdometry; gz camera -c gzclient_camera -f ${UAV_NAME}; history -s gz camera -c gzclient_camera -f ${UAV_NAME}"]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos/pos1.yaml\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"arming": {"layout": "tiled", "panes": ["waitForRos; rosrun sarc_environment fall.py"]}}]}
{"name": "vsc", "root": "~/projects/vsc-theme-gen", "pre": "code .", "startup_window": "FRONT", "windows": [{"BACK": {"root": "~/projects/vsc-theme-gen/back", "panes": ["docker run -it -d -v ~/projects/vsc-theme-gen/back:/app -p 8888:8080 silesky/vsc-theme-gen:latest"]}}, {"FRONT": {"root": "~/projects/vsc-theme-gen/front", "panes": ["webpack-dev-server", "sleep 5 && open http://localhost:3001/webpack-dev-server/index.html"]}}]}
{"name": "zsh-aws", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "watch_pipeline", "root": ".", "tmux_options": "-f ../.tmux.conf", "startup_window": "watch_pipeline", "windows": [{"watch_tests": {"layout": "main-vertical", "panes": ["make watch-local-dev-run-pipeline", "make watch-test-mypy", "make watch-test-black"]}}]}
{"name": "creator", "root": ".", "windows": [{"editor": "nvim ."}, {"server": "ls"}]}
{"name": "zsh-vagrant", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "sap-vagrant", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "GovGraph Search", "root": ".", "on_project_start": "npm install", "windows": [{"editor": {"layout": "main-vertical", "panes": ["emacs -nw .", "cd src/scss && ls main.scss | entr -dr sass main.scss > ../../../public/main.css", "npx webpack -w", "DISABLE_AUTH=1 PROJECT_ID=govuk-knowledge-graph npm run dev"]}}]}
{"name": "detection_and_visualization", "startup_window": "main", "pre_window": "export UAV_NAME=uav81; rosparam set use_sim_time 1; export ROSCONSOLE_CONFIG_FILE=\"$(pwd)/../../config/rosconsole.config\"", "windows": [{"main": {"layout": "tiled", "panes": ["roslaunch uav_detect detect_depth.launch", "roslaunch uav_localize localize_single.launch", "roslaunch uav_track uav_track.launch"]}}, {"vis": {"layout": "tiled", "panes": ["roslaunch uav_detect display_detections.launch", "roslaunch uav_localize backproject_location.launch", "roslaunch uav_track display_tracking.launch"]}}, {"rqt_reconfigure": {"layout": "even-vertical", "panes": ["rosrun rqt_reconfigure rqt_reconfigure"]}}, {"static_transform_publisher": {"layout": "even-vertical", "panes": ["rosrun tf2_ros static_transform_publisher 0 0 8 0 0 0 local_origin _link"]}}, {"bash": {"layout": "even-vertical", "panes": ["mv -n layout-UAV_LOCALIZATION.json ~/.layouts/; ~/.i3/layout_manager.sh UAV_LOCALIZATION"]}}]}
{"name": "OCJS-Emulator", "pre_window": "nvm use", "windows": [{"editor": "vim"}, {"serve": {"layout": "even-horizontal", "panes": ["node_modules/.bin/beefy js/app.js --live", "npm run watch"]}}]}
{"name": "cookiecutter-golang-project", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": 0, "startup_window": "simplenote", "windows": [{"batmobile": {"layout": "393b,295x75,0,0{209x75,0,0,0,85x75,210,0,3}", "pre": "cd ~/dev/batmobile", "panes": [null, null]}}, {"simplenote": {"panes": ["sncli"]}}, {"personal": {"panes": ["cd ~/dev"]}}, {"vpn": {"panes": ["test -f ~/vpn/vpn.sh && (cd ~/vpn && ./vpn.sh) || exit"]}}]}
{"name": "carrot_xyz", "root": "./", "startup_window": "carrot", "windows": [{"octomap": {"layout": "tiled", "panes": ["roscore", "waitForRos; rosrun converter vicon_tf_node", "waitForRos; roslaunch depth_image_proc convert_metric.launch", "waitForRos; sleep 0.5; roslaunch depth_image_proc point_cloud_xyz.launch", "waitForRos; sleep 1; roslaunch octomap_server octomap_mapping.launch"]}}, {"carrot": {"layout": "tiled", "panes": ["waitForRos; sleep 1; rosrun converter converter_node", "waitForRos; sleep 2; rosrun converter make_map_class.py", "waitForRos; sleep 3; rosrun converter path.py"]}}]}
{"name": "emotional", "windows": [{"build": {"layout": "tiled", "root": ".", "panes": ["npm run dev", "npm run start:dev"]}}]}
{"name": "hw3", "root": ".", "startup_window": "ros", "pre_window": "alias vrep='/cs-share/pradalier/V-REP_PRO_EDU_V3_2_3_64_Linux/vrep.sh'", "windows": [{"ros": {"layout": "b2a4,205x57,0,0{102x57,0,0[102x28,0,0{51x28,0,0,0,50x28,52,0,3},102x28,0,29,4],102x57,103,0[102x28,103,0,5,102x28,103,29,7]}", "panes": ["roscore", {"vrep": ["until rostopic list ; do sleep 1; done", "clear", "vrep -s $VREP_SCENES/drone-minimal.ttt"]}, {"rostopic": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rostopic list"]}, {"roslaunch": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "roslaunch model_prediction test.launch"]}]}}, {"vim": "vim model_prediction/launch/test.launch -c 'cd ~/ros_ws/build'"}, {"build": {"layout": "even-horizontal", "panes": [{"build": ["cd ~/ros_ws/", "clear"]}, {"git": ["cd ..", "clear"]}]}}]}
{"name": "python-example-elasticsearch", "root": "<%= ENV[\"PROJECTS\"] %>/python/python-example-elasticsearch", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "slides", "windows": [{"builds": {"layout": "tiled", "panes": ["npm run build:styles:watch", "npm run build:indexes:watch", "cd .. && live-server"]}}]}
{"name": "simulation", "root": "./", "on_project_start": "nums=$(shuf -i 1-30 -n 30 | tr '\\n' \" \"); echo \"UAV_NUMBERS=($nums)\" > /tmp/random_uav_numbers;", "pre_window": "source /tmp/random_uav_numbers; export UAV_NAME=\"uav${UAV_NUMBERS[1]}\"; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "startup_window": "status", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"pylon_camera_driver": {"layout": "tiled", "panes": ["waitForRos; roslaunch pylon_camera morhunenko.launch"]}}, {"rqt_imgs": {"layout": "tiled", "panes": ["waitForRos; rosrun rqt_image_view rqt_image_view /${UAV_NAME}/camera_localization/image_left_debug", "waitForRos; rosrun rqt_image_view rqt_image_view /${UAV_NAME}/camera_localization/image_right_debug", "waitForRos; rosrun rqt_image_view rqt_image_view /${UAV_NAME}/camera_localization/im_corresp", "history -s \"waitForRos; ../scripts/epipolar_line.py\""]}}, {"rviz": {"layout": "tiled", "panes": ["waitForRos; roscd uav_camera_localization; ./scripts/change_uav.sh ${UAV_NAME}; rviz -d $(rospack find uav_camera_localization)/rviz/device.rviz"]}}, {"basler_driver": {"layout": "tiled", "panes": ["waitForRos; roslaunch basler_stereopair_driver basler_stereopair_driver.launch is_calibrated:=false"]}}, {"uav_camera_localization": {"layout": "even-horizontal", "panes": ["waitForRos; roslaunch uav_camera_localization uav_camera_localization.launch"]}}]}
{"name": "incognito", "root": "./", "windows": [{"b": {"root": "./", "panes": ["./run_new.sh \"b0\" 2>&1 | tee b0.log", "./run_new.sh \"b1\" 2>&1 | tee b1.log", "./run_new.sh \"b2\" 2>&1 | tee b2.log", "./run_new.sh \"b3\" 2>&1 | tee b3.log"]}}, {"s0": {"root": "./", "panes": ["./run_new.sh \"s0n0\" 2>&1 | tee s0n0.log", "./run_new.sh \"s0n1\" 2>&1 | tee s0n1.log", "./run_new.sh \"s0n2\" 2>&1 | tee s0n2.log", "./run_new.sh \"s0n3\" 2>&1 | tee s0n3.log"]}}, {"s1": {"root": "./", "panes": ["./run_new.sh \"s1n0\" 2>&1 | tee s1n0.log", "./run_new.sh \"s1n1\" 2>&1 | tee s1n1.log", "./run_new.sh \"s1n2\" 2>&1 | tee s1n2.log", "./run_new.sh \"s1n3\" 2>&1 | tee s1n3.log"]}}]}
{"name": "tammypaste", "root": "/home/tammy/projects/tammypaste", "windows": [{"api": "vi api.py"}, {"api_tests": "vi test_api.py"}, {"datastore": "vi datastore.py"}, {"ds_tests": "vi test_datastore.py"}, {"console": "ipython"}, {"mongo": "mongo -u tammypaste_api_user -p d8a3a65f --host localhost --port 27017 --authenticationDatabase \"admin\" tammypaste"}, {"shell": "zsh --login"}]}
{"name": "cat", "windows": [{"editor": "vi"}, {"cli": null}, {"server": ["cd sites", "npm run develop"]}]}
{"name": "experiment", "root": "./", "startup_window": "rospix", "tmux_options": "-f tmux.conf", "pre_window": "export SESSION=2d_5_by_1_Cu_ToT_150_px_per_image; export SENSOR=0", "windows": [{"rospix": {"layout": "even-horizontal", "panes": ["waitForRos; roslaunch long_cell_scanner rospix.launch"]}}, {"start": {"layout": "even-horizontal", "panes": ["history -s rosservice call /long_cell_scanner/start", "waitForRos; read; roslaunch long_cell_scanner controller.launch sensor:=$SENSOR"]}}, {"masker": {"layout": "even-horizontal", "panes": ["waitForRos; roslaunch long_cell_scanner masker.launch sensor:=$SENSOR"]}}, {"record": {"layout": "even-horizontal", "panes": ["waitForRos; mkdir -p ~/rex/data/$SESSION; ./record.sh \"$SESSION\""]}}, {"control": {"layout": "main-horizontal", "panes": ["waitForRos; roslaunch long_cell_scanner scanner.launch sensor:=$SENSOR", "rostopic echo /gclib/position", "waitForRos; mkdir -p ~/rex/data/$SESSION; roslaunch long_cell_scanner saver.launch sensor:=$SENSOR sub_directory:=$SESSION"]}}, {"stitcher": {"layout": "even-horizontal", "panes": ["waitForRos; roslaunch long_cell_scanner image_stitcher.launch sensor:=$SENSOR"]}}, {"normalizer": {"layout": "even-horizontal", "panes": ["waitForRos; roslaunch rospix_utils normalizer.launch sensor:=$SENSOR topic:=masker_$SENSOR/image_out invert:=true"]}}, {"rqt": {"layout": "even-horizontal", "panes": ["waitForRos; sleep 2; rqt_image_view /norm_$SENSOR/image_out", "waitForRos; sleep 2; rqt_image_view /image_stitcher/image_out", "waitForRos; ~/.i3/layout_manager.sh rex-scanning"]}}]}
{"name": "noetic", "root": "~/ros_ws/", "startup_window": "editor", "tmux_command": "tmux -2", "windows": [{"build": {"panes": ["catkin build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"]}}, {"ros": {"layout": "even-horizontal", "panes": ["roscore", "echo \"\\nAvailable local packages:\" && rospack list | grep -vwE \"/opt\""]}}, {"editor": {"panes": ["nvim -c \":CocCommand explorer --preset floating src/\""]}}, {"monitor": {"panes": ["htop"]}}]}
{"name": "watch_tests", "root": ".", "tmux_options": "-f .tmux.conf", "startup_window": "watch_tests", "windows": [{"watch_tests": {"layout": "main-vertical", "panes": ["make watch-test-pytest", "make watch-test-mypy", "make watch-test-black"]}}]}
{"name": "zsh-alacritty", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "terraform-sentry-organization", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "qpup", "root": "~/qpup_ros_ws/src/qpup_robot", "windows": [{"ros": {"layout": "tiled", "panes": ["roscore", "rosrun qpup_bringup bringup_jetson_can.sh  && history -s rostopic echo /qpup/joint_states", "history -s roslaunch qpup_bringup demo.launch", "history -s rostopic echo /qpup/odrive_states"]}}]}
{"name": "follower_launch_2", "root": "./", "windows": [{"mavros": {"layout": "even-vertical", "panes": ["roslaunch mission_planner mavros_experiment.launch id:=3"]}}, {"ual": {"layout": "even-vertical", "panes": ["sleep 3; roslaunch mission_planner ual_experiment.launch drone_id:=3 pose:=[-5,10,0]"]}}, {"mission_follower2": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch mission_planner mission_planner_follower_experiment.launch drone_id:=3 leader:=false"]}}, {"camera": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch mission_planner camera_experiment.launch drone_id:=3"]}}, {"trajectory_follower": {"layout": "even-vertical", "panes": ["sleep 5; roslaunch mission_planner trajectory_follower_experiment.launch drone_id:=3"]}}, {"rosbag": {"layout": "even-vertical", "panes": ["sleep 25; roslaunch mission_planner rosbag_recorder_experiment.launch id:=3 record_duration:=120"]}}]}
{"name": "yoranbrondsema", "root": ".", "startup_window": "posts", "on_project_start": "firefox -new-window 'http://localhost:1313'", "windows": [{"hugo": "hugo server -D"}, {"posts": "cd ."}]}
{"name": "plop-utils", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "feathersjs-react", "root": "<%= Dir.pwd %>", "windows": [{"server": {"root": "<%= Dir.pwd %>/api", "layout": "9fd1,181x38,0,0{90x38,0,0,0,90x38,91,0[90x19,91,0,2,90x18,91,20,4]}", "panes": ["vim", "npm run dev", null]}}, {"client": {"root": "<%= Dir.pwd %>/client", "layout": "9fd1,181x38,0,0{90x38,0,0,0,90x38,91,0[90x19,91,0,2,90x18,91,20,4]}", "panes": ["vim", "npm run dev", null]}}]}
{"name": "event-tamer", "root": "~/code/event-tamer", "windows": [{"editor": "vim"}, {"terminal": null}, {"server": {"layout": "even-horizontal", "panes": ["rails s", "cd client && yarn start"]}}, {"logs": "tail -f log/development.log"}]}
{"name": "example", "root": "~/rails/example", "on_project_start": "lsof -t -i tcp:3000 | xargs kill -KILL; lsof -t -i tcp:3035 | xargs kill -KILL;", "windows": [{"shell": "nvm use && code ."}, {"server": {"layout": "3c9e,117x81,0,0[117x58,0,0,2,117x22,0,59{84x22,0,59,3,32x22,85,59,4}]", "panes": ["nvm use && bundle exec rails s", "nvm use && bin/webpack-dev-server", "nvm use && redis-cli flushall && bundle exec sidekiq -C config/sidekiq.yml"]}}, {"console": "bundle exec rails c"}]}
{"name": "example", "root": "~/rails/example", "on_project_start": "lsof -t -i tcp:3000 | xargs kill -KILL; lsof -t -i tcp:3035 | xargs kill -KILL;", "windows": [{"shell": "nvm use && code ."}, {"server": {"layout": "3c9e,117x81,0,0[117x58,0,0,2,117x22,0,59{84x22,0,59,3,32x22,85,59,4}]", "panes": ["nvm use && bundle exec rails s", "nvm use && bin/webpack-dev-server", "nvm use && redis-cli flushall && bundle exec sidekiq -C config/sidekiq.yml"]}}, {"console": "bundle exec rails c"}]}
{"name": "emulate_windows", "root": ".", "windows": [{"editor": {"layout": "even-horizontal", "panes": ["firebase emulators:start", "npm run watch"]}}]}
{"name": "hadenlabs-terraform-module-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "hadenlabs-terraform-module-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "panqecdev", "root": ".", "startup_window": "edit", "windows": [{"nb": ["source venv/bin/activate; jupyter lab"]}, {"test": ["source venv/bin/activate; pytest"]}, {"edit": ["source venv/bin/activate; git status; cat TODO.md"]}]}
{"name": "dev", "root": ".", "tmux_command": "sleep 1 && tmux", "windows": [{"servers": {"layout": "main-vertical", "panes": [{"backend": ["export DJANGO_SETTINGS_MODULE=config.settings.local", "source venv/bin/activate.fish", "cd api", "python3 manage.py runserver 0.0.0.0:8000"]}, {"frontend": ["cd front", "VUE_APP_SERVER_URL=http://127.0.0.1:8000 yarn dev"]}]}}]}
{"name": "cli-talk", "root": ".", "tmux_command": "byobu", "windows": [{"empty": ["cd ~", "clear", "echo -e \"\\nHallo Softwerkskammer\\n\" | boxes -d peek -a c"]}, {"ranger": ["cd ~", "clear", "echo -e \"\\nranger\\n\" | boxes -d peek -a c"]}, {"bat": ["clear", "echo -e \"\\nbat slides.md\\n\" | boxes -d peek -a c"]}, {"(porn) colorls": ["clear", "echo -e \"\\nlc\\n\" | boxes -d peek -a c"]}, {"(porn) lolcat": ["clear", "echo -e \"\\nla | lolcat\\n\" | boxes -d peek -a c"]}, {"(porn) no-more-secrets": ["clear", "echo -e \"\\nla | nms | lolcat\\n\" | boxes -d peek -a c"]}, {"christmas-tree": ["clear", "./christmas-tree.sh"]}]}
{"name": "taskcafe", "root": ".", "windows": [{"services": {"root": "./", "panes": [{"api": ["go run cmd/taskcafe/main.go web"]}, {"yarn": ["cd frontend", "yarn start"]}]}}, {"web/editor": {"root": "./frontend", "panes": ["vim src/index.tsx"]}}, {"api/editor": {"root": "./", "panes": ["vim cmd/taskcafe/main.go"]}}, {"database": {"root": "./", "panes": ["pgcli postgres://taskcafe:taskcafe_test@localhost:8855/taskcafe"]}}]}
{"name": "styled-manila", "windows": [{"editor": "eval $EDITOR"}, {"main": "yarn start"}]}
{"name": "docker-python", "root": "<%= ENV[\"PROJECTS\"] %>/docker/docker-python", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate docker-python", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "summer_bot", "root": ".", "windows": [{"win1": {"layout": "tiled", "panes": ["cowsay \"roscore\" ; export ROS_IP=\"10.0.0.145\" ; roscore", "cowsay \"IMU Raw data publisher\" ; export ROS_IP=\"10.0.0.145\" ; sleep 10 ; python imu_raw.py", "cowsay \"IMU fusion node\" ; export ROS_IP=\"10.0.0.145\" ; sleep 10 ; rosrun imu_filter_madgwick imu_filter_node", "cowsay \"teleop receiver node\" ; export ROS_IP=\"10.0.0.145\" ; sleep 10 ; python robot.py keyboard", "cowsay \"RP Lidar node\" ; export ROS_IP=\"10.0.0.145\" ; sleep 10 ; roslaunch rplidar_ros rplidar.launch", "htop"]}}]}
{"name": "analysis", "root": ".", "startup_window": "python", "startup_pane": "ipython", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": ["source .venv/bin/activate", "ipython"]}]}}, {"jupyter": {"layout": "main-vertical", "panes": [{"jupyter": ["bin/analysis"]}]}}, {"shell": ["source .venv/bin/activate"]}]}
{"name": "p3dx_navstack", "root": "~/sim_ws", "windows": [{"dev_abuse": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"enable_motors": ["sleep 5", "rostopic pub /cmd_motor_state p2os_msgs/MotorState 1"]}, {"joy": ["roslaunch --wait social_sim_teleop ps3_teleop_p3dx.launch"]}, {"joy_override": ["roslaunch --wait social_sim_teleop joystick_override.launch"]}, {"p2os": ["roslaunch --wait img_p3dx p2os_driver.launch"]}, {"description": ["roslaunch --wait p2os_urdf pioneer3dx_urdf.launch"]}, {"move_base": ["roslaunch --wait img_p3dx p3dx_move_base.launch"]}]}}]}
{"name": "docker-hugo", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "takeoff", "pre_window": "r1; export UAV_NAME=uav62; export RUN_TYPE=simulation; export WORLD_NAME=simulation_challenge1", "windows": [{"roscore": {"layout": "even-vertical", "panes": ["roscore"]}}, {"gazebo": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch", "waitForRos; roslaunch ball_attacher attacher.launch"]}}, {"spawn": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav62; waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"62 --t650 --enable-rangefinder --enable-ground-truth --enable-ouster --ouster-model OS1-32g1 --use-gpu-ray --pos 3 25 0.5 0\"", "export UAV_NAME=uav60; waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"60 --t650 --enable-rangefinder --enable-ground-truth --enable-ouster --ouster-model OS1-32g1 --use-gpu-ray --pos -3 25 0.5 0\""]}}, {"control": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav62; waitForOdometry; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml config_landoff_tracker:=./custom_configs/landoff_tracker.yaml", "export UAV_NAME=uav60; waitForOdometry; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml config_landoff_tracker:=./custom_configs/landoff_tracker.yaml"]}}, {"takeoff": {"layout": "even-vertical", "panes": [" export UAV_NAME=uav62; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/uav_manager/takeoff; sleep 8; rosservice call /$UAV_NAME/control_manager/goto \"goal: [0.0, -20.0, 12.0, 1.57]\"; roslaunch ball_simulation publish_ground_truth_tf.launch", " export UAV_NAME=uav60; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/uav_manager/takeoff; sleep 8; rosservice call /$UAV_NAME/control_manager/goto \"goal: [3.0, 3.0, 4.0, 0.6]\"; roslaunch ball_simulation publish_ground_truth_tf.launch"]}}, {"goto": {"layout": "even-vertical", "panes": [" export UAV_NAME=uav60; waitForControl; roslaunch ball_filter generate_eight.launch; sleep 10; roslaunch ball_filter load_eight.launch loop:=true; sleep 10; roslaunch ball_filter start_following_eight.launch; "]}}, {"detector": {"layout": "even-vertical", "panes": ["waitForControl; roslaunch uav_detect detect_pcl.launch"]}}, {"filter": {"layout": "even-vertical", "panes": ["waitForControl; roslaunch ball_filter filter_eightball.launch"]}}, {"planner": {"layout": "even-vertical", "panes": ["waitForControl; roslaunch ball_planner catch_eightball.launch", "waitForControl; sleep 5; rosservice call /uav62/ball_planner/start_state_machine \"value: 0\""]}}, {"rviz": {"layout": "even-vertical", "panes": ["waitForControl; roslaunch ball_filter rviz.launch"]}}]}
{"name": "hadenlabs-terraform-aws-lambda-layer", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "mist", "windows": [{"app": {"layout": "main-vertical", "panes": ["just watch-web", "just watch-inspectify"]}}]}
{"name": "communication", "root": "~/workspace/communication", "startup_window": "f7", "windows": [{"api": {"layout": "main-vertical", "root": "~/workspace/communication/api", "panes": ["", "nodemon -w app -e rb --exec \"bundle exec rackup\""]}}, {"web": {"layout": "main-vertical", "root": "~/workspace/communication/web", "panes": ["", "yarn && yarn serve"]}}]}
{"name": "terraform-github-project", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "source ~/catkin_ws/devel/setup.bash", "windows": [{"gazebo": {"layout": "tiled", "panes": ["roslaunch robot_description spawn.launch"]}}, {"control": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch robot_control control.launch"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch robot_description rviz.launch"]}}]}
{"name": "icuas_ch", "root": "./", "startup_window": "roscore", "pre_window": "export UAV_NAMESPACE=red;\nexport ARENA_TYPE=<%= @settings[\"arena\"]%>;\nif [[ -z \"${ARENA_TYPE}\" ]]\nthen \n  export ARENA_TYPE=1\nfi;\nif [ $ARENA_TYPE -ge 4] || [ $ARENA_TYPE -le 0 ]\nthen\n  echo \"arena argument should be 1, 2 or 3. Defaulting to 1.\"\n  export ARENA_TYPE=1\nfi;\nif [ $ARENA_TYPE -eq 1 ]\nthen\n  export TILE_X=12.5\n  export TILE_Y=-3.0\n  export TILE_Z=2.0\n  export TILE_YAW=3.1415926\nelif [ $ARENA_TYPE -eq 2 ]\nthen\n  export TILE_X=9.0\n  export TILE_Y=-7.5\n  export TILE_Z=2.5\n  export TILE_YAW=1.57079632679\nelif [ $ARENA_TYPE -eq 3 ]\nthen\n  export TILE_X=7.5\n  export TILE_Y=7.5\n  export TILE_Z=3.5\n  export TILE_YAW=-1.57079632679\nfi;\n", "windows": [{"roscore": {"layout": null, "panes": ["roscore", "export SITL_RITW_TERMINAL=\"tmux new-window -d -n:ardupilot1\"; waitForRos; roslaunch ardupilot_gazebo sim_vehicle.launch enable_console:=false additional_arguments:=\"--no-rebuild\" parm_file:=$(rospack find icuas22_competition)/parameters/arducopter_nogps.params", "waitForRos; rosparam set use_sim_time true; roslaunch ardupilot_gazebo mavros.launch", "waitForRos; rosrun icuas22_competition spawn_ball_at_uav.py __ns:=$UAV_NAMESPACE"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch ardupilot_gazebo kopterworx.launch use_sim_time:=true enable_magnet:=true x:=-10 world:=$(rospack find icuas22_competition)/worlds/well_lit.world", "waitForRos; waitForSimulation; roslaunch larics_gazebo_worlds spawn_arena_v$ARENA_TYPE.launch", "waitForRos; waitForSimulation; sleep 2; roslaunch larics_gazebo_worlds spawn_alvar_tile.launch x:=$TILE_X yaw:=$TILE_YAW z:=$TILE_Z y:=$TILE_Y"]}}, {"arm&takeof": {"layout": "tiled", "panes": ["waitForRos; roslaunch uav_ros_control pid_carrot.launch manual_takeoff:=false msf_callback_enable:=true odometry:=odometry control_type:=pid_cascade_node_yawrate default_params:=custom_config/position_control_thrust.yaml", "waitForRos\nwaitForSysStatus\nrosrun ardupilot_gazebo automatic_takeoff.sh 2 /$UAV_NAMESPACE/odometry\nsleep 5\nrosservice call /$UAV_NAMESPACE/spawn_ball\nrostopic pub --latch /$UAV_NAMESPACE/challenge_started std_msgs/Bool True\n"]}}, {"trajectory": {"layout": "tiled", "panes": ["waitForRos; roslaunch uav_ros_tracker topp_tracker.launch tracker_config:=custom_config/topp_config_custom.yaml"]}}, {"solution": {"layout": "tiled", "panes": ["waitForRos; rosrun icuas_mission_planner icuas_mission_planner_node __ns:=$UAV_NAMESPACE", "waitForRos; rosrun basic_speed_controller basic_speed_controller_node  __ns:=$UAV_NAMESPACE", "waitForRos; roslaunch ar_track_alvar pr2_indiv_no_kinect.launch cam_image_topic:=camera/color/image_raw cam_info_topic:=camera/color/camera_info marker_size:=20.0 output_frame:=world __ns:=$UAV_NAMESPACE", "waitForRos; roslaunch path_planner path_planner.launch namespace:=$UAV_NAMESPACE", "waitForRos; roslaunch goal_seeker goal_seeker.launch namespace:=$UAV_NAMESPACE", "waitForRos; rosrun ball_throwing ball_throwing_node __ns:=$UAV_NAMESPACE"]}}]}
{"name": "base-learn-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "wfm", "root": "~/", "pre": "wfm mongo start", "windows": [{"cloud": {"layout": "tiled", "panes": [{"cloud": ["cd \"${WFM_PATH}/raincatcher-demo-cloud\"", "grunt"]}, {"auth": ["cd \"${WFM_PATH}/raincatcher-demo-auth\"", "grunt"]}, {"portal": ["cd \"${WFM_PATH}/raincatcher-demo-portal\"", "grunt serve:local --url=http://localhost:8001"]}, {"mobile": ["cd \"${WFM_PATH}/raincatcher-demo-mobile\"", "grunt serve:local --url=http://localhost:8001"]}]}}]}
{"name": "ansible-role-python", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "p1", "root": ".", "startup_window": "ros", "windows": [{"ros": {"layout": "cea5,205x57,0,0{103x57,0,0[103x28,0,0{52x28,0,0,0,50x28,53,0,3},103x28,0,29,4],101x57,104,0[101x28,104,0{50x28,104,0,5,50x28,155,0,6},101x28,104,29{50x28,104,29,7,50x28,155,29,9}]}", "panes": ["roscore", {"vrep": ["until rostopic list ; do sleep 1; done", "clear", "vrep -h -s ../scenes/rosControlKinect3d-test.ttt"]}, {"rviz": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rosrun rviz rviz -d p1.rviz"]}, {"mapping": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rosrun floor_plane_mapping floor_plane_mapping"]}, {"auto": ["until rosservice info /mux/select; do sleep 1; done", "until rosnode info /task_client; do sleep 1; done", "clear", "rosservice call /mux/select '/mux/autoCommand'", "rosrun cylinder_detector_ransac cylinder_detector_ransac"]}, {"task_server": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "roslaunch floor_nav launch_vrep-test.launch"]}, {"path": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rosrun floor_nav test_graph-test.py"]}]}}, {"vim": "vim -O floor_plane_mapping/src/floor_plane_mapping.cpp cylinder_detector_ransac/src/cylinder_detector_ransac.cpp"}, {"build": {"layout": "even-horizontal", "panes": [{"build": ["cd ~/ros_ws/", "clear"]}, {"git": ["cd ..", "clear"]}]}}]}
{"name": "dangerous-ideas", "root": "/development/dangerous-ideas", "startup_window": "ideas", "windows": [{"ideas": {"layout": "8787,274x88,0,0{137x88,0,0,269,136x88,138,0[136x48,138,0,270,136x39,138,49,271]}", "panes": ["coolprompt", "coolprompt", "coolprompt", "coolprompt", "coolprompt"]}}]}
{"name": "pre-commit-mypy", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "build_all", "root": "/home/artur/Playground/blockchain_networks/Base_Projects", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["rm -fr cardano-node", "git clone git@github.com:input-output-hk/cardano-node.git", "cd cardano-node", "git fetch --all --tags", "git checkout tags/1.35.3-configs", "nix build .#mainnet/node -o mainnet-node-local", "cabal build all", "cp $(find . -name cardano-node -executable -type f) /home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/_cardano-node", "cp $(find . -name cardano-cli -executable -type f) /home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/_cardano-cli"]}, {"db-sync and smash": ["rm -fr cardano-db-sync", "git clone git@github.com:input-output-hk/cardano-db-sync.git", "cd cardano-db-sync", "git fetch --all --tags", "git checkout tags/13.0.5", "nix-build -A cardano-db-sync -o db-sync-node", "cabal build all", "cp $(find . -name cardano-db-sync -executable -type f) /home/artur/Playground/blockchain_networks/Base_Projects/cardano-db-sync/_cardano-db-sync", "cp $(find . -name cardano-db-tool -executable -type f) /home/artur/Playground/blockchain_networks/Base_Projects/cardano-db-sync/_cardano-db-tool", "cabal build cardano-smash-server", "cp $(find . -name cardano-smash-server -executable -type f) /home/artur/Playground/blockchain_networks/Base_Projects/cardano-db-sync/_cardano-smash-server", "echo \"artur, password\" > admins.txt"]}]}}]}
{"name": "zsh-trash", "root": "./", "on_project_start": "make environment", "pre_window": "eval $(env-secrets bw me/env)", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "waterfall", "root": "~/dev/waterfall", "windows": [{"main": {"layout": "main-vertical", "panes": ["emacs -nw .", "cd src/browser/socialise && find . -name \\*.elm | entr -r sh -c 'clear; tmux clear-history; ./build.sh'", "cd .. && http-server ."]}}]}
{"name": "init", "root": "~/", "windows": [{"cross-wall": {"panes": [{"sslocal": ["sslocal -c ~/.shadowSockes.json"]}]}}]}
{"name": "excoffizer", "root": "~/dev/excoffizer", "windows": [{"editor": {"layout": "main-vertical", "panes": ["ls src/*.elm | entr -cdr elm make src/Main.elm --debug --output=elm.js", "elm reactor", null]}}]}
{"name": "vim-tier-list", "root": "~/", "windows": [{"server": {"root": ".", "panes": ["pnpm i -f && pnpm run dev"]}}, {"editor": {"root": ".", "panes": ["nvim"]}}, {"terminal": {"root": "."}}]}
{"name": "ansible-role-wakatime", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "cli-talk", "root": ".", "tmux_command": "byobu", "windows": [{"empty": ["cd ~", "clear"]}, {"ranger": ["cd ~", "clear", "echo \"ranger\""]}, {"bat": ["clear", "echo \"bat slides.md\""]}, {"(porn) colorls": ["clear", "echo \"lc\""]}, {"(porn) lolcat": ["clear", "echo \"la | lolcat\""]}, {"(porn) no-more-secrets": ["clear", "echo \"la | nms | lolcat\""]}]}
{"name": "apollo", "root": ".", "windows": [{"redis": {"root": "./cluster", "panes": ["redis-server --port 6000 --cluster-enabled yes --dbfilename node1.rdb --cluster-config-file node1.conf", "redis-server --port 6001 --cluster-enabled yes --dbfilename node2.rdb --cluster-config-file node2.conf", "redis-server --port 6002 --cluster-enabled yes --dbfilename node3.rdb --cluster-config-file node3.conf", "redis-server --port 6003 --cluster-enabled yes --dbfilename node4.rdb --cluster-config-file node4.conf", "redis-server --port 6004 --cluster-enabled yes --dbfilename node5.rdb --cluster-config-file node5.conf", "redis-server --port 6005 --cluster-enabled yes --dbfilename node6.rdb --cluster-config-file node6.conf", "redis-server --port 6006 --cluster-enabled yes --dbfilename node7.rdb --cluster-config-file node7.conf", "redis-server --port 6007 --cluster-enabled yes --dbfilename node8.rdb --cluster-config-file node8.conf", "redis-server --port 6008 --cluster-enabled yes --dbfilename node9.rdb --cluster-config-file node9.conf", "redis-server --port 6009 --cluster-enabled yes --dbfilename node10.rdb --cluster-config-file node10.conf", "redis-server --port 6010 --cluster-enabled yes --dbfilename node11.rdb --cluster-config-file node11.conf", "redis-server --port 6011 --cluster-enabled yes --dbfilename node12.rdb --cluster-config-file node12.conf"]}}, {"apollo": {"root": ".", "panes": ["bin/apollo agent --redis=127.0.0.1:6000 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack01\"", "bin/apollo agent --redis=127.0.0.1:6001 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\"", "bin/apollo agent --redis=127.0.0.1:6002 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack01\"", "bin/apollo agent --redis=127.0.0.1:6003 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\"", "bin/apollo agent --redis=127.0.0.1:6004 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack01\"", "bin/apollo agent --redis=127.0.0.1:6005 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\"", "bin/apollo agent --redis=127.0.0.1:6006 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\"", "bin/apollo agent --redis=127.0.0.1:6007 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack01\"", "bin/apollo agent --redis=127.0.0.1:6008 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\"", "bin/apollo agent --redis=127.0.0.1:6009 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\"", "bin/apollo agent --redis=127.0.0.1:6010 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack01\"", "bin/apollo agent --redis=127.0.0.1:6011 --managerTLS=false --hostAnnotations \"dc=eu-central-1 rack=rack02\""]}}]}
{"name": "monitoring", "root": "~/", "windows": [{"monitoring": {"layout": "main-vertical", "panes": ["glances", "dstat -am", "watch -t -n60 zpool status -v", "watch -t -n60 zpool iostat -v", "watch -t -n60 zpool list", "watch -t -n300 'bash -c \"for d in /dev/sd?; do smartctl -a \\$d | grep Temperature_Celsius | sed \\\"s/ \\+/\\t/g\\\" | cut -f10 | ( echo -n \\\"\\$d -> \\\" ; cat - ); done\"'"]}}]}
{"name": "inspection", "root": "./", "startup_window": "load_trajectory", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_FILE=./custom_configs/world.yaml", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_file:='$(find aerialcore_simulation)/worlds/aerial_core_autospawn_no_human.world' gui:=true"]}}, {"status": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 2 $UAV_TYPE --enable-rangefinder --enable-ground-truth --enable-mobius-camera-front --pos_file `pwd`/pos.csv\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch config_uav_manager:=./custom_configs/uav_manager.yaml config_constraint_manager:=./custom_configs/constraint_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch config_uav_manager:=./custom_configs/uav_manager.yaml config_constraint_manager:=./custom_configs/constraint_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml", "rosservice call /gazebo/dynamic_model/jeff_electrician/activate 1'"]}}, {"automatic_start": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"takeoff": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"load_trajectory": {"layout": "even-vertical", "panes": ["waitForOffboard; roslaunch trajectory_loader load.launch path:=`pwd` config:=./custom_configs/trajectory_loader.yaml"]}}, {"gazebo_camera_follow": {"layout": "tiled", "panes": ["waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForControl; rosrun rviz rviz -d rviz.rviz", "waitForControl; export UAV_NAME=uav1; roslaunch mrs_rviz_plugins load_robot.launch", "waitForControl; export UAV_NAME=uav2; roslaunch mrs_rviz_plugins load_robot.launch"]}}]}
{"name": "nvim-mysql", "tmux_command": "tmux -2", "pre_window": ". env/bin/activate", "windows": [{"test": {"layout": "c325,199x50,0,0{118x50,0,0,0,80x50,119,0,3}", "panes": ["NVIM_PYTHON_LOG_FILE=log NVIM_PYTHON_LOG_LEVEL=INFO nvim -u script/vimrc", "touch log_py3_rplugin && tail -F log_py3_rplugin"]}}, {"interactive": {"layout": "even-horizontal", "panes": [{"nvim": ["rm -f nvim_interactive_socket", "NVIM_LISTEN_ADDRESS=nvim_interactive_socket nvim"]}, {"ipython": ["sleep 3", "ipython", "from pynvim import attach", "nvim = attach('socket', path='nvim_interactive_socket')"]}]}}]}
{"name": "ghq-project-manager", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "main", "root": "/var/mangal/apps", "windows": [{"servers": {"layout": "tiled", "panes": [{"orcid-oauth2": ["cd orcid-oauth2", "nodemon"]}, {"mangal-api": ["cd mangal-api", "nodemon"]}]}}, {"htop": {"layout": "main-vertical", "panes": ["htop"]}}]}
{"name": "safety", "root": "./", "startup_window": "load_trajectory", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_FILE=./custom_configs/world.yaml", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_file:='$(find aerialcore_simulation)/worlds/aerial_core_autospawn.world' gui:=true"]}}, {"status": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 2 3 $UAV_TYPE --enable-rangefinder --enable-ground-truth --enable-mobius-camera-front --pos_file `pwd`/pos.csv\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml", "waitForOffboard; sleep 26; rosservice call /gazebo/dynamic_model/jeff_electrician/activate 1"]}}, {"automatic_start": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"takeoff": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"load_trajectory": {"layout": "even-vertical", "panes": ["waitForOffboard; roslaunch trajectory_loader load.launch path:=`pwd` config:=./custom_configs/trajectory_loader.yaml"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"gazebo_camera_follow": {"layout": "tiled", "panes": ["waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForControl; rosrun rviz rviz -d rviz.rviz", "waitForControl; export UAV_NAME=uav1; roslaunch mrs_rviz_plugins load_robot.launch", "waitForControl; export UAV_NAME=uav2; roslaunch mrs_rviz_plugins load_robot.launch"]}}]}
{"name": "referrals", "root": ".", "windows": [{"main": {"layout": "vertical", "panes": ["source venv/bin/activate && ES_SERVER=http://localhost:9200 FLASK_APP=server.py FLASK_ENV=development flask run", "source venv/bin/activate"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_NAME=simulation_local; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=dunes_plane gui:=true"]}}, {"status": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 2 3 4 5 $UAV_TYPE --enable-rangefinder --enable-rplidar --enable-bluefox-camera --pos_file `pwd`/pos.yaml\""]}}, {"bumper": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_bumper bumper.launch", "export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_bumper bumper.launch", "export UAV_NAME=uav3; waitForOdometry; roslaunch mrs_bumper bumper.launch", "export UAV_NAME=uav4; waitForOdometry; roslaunch mrs_bumper bumper.launch", "export UAV_NAME=uav5; waitForOdometry; roslaunch mrs_bumper bumper.launch"]}}, {"control": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_uav_manager:=./custom_configs/uav_manager_uav1.yaml", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_uav_manager:=./custom_configs/uav_manager_uav2.yaml", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_uav_manager:=./custom_configs/uav_manager_uav3.yaml", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_uav_manager:=./custom_configs/uav_manager_uav4.yaml", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_general core.launch config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_uav_manager:=./custom_configs/uav_manager_uav5.yaml"]}}, {"automatic_start": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"command_sender": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch flocking command_sender.launch config_uav_names:=./custom_configs/uav_names.yaml"]}}, {"hover_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 0\\\""]}}, {"swarming_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 1\\\""]}}, {"emergency_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 2\\\""]}}, {"takeoff": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav4; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav5; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"sensor_neighbor": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch use_3D:=true config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch use_3D:=true config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch use_3D:=true config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav4; waitForOdometry; roslaunch flocking sensor_neighbor.launch use_3D:=true config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav5; waitForOdometry; roslaunch flocking sensor_neighbor.launch use_3D:=true config_uav_names:=./custom_configs/uav_names.yaml"]}}, {"formation": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch use_3D:=true config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch use_3D:=true config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch use_3D:=true config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav4; waitForOdometry; roslaunch flocking formation.launch use_3D:=true config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav5; waitForOdometry; roslaunch flocking formation.launch use_3D:=true config_flocking:=./custom_configs/flocking/modified.yaml"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch offshore_uav_pack offshore_rig.launch", "waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1"]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/uav1_pos.yaml --enable-bluefox-camera\"", "history -s roslaunch offshore_uav_pack spawn_wamv1.launch \";\" roslaunch offshore_uav_pack spawn_wamv2.launch \";\" roslaunch offshore_uav_pack spawn_wamv3.launch"]}}, {"control": {"layout": "tiled", "panes": ["waitForOdometry; roslaunch mrs_uav_general core.launch config_odometry:=./custom_configs/odometry.yaml"]}}, {"takeoff": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}]}
{"name": "p3dx_collection", "root": "~/sim_ws", "windows": [{"dev_abuse": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"joy": ["roslaunch --wait social_sim_teleop ps3_teleop_p3dx.launch"]}, {"p2os": ["roslaunch --wait social_sim_ros p2os_driver.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find img_p3dx)/rviz/p3dx.rviz"]}, {"description": ["roslaunch --wait p2os_urdf pioneer3dx_urdf.launch"]}, {"map_publisher": ["rosrun map_server map_server $(rospack find img_p3dx)/maps/lab1.map.yaml"]}, {"move_base": ["roslaunch --wait img_p3dx p3dx_move_base_global_only.launch"]}, {"realsense": ["roslaunch realsense2_camera rs_camera.launch"]}, {"aruco_detect": ["roslaunch img_p3dx p3dx_aruco_detect.launch"]}, {"fiducial_slam": ["roslaunch fiducial_slam fiducial_slam.launch"]}]}}]}
{"name": "tcravit_ruby_lib", "root": "~/projects/tcravit_ruby_lib", "windows": [{"code": "vim lib"}, {"specs": "vim spec"}, {"guard": "bundle exec guard"}, {"pry": "bin/console"}, {"shell": "zsh --login"}]}
{"name": "pyfacebook", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch sarc_environment sarc.launch", "waitForRos; roslaunch sarc_environment kcpath.launch", "waitForRos; roslaunch sarc_environment sarc_map.launch"]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": null}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"takeoff": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1"]}}]}
{"name": "0xkiyo", "root": "~/ghq/github.com/shunkakinoki/0xkiyo.xyz", "attach": true, "windows": [{"zsh": "neofetch"}, {"zsh": "neofetch"}, {"zsh": "neofetch"}]}
{"name": "pollination_sim", "root": "~/", "windows": [{"pollination_sim": {"layout": "tiled", "panes": [{"gazebo": ["roslaunch combined greenhouse.launch"]}, {"viz": ["sleep 20", "roslaunch combined combined_viz.launch"]}, {"localization": ["sleep 25", "roslaunch combined sensor_fusion_sim.launch"]}, {"drive_base_control": ["sleep 27", "roslaunch bramblebee_navigation move_base_mapless_demo.launch"]}, {"flower_perception": ["sleep 29", "roslaunch manipulation_mapping flower_mapper.launch"]}, {"manipulator_control": ["sleep 31", "rosrun manipulation_control ee_go_to_pose_action_node"]}, {"manipulation_state_machine": ["sleep 33", "roslaunch combined arm_state_machine_sim.launch"]}, {"mission_planner": ["sleep 35", "rosrun autonomy mission_planning_node"]}]}}]}
{"name": "kuri_collection_playback", "root": "~/sim_ws", "windows": [{"playback": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"bridge": ["roslaunch --wait social_sim_ros sim_tcp_bridge.launch"]}, {"unity": ["printf '\\033]2;%s\\033\\\\' 'unity'"]}, {"description": ["printf '\\033]2;%s\\033\\\\' 'kuri_description.launch'", "roslaunch --wait social_sim_ros kuri_description.launch"]}, {"differential_drive": ["printf '\\033]2;%s\\033\\\\' 'differential_drive_kuri.launch'", "roslaunch --wait social_sim_ros differential_drive_kuri.launch"]}, {"map_publisher": ["rosrun social_sim_ros map_publisher.py"]}, {"rviz": ["printf '\\033]2;%s\\033\\\\' 'rviz'", "rosrun rviz rviz -d $(rospack find social_sim_ros)/config/move.rviz"]}]}}]}
{"name": "default", "root": "~/", "windows": [{"theophilus": "TMUX='' tmux new -As tom \\; set status-position bottom"}, {"blueiris": "ssh blueiris"}, {"synology": "mosh --server=/usr/local/bin/mosh-server SYNOLOGY -- /usr/local/bin/tmux new -As tom"}, {"synology2": "ssh synology2"}, {"pvhost1": "mosh root@PVHOST1 -- tmux new -As root"}, {"pvhost2": "mosh root@PVHOST2 -- tmux new -As root"}, {"pvhost3": "mosh root@PVHOST3 -- tmux new -As root"}, {"pvhost4": "mosh root@PVHOST4 -- tmux new -As root"}, {"ariel": "mosh --server=/opt/homebrew/bin/mosh-server ARIEL -- /opt/homebrew/bin/tmux new -As tom"}, {"bethel": "mosh --server=/opt/homebrew/bin/mosh-server BETHEL -- /opt/homebrew/bin/tmux new -As tom"}]}
{"name": "orienteering", "windows": [{"node": {"layout": "main-vertical", "panes": ["emacs -nw src/App.js", "npm run start", "npx nodemon server.js"]}}]}
{"name": "zsh-pazi", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"project_name": "ccc", "windows": [{"editor": "vi"}, {"cli": null}, {"server": "npm run develop"}]}
{"name": "base-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "hello_go", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "tmux-project-1", "root": "~/", "windows": [{"editor": {"layout": "main-vertical", "panes": ["echo hi", "echo second pane"]}}, {"server": "bundle exec rails s"}, {"logs": "tail -f log/development.log"}]}
{"name": "aa", "root": "~/team17_p2", "pre_window": "source devel/setup.bash", "windows": [{"editor": {"layout": "tiled", "panes": ["./bringup.sh", "sleep 30 && ./run.sh"]}}]}
{"name": "zsh-yarn", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=grass_plane gui:=true"]}}, {"status": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 2 3 $UAV_TYPE --enable-rangefinder\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch", "export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch", "export UAV_NAME=uav3; waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"automatic_start": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"takeoff": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"goto": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; history -s rosservice call /$UAV_NAME/control_manager/goto \\\"goal: \\[10.0, 0.0, 3.0, 0.0\\]\\\"; history -s rosservice call /$UAV_NAME/control_manager/goto \\\"goal: \\[-10.0, 0.0, 3.0, 0.0\\]\\\"", "export UAV_NAME=uav2; history -s rosservice call /$UAV_NAME/control_manager/goto \\\"goal: \\[-10.0, 0.0, 3.0, 0.0\\]\\\"; history -s rosservice call /$UAV_NAME/control_manager/goto \\\"goal: \\[10.0, 0.0, 3.0, 0.0\\]\\\"", "export UAV_NAME=uav3; history -s rosservice call /$UAV_NAME/control_manager/goto \\\"goal: \\[0.0, 10.0, 3.0, 0.0\\]\\\"; history -s rosservice call /$UAV_NAME/control_manager/goto \\\"goal: \\[0.0, -10.0, 3.0, 0.0\\]\\\""]}}, {"formation_control": {"layout": "tiled", "panes": "waitForOdometry; rosrun gesture_flocking formationflier"}}, {"gazebo_camera_follow": {"layout": "tiled", "panes": ["waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1"]}}]}
{"name": "terraform-aws-iam", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "copyai", "root": "~/git/copyai", "windows": [{"copyai": {"layout": "76c9,181x75,0,0{117x75,0,0,0,63x75,118,0[63x37,118,0,1,63x37,118,38,2]}", "panes": [{"nvim": ["nvim"]}, {"server": ["./bin/dev"]}, {"git": ["git status"]}]}}]}
{"name": "docker-php", "root": "<%= ENV[\"PROJECTS\"] %>/docker/docker-php", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate docker-php", "startup_window": "docker", "windows": [{"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "dev-env-py", "root": ".", "windows": [{"zsh-idl": {"layout": "main-horizontal", "panes": ["find -type f -name \"*.py\" -exec vim {} \\\\;", null, "ipython"]}}]}
{"name": "react_boilerplate", "windows": [{"vim": "vim ."}, {"web-server": "npm run start"}, {"zsh": "ls -la"}]}
{"name": "home", "root": "~/dev/home", "windows": [{"main": {"layout": "main-vertical", "panes": ["emacs -nw .", "cd switch-api && sudo python socket_server.py", "cd server && node_modules/.bin/sails lift", "cd server/elm && ls src/*.elm | entr -cr elm make src/Main.elm --output=../assets/js/main.js"]}}]}
{"name": "taskcafe", "root": ".", "windows": [{"services": {"root": "./", "panes": [{"api": ["go run cmd/taskcafe/main.go web"]}, {"yarn": ["cd frontend", "yarn start"]}]}}, {"web/editor": {"root": "./frontend", "panes": ["vim src/index.tsx"]}}, {"api/editor": {"root": "./", "panes": ["vim cmd/taskcafe/main.go"]}}, {"database": {"root": "./", "panes": ["pgcli postgres://taskcafe:taskcafe_test@localhost:8855/taskcafe"]}}]}
{"name": "base-learn-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-learn-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-learn-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-learn-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "base-template", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "virtual-ip", "on_project_start": "export PATH=$(pwd):$PATH", "windows": [{"editor": {"layout": "main-horizontal", "panes": ["vim", "make watch-compile-and-deploy"]}}, {"shell": null}, {"node00": ["make cluster-node-virtual-ip-run NAME=virtual-ip-node00"]}, {"node01": ["make cluster-node-virtual-ip-run NAME=virtual-ip-node01"]}, {"node02": ["make cluster-node-virtual-ip-run NAME=virtual-ip-node02"]}, {"ping": ["make cluster-virtual-ip-ping"]}]}
{"name": "refactoring", "root": "~/development/martin-fowler-refactoring-2nd", "windows": [{"yarn": {"layout": "even-horizontal", "panes": [null, "git pull && yarn test"]}}]}
{"name": "tpc-2017-dc", "root": "<%= File.dirname(File.absolute_path(__FILE__)) %>", "windows": [{"editor": null}, {"builder": {"layout": "even-horizontal", "panes": ["carton exec watcher --dir src -- bundle exec ./build.sh", "./node_modules/.bin/live-server --wait=0 --mount=/:docs --open=/tpc-2017-dc"]}}]}
{"name": "ansible_vagrant", "root": "~/", "project_root": ".", "windows": [{"vagrant": {"layout": "main-vertical", "panes": ["vagrant ssh master", "vagrant ssh devops1", "vagrant ssh devops2"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1;", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForRos; rviz -d $(rospack find mrs_serial)/rviz/gimbal.rviz", "waitForRos; rosrun rqt_gui rqt_gui"]}}, {"gimbal": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_serial gimbal.launch"]}}, {"jugger": {"layout": "tiled", "panes": ["waitForRos; rosrun plotjuggler plotjuggler"]}}]}
{"name": "thesis", "root": ".", "windows": [{"thesis": {"layout": "even-horizontal", "panes": [null, null]}}, {"code": {"layout": "even-horizontal", "panes": [null, null]}}, {"evaluation": {"layout": "even-horizontal", "panes": [null, null]}}]}
{"name": "ar_tag_detection", "root": "./", "startup_window": "roscore", "pre_window": "export UAV_NAMESPACE=red", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore", "waitForRos; roslaunch uav_ros_general apm2.launch fcu_url:=/dev/ttyUSB_px4:921600", "waitForRos; waitForMavros; sleep 10; roslaunch uav_ros_general mavsys.launch raw_sensors:=50 rc_channels:=50 extra1:=50 position:=50", "waitForRos; roslaunch uav_ros_general rc_to_joy.launch"]}}, {"control": {"layout": "tiled", "panes": ["waitForRos; waitForGlobal; roslaunch uav_ros_control pid_carrot.launch manual_takeoff:=true carrot_land:=true carrot_frame_id:=map", "history -s \"# roslaunch uav_ros_control uav_manager.launch odometry:=mavros/global_position/local\"", "history -s \"rosservice call /$UAV_NAMESPACE/tracker/enable true\"", "history -s \"rosservice call /$UAV_NAMESPACE/position_hold\""]}}, {"mpc_tracker": {"layout": "tiled", "panes": ["waitForRos; waitForOdometry; roslaunch uav_ros_tracker mpc_tracker.launch tracker_config:=custom_config/mpc_tracker_config_rw.yaml"]}}, {"tf": {"layout": "tiled", "panes": ["waitForRos; waitForOdometry; roslaunch landing_platform tf_static_base_link_to_camera_link.launch"]}}, {"realsense_camera": {"layout": "tiled", "panes": ["waitForRos; roslaunch realsense2_camera rs_camera.launch"]}}, {"ar_tag_detection": {"layout": "tiled", "panes": ["waitForRos; waitForOdometry; sleep 10; roslaunch landing_platform ar_tag_detection.launch namespace:=outer_tag cam_image_topic:=/camera/color/image_raw cam_info_topic:=/camera/color/camera_info output_frame:=base_link marker_size:=72.0", "waitForRos; rostopic echo /outer_tag/ar_pose_marker", "waitForRos; waitForOdometry; sleep 10; roslaunch landing_platform ar_tag_detection.launch namespace:=inner_tag cam_image_topic:=/camera/color/image_raw cam_info_topic:=/camera/color/camera_info output_frame:=base_link marker_size:=6", "waitForRos; rostopic echo /inner_tag/ar_pose_marker"]}}, {"landing_algorithm": {"layout": "tiled", "panes": ["waitForRos; waitForOdometry; roslaunch landing_platform landing_platform.launch robot_frame_id:=base_link global_frame_id:=map", "#waitForRos; waitForOdometry; rosservice call /$UAV_NAMESPACE/landing_platform/toggle \"data: true\""]}}, {"rviz": {"layout": "tiled", "panes": ["waitForRos; rosrun rviz rviz -d $(rospack find landing_platform)/rviz/detection_sim.rviz"]}}, {"bagger": {"layout": "tiled", "panes": ["history -s \"roslaunch landing_platform landing_platform_bagger.launch\"", "history -s \"rosbag record -a -x \\\"(.*)camera(.*)\\\" -o /root/bags/landing\""]}}]}
{"name": "mosh-lol", "root": "~/ghq/github.com/sentrei/mosh.lol", "attach": true, "windows": [{"zsh": "neofetch"}, {"zsh": "neofetch"}, {"zsh": "neofetch"}]}
{"name": "zsh-ssh", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "instance", "root": "~/sim_ws", "windows": [{"dev_abuse": {"layout": "main-vertical", "panes": [{"shell": ["printf '\\033]2;%s\\033\\\\' 'shell'", "env"]}, {"novnc": ["printf '\\033]2;%s\\033\\\\' 'novnc'", "/opt/websockify/run 59${PORT} --web=/opt/noVNC --wrap-mode=ignore -- /opt/TurboVNC/bin/vncserver $DISPLAY -vgl -securitytypes TLSNone,X509None,None -noxstartup"]}, {"ros": ["printf '\\033]2;%s\\033\\\\' 'ros'", "source ~/sim_ws/devel/setup.bash", "roslaunch social_sim_ros jackal_demo_slam_random_dest.launch port:=${}"]}, {"game": ["printf '\\033]2;%s\\033\\\\' 'game'", "sleep 3", "vglrun $HOME/sim_ws/social_sim_unity/Build/SurveyGame.X86_64 -scene Scenes/AgentControlLabScene"]}]}}]}
{"name": "dev", "root": "~/code/dmmf", "windows": [{"dmmf": {"layout": "main-vertical", "panes": ["lvim", "npm start", "npm run test:watch"]}}]}
{"name": "renovate-config", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "rotor_machine", "root": "~/projects/rotor_machine", "windows": [{"code": "vim lib"}, {"specs": "vim spec"}, {"guard": "bundle exec guard"}, {"pry": "bin/console"}, {"shell": "zsh --login"}]}
{"name": "omnistack", "root": "./", "on_project_start": "docker compose up -d", "on_project_exit": "docker compose stop", "windows": [{"editor": {"layout": "tilled", "panes": ["npm run start:api:debug", "clear", "npm run start:analytics:debug", "clear", "npm run start:heartbeat:debug", "clear"]}}]}
{"name": "next-locale", "root": "~/ghq/github.com/next-locale/next-locale", "attach": true, "windows": [{"zsh": "shell"}, {"zsh": "shell"}, {"zsh": "shell"}]}
{"name": "luismayta_antd-todo-example", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "p3dx_mapping", "root": "~/sim_ws", "windows": [{"dev_abuse": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"joy": ["roslaunch --wait social_sim_teleop ps3_teleop_p3dx.launch"]}, {"p2os": ["roslaunch --wait img_p3dx p2os_driver.launch"]}, {"zed": ["roslaunch zed_wrapper zed.launch"]}, {"odom_to_base_link": ["rosrun tf2_ros static_transform_publisher 0 0 0 0 0 0 1 odom base_link"]}, {"sick_laser": ["roslaunch --wait sick_scan p3dx_lms100.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find img_p3dx)/rviz/p3dx.rviz"]}, {"description": ["roslaunch --wait p2os_urdf pioneer3dx_urdf.launch"]}, {"mapping": ["rosrun gmapping slam_gmapping scan:=scan _odom_frame:=odom _base_frame:=base_link _map_frame:=map"]}]}}]}
{"name": "template", "root": "~/Programming", "windows": [{"main": {"root": "~/Programming", "layout": "ea55,401x104,0,0{143x104,0,0[143x33,0,0,0,143x9,0,34,3,143x9,0,44,4,143x9,0,54,12,143x20,0,64,18,143x19,0,85,19],257x104,144,0[257x70,144,0,5,257x3,144,71,21,257x3,144,75,22,257x25,144,79,17]}", "panes": ["echo ''", "echo ''", "echo ''", "echo ''", "echo ''", "echo ''", "nvim", "echo ''", "echo ''"]}}, {"htop": {"panes": ["htop"]}}]}
{"name": "sim_multiple_uwb", "root": "./", "startup_window": "kalman_filter", "pre_window": "export RUN_TYPE=simulation; export UAV_TYPE=x500; export WORLD_NAME=simulation; export ODOMETRY_TYPE=gps; export SENSORS=\"garmin_down\"", "windows": [{"kalman_filter": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav29; waitForControl; roslaunch uvdar_core uvdar_kalman.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav30; waitForControl; roslaunch uvdar_core uvdar_kalman.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav38; waitForControl; roslaunch uvdar_core uvdar_kalman.launch output_frame:=$UAV_NAME/stable_origin"]}}, {"object_tracker_simple": {"layout": "tilted", "panes": ["export UAV_NAME=uav29; waitForControl; sleep 10; roslaunch object_tracker tracker_multiple_UWB.launch distance_frame:=$UAV_NAME/fcu kalman_frame:=$UAV_NAME/stable_origin output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav30; waitForControl; sleep 10; roslaunch object_tracker tracker_multiple_UWB.launch distance_frame:=$UAV_NAME/fcu kalman_frame:=$UAV_NAME/stable_origin output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav38; waitForControl; sleep 10; roslaunch object_tracker tracker_multiple_UWB.launch distance_frame:=$UAV_NAME/fcu kalman_frame:=$UAV_NAME/stable_origin output_frame:=$UAV_NAME/stable_origin"]}}, {"uwb_range_uwb_lnn": {"layout": "tilted", "panes": ["export UAV_NAME=uav29; waitForControl; roslaunch uwb_range_fake uwb_lnn.launch output_id:=3 target_uav:=uav30 output_frame:=$UAV_NAME/fcu", "export UAV_NAME=uav30; waitForControl; roslaunch uwb_range_fake uwb_lnn.launch output_id:=2 target_uav:=uav29 output_frame:=$UAV_NAME/fcu", "export UAV_NAME=uav38; waitForControl; roslaunch uwb_range_fake uwb_lnn.launch output_id:=3 target_uav:=uav30 output_frame:=$UAV_NAME/fcu", "export UAV_NAME=uav30; waitForControl; roslaunch uwb_range_fake uwb_lnn.launch output_id:=4 target_uav:=uav38 output_frame:=$UAV_NAME/fcu", "export UAV_NAME=uav29; waitForControl; roslaunch uwb_range_fake uwb_lnn.launch output_id:=4 target_uav:=uav38 output_frame:=$UAV_NAME/fcu", "export UAV_NAME=uav38; waitForControl; roslaunch uwb_range_fake uwb_lnn.launch output_id:=2 target_uav:=uav29 output_frame:=$UAV_NAME/fcu"]}}, {"uvdar_measured_poses_29": {"layout": "even-horizontal", "synchronize": "after", "panes": ["history -s rostopic echo /uav29/uvdar/measuredPosesL", "history -s rostopic echo /uav29/uvdar/measuredPosesR"]}}, {"uvdar_measured_poses_30": {"layout": "even-horizontal", "synchronize": "after", "panes": ["history -s rostopic echo /uav30/uvdar/measuredPosesL", "history -s rostopic echo /uav30/uvdar/measuredPosesR"]}}, {"uwb_range": {"layout": "even-horizontal", "synchronize": "after", "panes": ["history -s rostopic echo /uav29/uwb_range_uav30/range", "history -s rostopic echo /uav30/uwb_range_uav29/range", "history -s rostopic echo /uav29/uwb_range_uav38/range", "history -s rostopic echo /uav38/uwb_range_uav29/range"]}}, {"object_tracker_simple_echo": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav29; waitForControl; history -s rostopic echo /$UAV_NAME/object_tracker/filtered_poses", "export UAV_NAME=uav30; waitForControl; history -s rostopic echo /$UAV_NAME/object_tracker/filtered_poses", "export UAV_NAME=uav38; waitForControl; history -s rostopic echo /$UAV_NAME/object_tracker/filtered_poses"]}}, {"object_tracker_simple_echo": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav29; waitForControl; history -s rostopic echo /$UAV_NAME/object_tracker/object_tracker/poses", "export UAV_NAME=uav30; waitForControl; history -s rostopic echo /$UAV_NAME/object_tracker/object_tracker/poses", "export UAV_NAME=uav38; waitForControl; history -s rostopic echo /$UAV_NAME/object_tracker/object_tracker/poses"]}}, {"object_tracker_simple_echo": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav29; waitForControl; history -s rostopic hz /$UAV_NAME/object_tracker/object_tracker/poses", "export UAV_NAME=uav30; waitForControl; history -s rostopic hz /$UAV_NAME/object_tracker/object_tracker/poses", "export UAV_NAME=uav38; waitForControl; history -s rostopic hz /$UAV_NAME/object_tracker/object_tracker/poses"]}}]}
{"name": "cookiecutter-zsh-plugin", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "PedPet", "root": "./", "on_project_first_start": "docker-compose up -d --build", "on_project_stop": "docker-compose down", "windows": [{"docker": null}, {"front-end": ["cd front-end", "docker-compose logs -f front-end"]}, {"api gateway": {"layout": "even-vertical", "panes": [{"pane1": ["cd api-gateway", "docker-compose exec api-gateway bash"]}, {"pane2": ["cd api-gateway", "docker-compose logs -f api-gateway"]}]}}, {"user": {"layout": "even-vertical", "panes": [{"pane1": ["cd user", "docker-compose exec user bash"]}, {"pane2": ["cd user", "docker-compose logs -f user"]}]}}, {"breeder": {"layout": "even-vertical", "panes": [{"pane1": ["cd breeder", "docker-compose exec breeder bash"]}, {"pane2": ["cd breeder", "docker-compose logs -f breeder"]}]}}]}
{"name": "miktau", "root": ".", "startup_window": "lein", "windows": [{"testing": "lein doo phantom"}, {"lein": {"layout": "main-vertical", "panes": [{"electron": ["cd electron/", "electron . --disable-http-cache"]}, {"backend": ["cd /go/src/backend", "./backend"]}, {"shell": ["/etc/init.d/nginx start", "ls"]}, {"repl": ["lein repl", "(go)"]}]}}]}
{"name": "mainnet", "root": "/home/artur/Playground/blockchain_networks/Base_Projects", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["if [ -d \"cardano-node\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-node; fi", "cd cardano-node", "if [ -d \"mainnet\" ]; then echo \"Mainnet Config folder already exists.\"; else cp -R /home/artur/Playground/blockchain_networks/mainnet/mainnet . ; fi", "./_cardano-node run --topology mainnet/topology.json --database-path mainnet/db --socket-path mainnet/node.socket --config mainnet/config.json"]}, {"db-sync": ["if [ -d \"cardano-db-sync\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-db-sync; fi", "cd cardano-db-sync", "PGPASSFILE=config/pgpass-mainnet db-sync-node/bin/cardano-db-sync --config config/mainnet-config.yaml --socket-path ../cardano-node/mainnet/node.socket --schema-dir schema/ --state-dir ledger-state/mainnet"]}, {"smash": ["cd cardano-db-sync", "PGPASSFILE=config/pgpass-mainnet ./_cardano-smash-server --config config/mainnet-config.yaml --port 3100 --admins admins.txt"]}, {"node_playground": ["sleep 20", "export CARDANO_NODE_SOCKET_PATH=/home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/mainnet/node.socket", "cardano-cli query tip --mainnet"]}, {"smash_playground": ["sleep 20", "cat /home/artur/Playground/blockchain_networks/mainnet/mainnet.txt", "echo \"Checking SMASH service status:\"", "curl http://localhost:3100/api/v1/status"]}]}}]}
{"name": "p3dx_collection", "root": "~/sim_ws", "windows": [{"dev_abuse": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"joy": ["roslaunch --wait social_sim_teleop ps3_teleop_p3dx.launch"]}, {"p2os": ["roslaunch --wait social_sim_ros p2os_driver.launch"]}, {"zed": ["roslaunch zed_wrapper zed.launch"]}, {"sick_laser": ["roslaunch --wait sick_scan p3dx_lms100.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find img_p3dx)/rviz/p3dx.rviz"]}, {"description": ["roslaunch --wait p2os_urdf pioneer3dx_urdf.launch"]}, {"map_publisher": ["rosrun map_server map_server $(rospack find img_p3dx)/maps/lab1.map.yaml"]}, {"amcl": ["roslaunch --wait img_p3dx p3dx_amcl.launch"]}, {"move_base": ["roslaunch --wait img_p3dx p3dx_move_base_global_only.launch"]}, {"recorder": ["cd ~/sim_ws/data/p3dx", "rosbag record -a"]}]}}]}
{"name": "threejs", "root": "./", "windows": [{"api": {"layout": "tilled", "panes": ["yarn start", "clear"]}}]}
{"name": "zsh-jabba", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "svelte-preprocess-cljs", "root": ".", "windows": [{"VIM": {"layout": "even-horizontal", "panes": ["nvim", null]}}, {"GIT": "ssh-agent zsh"}]}
{"name": "nextjs-typescript", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "dokku-presentation", "pre_window": "source .env", "startup_window": "installation", "windows": [{"hello-app": ["echo \"Hello application\" | figlet -w 300 | lolcat", "./scripts/start_hello_app.sh"]}, {"todo-app": ["echo \"Todo application\" | figlet -w 300 | lolcat", "./scripts/start_todo_app.sh"]}, {"installation": ["touch install.lock", "./scripts/init_scaleway_server.sh", "./scripts/drive_install_dokku.sh"]}]}
{"name": "home-infra", "root": "~/projects/home-infra", "on_project_start": "open \"http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy\"", "startup_window": "editor", "attach": true, "windows": [{"editor": "nvim"}, {"server": "kubectl proxy"}, {"app-console": "kubectl -n kubernetes-dashboard create token admin-user"}, {"db-console": null}, {"shell": null}]}
{"name": "type", "root": "./", "tmux_options": "-f ./.tmux.mac.conf", "windows": [{"reputation-manager": {"layout": "tiled", "panes": ["yarn start", "yarn test", "yarn storybook", "yarn run"]}}]}
{"name": "task-conveyor", "windows": [{"docker": {"layout": "main-vertical", "panes": ["npm install; npm run build-dev", "docker-compose up --build web"]}}]}
{"name": "ruby-client", "root": "~/projects/ruby-client/", "windows": [{"editor": {"layout": "main-vertical", "panes": [{"vim": "$EDITOR"}, {"bash": ["git pull", "git status", "bundle", "bundle outdated"]}]}}, {"guard": {"layout": "even-horizontal", "panes": [{"guard": ["bundle exec guard"]}]}}]}
{"name": "simulation", "root": "./", "startup_window": "hover_mode", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_FILE=./custom_configs/world.yaml; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=dunes_plane gui:=true"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForSimulation; rosrun rviz rviz -d ./custom_configs/rviz.rviz"]}}, {"status": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 2 3 4 5 $UAV_TYPE --enable-rangefinder --pos_file `pwd`/pos.yaml\""]}}, {"control": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager_uav1.yaml", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager_uav2.yaml", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager_uav3.yaml", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager_uav4.yaml", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager_uav5.yaml"]}}, {"automatic_start": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"command_sender": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch flocking command_sender.launch config_uav_names:=./custom_configs/uav_names.yaml"]}}, {"hover_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 0\\\""]}}, {"swarming_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 1\\\""]}}, {"emergency_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 2\\\""]}}, {"takeoff": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav4; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav5; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"sensor_neighbor": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav4; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_uav_names:=./custom_configs/uav_names.yaml", "export UAV_NAME=uav5; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_uav_names:=./custom_configs/uav_names.yaml"]}}, {"formation": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav4; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav5; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml"]}}]}
{"name": "dspace-postgresql-utils", "root": "<% ENV['PWD'] %>", "pre_window": "rvm use 2.7.0", "windows": [{"editor": {"layout": "even-horizontal", "panes": ["vim Gemfile", "bundle install"]}}, {"postgresql": {"layout": "even-horizontal", "panes": ["cd database_exports; psql dspace_staging dspace", "cd database_exports; psql dspace_production dspace"]}}]}
{"name": "<%= File.basename(Dir.pwd) %>", "windows": [{"app": {"panes": ["find . -name '*.go' -or -name '*.tmpl' -type f | entr -r go run . --verbose", "mosquitto_sub --url \"$(sed s/ssl/mqtts/g <<< \"$MQTT_URL\")/#\" -F %J | jq", null]}}]}
{"name": "dev", "root": ".", "windows": [{"backend": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "flask run"]}, {"workers": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "celery worker -A tasks.celery --loglevel=error"]}, {"frontend": ["cd front", "yarn dev"]}]}
{"name": "commitlint-config", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch offshore_uav_pack offshore_rig.launch \"world_name:=fase2\""]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/uav1_pos.yaml --enable-bluefox-camera\"", "history -s roslaunch offshore_uav_pack spawn_wamv1.launch \";\" roslaunch offshore_uav_pack spawn_wamv2.launch \";\" roslaunch offshore_uav_pack spawn_wamv3.launch"]}}, {"control": {"layout": "tiled", "panes": ["waitForOdometry; roslaunch mrs_uav_general core.launch config_odometry:=./custom_configs/odometry.yaml"]}}, {"takeoff": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"mission": {"layout": "tiled", "panes": ["waitForControl; sleep 20; python3 ../../scripts/fase2.py"]}}]}
{"name": "shelley_qa", "root": "/home/artur/Playground/blockchain_networks/Base_Projects", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["if [ -d \"cardano-node\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-node; fi", "cd cardano-node", "if [ -d \"shelley_qa\" ]; then echo \"SQA Config folder already exists.\"; else cp -R /home/artur/Playground/blockchain_networks/shelley_qa/shelley_qa . ; fi", "./_cardano-node run --topology shelley_qa/topology.json --database-path shelley_qa/db --socket-path shelley_qa/node.socket --config shelley_qa/config.json"]}, {"db-sync": ["if [ -d \"cardano-db-sync\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-db-sync; fi", "cd cardano-db-sync", "PGPASSFILE=config/pgpass-shelley-qa db-sync-node/bin/cardano-db-sync --config config/shelley-qa-config.json --socket-path ../cardano-node/shelley_qa/node.socket --schema-dir schema/ --state-dir ledger-state/shelley_qa"]}, {"smash": ["cd cardano-db-sync", "PGPASSFILE=config/pgpass-shelley-qa ./_cardano-smash-server --config config/shelley-qa-config.json --port 3100 --admins admins.txt"]}, {"node_playground": ["sleep 20", "export CARDANO_NODE_SOCKET_PATH=/home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/shelley_qa/node.socket", "cardano-cli query tip --testnet-magic 3"]}, {"smash_playground": ["sleep 20", "cat /home/artur/Playground/blockchain_networks/shelley_qa/shelley_qa.txt", "echo \"Checking SMASH service status:\"", "curl http://localhost:3100/api/v1/status"]}]}}]}
{"name": "pyworkplace", "root": "<%= ENV[\"PROJECTS\"] %>/python/pyworkplace", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate pyworkplace", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "reverseshell", "root": ".", "windows": [{"editor": {"layout": "main-horizontal", "panes": [null, null]}}]}
{"name": "tmuxinator", "root": ".", "windows": [{"remix": "pnpm remix dev"}, {"database": "scripts/database.sh"}, {"pgtyped": "pnpm pgtyped:watch --uri \"postgres://postgres:postgres@localhost/postgres\""}]}
{"name": "experiment", "root": "./", "startup_window": "start", "tmux_options": "-f tmux.conf", "pre_window": "export SESSION=2d_flux_measuring_150px; export SENSOR=0", "windows": [{"rospix": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch long_cell_scanner rospix.launch"]}}, {"start": {"layout": "even-vertical", "panes": ["history -s rosservice call /rospix/sensor_$SENSOR/do_continuous_exposure 0.03"]}}, {"masker": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch long_cell_scanner masker.launch sensor:=$SENSOR"]}}, {"record": {"layout": "even-vertical", "panes": ["waitForRos; mkdir -p ~/rex/data/$SESSION; ./record.sh \"$SESSION\""]}}, {"saver": {"layout": "even-vertical", "panes": ["waitForRos; mkdir -p ~/rex/data/$SESSION; roslaunch long_cell_scanner saver.launch sensor:=$SENSOR sub_directory:=$SESSION"]}}, {"controller": {"layout": "even-vertical", "panes": ["waitForRos; read; roslaunch long_cell_scanner controller.launch sensor:=$SENSOR"]}}, {"integrator": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch rospix_utils integrator.launch sensor:=$SENSOR"]}}, {"normalizer": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch rospix_utils normalizer.launch sensor:=$SENSOR topic:=masker_$SENSOR/image_out invert:=true name_suffix:=_orig", "waitForRos; roslaunch rospix_utils normalizer.launch sensor:=$SENSOR topic:=integrator_$SENSOR/image_out invert:=true name_suffix:=_int"]}}, {"rqt": {"layout": "even-vertical", "panes": ["waitForRos; sleep 2; rqt_image_view /norm_orig_$SENSOR/image_out", "waitForRos; sleep 2; rqt_image_view /norm_int_$SENSOR/image_out", "waitForRos; ~/.i3/layout_manager.sh rex-observing"]}}, {"control": {"layout": "main-horizontal", "panes": ["waitForRos; roslaunch long_cell_scanner scanner.launch sensor:=$SENSOR"]}}]}
{"name": "prettierrc", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "go-gin-sample", "root": "<%= ENV[\"PROJECTS\"] %>/go/go-gin-sample", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate go-gin-sample", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "~/", "startup_window": "takeoff", "windows": [{"gazebo": {"layout": "even-vertical", "panes": ["roslaunch uav_localize simulation.launch"]}}, {"spawn": {"layout": "even-vertical", "panes": ["waitForSimulation; spawn 1 --run --delete --enable-rangefinder --enable-ground-truth --enable-realsense-front --enable-realistic-realsense", "waitForSimulation; spawn 2 --run --delete --enable-rangefinder --enable-ground-truth"]}}, {"odometry": {"layout": "even-vertical", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_mav_manager simulation_f550_gps.launch", "export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_mav_manager simulation_f550_gps.launch"]}}, {"takeoff": {"layout": "even-vertical", "panes": [" export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mav_manager/takeoff; sleep 5; rosservice call /$UAV_NAME/control_manager/switch_tracker mrs_trackers/LineTracker; rosservice call /$UAV_NAME/control_manager/goto \"goal: [-5.0, 0.0, 5.0, 0.0]\" ", " export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mav_manager/takeoff; sleep 5; rosservice call /$UAV_NAME/control_manager/switch_tracker mrs_trackers/LineTracker; rosservice call /$UAV_NAME/control_manager/goto \"goal: [4.0, 0.0, 5.0, 0.0]\" "]}}, {"random_flier": {"layout": "even-vertical", "panes": [" export UAV_NAME=uav2; waitForControl; sleep 10; roslaunch uav_detect random_flier.launch "]}}]}
{"name": "emotional2", "windows": [{"build": {"layout": "tiled", "root": ".", "panes": ["PORT=3005 npm run build", "npm run dev"]}}]}
{"name": "money-manager", "root": ".", "on_project_stop": "tmux send-keys -t money-manager:0.0 C-c exit Enter tmux send-keys -t money-manager:0.1 C-c exit Enter\n", "attach": false, "windows": [{"server": {"root": ".", "layout": "even-horizontal", "panes": ["bundle exec rails s", "./bin/webpack-dev-server"]}}]}
{"name": "zsh-gvm", "root": "<%= ENV[\"PROJECTS\"] %>/zsh/zsh-gvm", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch offshore_uav_pack offshore_rig.launch \"world_name:=fase4\""]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/uav1_pos.yaml --enable-bluefox-camera \"", "history -s roslaunch offshore_uav_pack spawn_wamv1.launch \";\" roslaunch offshore_uav_pack spawn_wamv2.launch \";\" roslaunch offshore_uav_pack spawn_wamv3.launch \";\" roslaunch offshore_uav_pack spawn_equip_wamv1.launch \";\" roslaunch offshore_uav_pack spawn_equip_wamv2.launch \";\" roslaunch offshore_uav_pack spawn_equip_wamv3.launch"]}}, {"control": {"layout": "tiled", "panes": ["waitForOdometry; roslaunch mrs_uav_general core.launch config_odometry:=./custom_configs/odometry.yaml"]}}, {"takeoff": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}]}
{"name": "tmux-github", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "learn-go", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "default", "root": "~/", "windows": [{"root": {"layout": "d0fd,147x39,0,0,0", "panes": ["clear && sudo su -"]}}, {"mc": {"layout": "d0fe,147x39,0,0,1", "panes": ["clear && mc"]}}]}
{"name": "webxr4", "root": ".", "windows": [{"editor": {"layout": "main-horizontal", "panes": ["TERM=xterm-24bit emacs -nw .", null, "python3 -m http.server 8000 --bind 127.0.0.1"]}}]}
{"name": "project", "root": "~/ws_submission_<%= @settings[\"submission_id\"] %>", "windows": [{"benchmark": {"layout": "tiled", "panes": [{"shell": "tmux detach"}, {"core": ["roscore"]}, {"bridge": ["roslaunch --wait social_sim_ros sim_tcp_bridge.launch"]}, {"controller": ["roslaunch --wait <%= @settings[\"package\"] %> submission.launch"]}, {"description": ["roslaunch --wait social_sim_ros kuri_description.launch"]}, {"map_publisher": ["rosrun social_sim_ros map_publisher.py"]}, {"trial_info": ["roslaunch --wait social_sim_ros submission_trial_info.launch datapath:=~/ws_submission_<%= @settings[\"submission_id\"] %>/data submission_id:=<%= @settings[\"submission_id\"] %>"]}, {"scan": ["roslaunch --wait social_sim_ros depth_to_laserscan.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find social_sim_ros)/config/move.rviz"]}]}}]}
{"name": "preprod", "root": "/home/artur/Playground/blockchain_networks/Base_Projects", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["if [ -d \"cardano-node\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-node; fi", "cd cardano-node", "if [ -d \"preprod\" ]; then echo \"Preprod Config folder already exists.\"; else cp -R /home/artur/Playground/blockchain_networks/preprod/preprod . ; fi", "./_cardano-node run --topology preprod/topology.json --database-path preprod/db --socket-path preprod/node.socket --config preprod/config.json"]}, {"db-sync": ["if [ -d \"cardano-db-sync\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-db-sync; fi", "cd cardano-db-sync", "psql -c \"DROP DATABASE preprod_playground\"", "PGPASSFILE=config/pgpass-preprod scripts/postgresql-setup.sh --createdb", "PGPASSFILE=config/pgpass-preprod db-sync-node/bin/cardano-db-sync --config config/preprod-config.yaml --socket-path ../cardano-node/preprod/node.socket --schema-dir schema/ --state-dir ledger-state/preprod"]}, {"smash": ["cd cardano-db-sync", "PGPASSFILE=config/pgpass-preprod ./_cardano-smash-server --config config/preprod-config.yaml --port 3100 --admins admins.txt"]}, {"node_playground": ["sleep 20", "export CARDANO_NODE_SOCKET_PATH=/home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/preprod/node.socket", "cardano-cli query tip --testnet-magic 1"]}, {"smash_playground": ["sleep 20", "cat /home/artur/Playground/blockchain_networks/preprod/preprod.txt", "echo \"Checking SMASH service status:\"", "curl http://localhost:3100/api/v1/status"]}]}}]}
{"name": "simulation", "root": "./", "startup_window": "SARC-UFSC-takeoff", "pre_window": "export UAV_NAME=uav1; export WORLD_FILE=./world.yaml; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"rosbridge": {"layout": "tiled", "panes": ["waitForRos; roslaunch rosbridge_server rosbridge_websocket.launch"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch sarc_environment sarc.launch", "waitForRos; roslaunch sarc_environment sarc_low_map.launch", "waitForOdometry; gz camera -c gzclient_camera -f ${UAV_NAME}; history -s gz camera -c gzclient_camera -f ${UAV_NAME}"]}}, {"status": {"layout": "tiled", "panes": null}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable_bluefox_camera --enable-ground-truth --pos_file `pwd`/posG/pos1.yaml\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"SARC-UFSC-takeoff": {"layout": "tiled", "panes": ["waitForOdometry;export UAV_NAME=uav1; sleep 15; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/uav_manager/takeoff; sleep 5; rosservice call /$UAV_NAME/control_manager/goto_altitude \"5\""]}}, {"arming": {"layout": "tiled", "panes": ["waitForSimulation; sleep 30; rosrun sarc_environment landing.py"]}}]}
{"name": "grietas", "root": "~/git/grietas", "windows": [{"editor": "eval $EDITOR"}, {"gulp": "yarn code"}]}
{"name": "docker-python", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "zsh-transfer", "root": "./", "on_project_start": "make environment", "pre_window": "eval $(env-secrets bw me/env)", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "envsecrets", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "dev", "root": "~/code/homepage", "windows": [{"editor": {"layout": "main-vertical", "panes": ["lvim", "make back", "make front"]}}]}
{"name": "slides-testing", "root": "<%= ENV[\"PROJECTS\"] %>/slides/slides-testing", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate slides-testing", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "portf", "root": "~/", "windows": [{"portf": {"layout": "even-vertical", "root": "./", "panes": [{"dev": ["vim"]}, {"code": ["gb", "gco develop", "git-sync", "code ."]}]}}, {"gotop": {"root": "./", "panes": "gotop"}}]}
{"name": "template-project", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "terraform-aws-workspaces", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "plotter", "root": "./", "startup_window": "compton_cone_generator", "pre_window": "export UAV_NAME=uav68; export RUN_TYPE=uav; export UAV_TYPE=t650", "windows": [{"integrator": {"layout": "tiled", "panes": ["waitForRos; roslaunch rospix_utils integrator.launch topic_cluster_list:=/$UAV_NAME/compton_camera/cluster_list"]}}, {"normalizer": {"layout": "tiled", "panes": ["waitForRos; roslaunch rospix_utils normalizer.launch topic:=/integrator_0/image_out"]}}, {"cone_generator": {"layout": "tiled", "panes": ["waitForRos; roslaunch compton_cone_generator compton_cone_generator.launch"]}}, {"optimizer": {"layout": "tiled", "panes": ["waitForRos; roslaunch compton_camera_filter optimizer_1.launch"]}}, {"filter": {"layout": "tiled", "panes": ["waitForRos; roslaunch compton_camera_filter compton_filter_1.launch"]}}, {"cone_plotter": {"layout": "tiled", "panes": ["waitForRos; roslaunch compton_camera_python compton_plotter_rosbag.launch"]}}]}
{"name": "elm-solid", "root": "~/dev/elm-solid", "on_project_start": "npm install", "windows": [{"editor": {"layout": "main-vertical", "panes": ["./setup.sh watch", "npm start", null]}}]}
{"name": "howdypix", "startup_window": "apps", "windows": [{"libs": {"layout": "even-horizontal", "panes": ["yarn dev:libs", "yarn dev:services", "cd apps/worker && yarn dev"]}}, {"apps": {"layout": "even-vertical", "panes": ["cd apps/webapp && yarn dev", "cd apps/server && yarn dev"]}}]}
{"name": "hw1", "root": "./turtlejoy", "startup_window": "ros", "windows": [{"ros": {"layout": "01b7,205x57,0,0{102x57,0,0[102x28,0,0{51x28,0,0,0,50x28,52,0,2},102x28,0,29,3],102x57,103,0[102x14,103,0,4,102x13,103,15,8,102x28,103,29,6]}", "panes": ["roscore", {"vrep": ["until rostopic list ; do sleep 1; done", "clear", "vrep -s $VREP_SCENES/rosControlKinect.ttt"]}, {"rostopic": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rostopic list"]}, "rosrun joy joy_node", {"joy": ["until rostopic list ; do sleep 1; done", "clear", "rostopic echo /vrep/twistCommand"]}, "rosrun turtlejoy turtlejoy.py"]}}, {"build": {"layout": "4a3b,205x57,0,0{102x57,0,0,1,102x57,103,0[102x28,103,0,7,102x28,103,29,9]}", "panes": ["vim src/turtlejoy.cpp", {"git": ["cd ../..", "clear"]}, {"build": ["cd ~/ros_ws/", "clear"]}]}}]}
{"name": "refactoring", "root": "~/development/martin-fowler-refactoring-2nd", "windows": [{"yarn": {"layout": "even-horizontal", "panes": [null, "git pull && yarn test"]}}]}
{"name": "dev", "root": ".", "windows": [{"backend": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "flask run"]}, {"workers": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "celery worker -A tasks.celery --loglevel=error"]}, {"frontend": ["cd front", "yarn dev"]}]}
{"name": "dev", "root": ".", "windows": [{"backend": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "flask run"]}, {"workers": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "celery worker -A tasks.celery --loglevel=error"]}, {"frontend": ["cd front", "yarn dev"]}]}
{"name": "dev", "root": ".", "windows": [{"backend": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "flask run"]}, {"workers": ["export FLASK_ENV=development", "export AUTHLIB_INSECURE_TRANSPORT=1", "export APP_SETTINGS='config.development_secret.Config'", "cd api", "celery worker -A tasks.celery --loglevel=error"]}, {"frontend": ["cd front", "yarn dev"]}]}
{"name": "webxr4", "root": ".", "windows": [{"editor": {"layout": "main-horizontal", "panes": ["TERM=xterm-24bit emacs -nw .", null, "python3 -m http.server 8000 --bind 127.0.0.1"]}}]}
{"name": "ros2_example", "root": "./", "startup_window": "params", "pre_window": "export RCUTILS_COLORIZED_OUTPUT=1; source /opt/ros/foxy/setup.zsh; source ~/ros2_bridge_workpsace/install/setup.zsh", "windows": [{"params": {"layout": "horizontal", "panes": ["ros2 launch ros2_examples params_example.py"]}}, {"timers": {"layout": "horizontal", "panes": ["ros2 launch ros2_examples timer_example.py"]}}, {"publisher_subscriber": {"layout": "horizontal", "panes": ["ros2 launch ros2_examples publisher_example.py", "ros2 launch ros2_examples subscriber_example.py"]}}, {"services": {"layout": "horizontal", "panes": ["ros2 launch ros2_examples service_client_example.py", "ros2 launch ros2_examples service_server_example.py"]}}]}
{"name": "noetic", "root": "~/ros_ws/", "startup_window": "editor", "tmux_command": "tmux -2", "windows": [{"build": {"panes": ["catkin build"]}}, {"ros": {"layout": "even-horizontal", "panes": ["roscore", "echo \"\\nAvailable local packages:\" && rospack list | grep -vwE \"/opt\""]}}, {"editor": {"panes": ["nvim -c \":CocCommand explorer --preset floating src/\""]}}, {"monitor": {"panes": ["htop"]}}]}
{"name": "sestrella/asdf-ghcup", "windows": [{"editor": "nvim ."}, {"shell": null}]}
{"name": "test-production-apps-with-cypress", "root": "<%= Dir.pwd %>", "windows": [{"frontend": {"layout": "main-vertical", "panes": ["vim README.md", "npm run start", "npm run test", "npm run cypress", null]}}]}
{"name": "devenv", "root": "~/", "windows": [{"grafana": {"layout": "even-horizontal", "panes": [{"grafana": ["cdgf"]}, {"static": ["cdgf"]}]}}, {"git": {"layout": "main-vertical", "panes": [{"git": ["cdgf", "git status"]}, {"git2": ["cdgf"]}]}}, {"hg": {"layout": "main-horizontal", "panes": [{"hgapi": ["cdhg", "cd dev"]}, {"hgapi": ["cdhg", "cd dev"]}, {"hgctl": ["cdhg"]}]}}, {"deploy": "cdd"}, {"bash": "cd ~"}, {"bash": "cd ~"}, {"bash": "cd ~"}, {"dotfiles": "cd ~/.dotfiles"}, {"irssi": "ssh grandalf"}]}
{"name": "cli-talk", "root": ".", "tmux_command": "byobu", "windows": [{"empty": ["cd ~", "clear", "echo -e \"\\nHallo Softwerkskammer\\n\" | boxes -d peek -a c"]}, {"ranger": ["cd ~", "clear", "echo -e \"\\nranger\\n\" | boxes -d peek -a c"]}, {"bat": ["clear", "echo -e \"\\nbat slides.md\\n\" | boxes -d peek -a c"]}, {"(porn) colorls": ["clear", "echo -e \"\\nlc\\n\" | boxes -d peek -a c"]}, {"(porn) lolcat": ["clear", "echo -e \"\\nla | lolcat\\n\" | boxes -d peek -a c"]}, {"(porn) no-more-secrets": ["clear", "echo -e \"\\nla | nms | lolcat\\n\" | boxes -d peek -a c"]}, {"christmas-tree": ["clear", "./christmas-tree.sh"]}]}
{"name": "cookiecutter-zsh-plugin", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "oraclett", "root": "/home/jneidel/code/oraclett", "windows": [{"vim": "cd src; vim"}, {"zsh": {"layout": "70a3,192x43,0,0[192x12,0,0,92,192x30,0,13,100]", "panes": ["nwb", null]}}]}
{"name": "smart-garage-backend", "root": "/home/pi/smart-garage-backend/.", "attach": false, "windows": [{"editor": {"layout": "tiled", "panes": [{"control-server": ["cd garage-control-server", "python3 garage-control.py"]}, {"sensor-server": ["cd sensor-server", "python3 sensor.py"]}, {"monitoring-server": ["cd monitoring-server", "python3 monitoring.py"]}]}}]}
{"name": "peterdohertys-website", "root": "~/projects/peterdohertys-website", "windows": [{"work": {"layout": "main-vertical", "panes": ["stack clean && stack build && stack exec site clean && stack exec site watch", null]}}]}
{"name": "leader_launch", "root": "./", "windows": [{"mavros": {"layout": "even-vertical", "panes": ["roslaunch mission_planner mavros_experiment.launch id:=1"]}}, {"ual": {"layout": "even-vertical", "panes": ["sleep 3; roslaunch mission_planner ual_experiment.launch drone_id:=1 pose:=[-10,5,0]"]}}, {"mission_leader": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch mission_planner mission_planner_leader_experiment.launch drone_id:=1 leader:=true"]}}, {"camera": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch mission_planner camera_experiment.launch drone_id:=1"]}}, {"trajectory_follower": {"layout": "even-vertical", "panes": ["sleep 5; roslaunch mission_planner trajectory_follower_experiment.launch drone_id:=1"]}}, {"rosbag": {"layout": "even-vertical", "panes": ["sleep 25; roslaunch mission_planner rosbag_recorder_experiment.launch id:=1 record_duration:=120"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export WORLD_NAME=simulation_baylands; export SENSORS=\"garmin_down\"; export ODOMETRY_TYPE=\"rtk\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch gui:=true world_file:='$(find detection_gazebo_resources)/worlds/baylands.world'", "waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1"]}}, {"status": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --enable-ouster --ouster-model OS0-128 --use-gpu-ray --pos -65 -286 0.1 0\""]}}, {"control": {"layout": "tiled", "panes": ["waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"takeoff": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForControl; roslaunch mrs_detection rviz.launch", "waitForControl; roslaunch mrs_rviz_plugins load_robot.launch"]}}, {"easy_control": {"layout": "tiled", "panes": ["waitForControl; waitForControl; roslaunch mrs_detection detection.launch", "waitForControl; waitForControl; roslaunch mrs_rviz_plugins rviz_interface.launch"]}}]}
{"name": "audio", "root": "~/", "project_root": ".", "windows": [{"docker": {"layout": "even-horizontal", "panes": [{"Audio Send": ["docker/docker_run.sh imperio_speech", "python3 examples/streaming_speech_flask/streaming_speech_server.py"]}, {"Audio Receive": ["docker/docker_run.sh imperio_audio", "python3 examples/audio.py"]}]}}]}
{"name": "klippy", "root": "~/", "windows": [{"editor": {"layout": "main-vertical", "panes": [{"klippy-log": ["less --follow-name +F /tmp/klippy.log"]}, {"gcode-out": ["less --follow-name -f +F /tmp/printer"]}, {"gcode-in": ["gcodeLoop"]}]}}]}
{"name": "mutationtesting", "root": ".", "windows": [{"content": {"layout": "main-horizontal", "panes": ["cd DemoCsharp", "cd DemoJava/Demo", "cd DemoJs", "cd DemoPython/python-demo"]}}]}
{"name": "quimiapan", "on_project_start": "docker-compose up -d", "windows": [{"server": {"layout": "tiled", "panes": [{"pane1": ["composer install", "php artisan key:generate", "php artisan storage:link", "php artisan serve"]}, {"pane2": ["npm install", "open http://localhost:8025", "open http://localhost:8000", "npm run watch"]}]}}, {"editor": "$EDITOR"}]}
{"name": "ansible-role-pureftpd", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "bombard", "root": "/mnt/c/Users/Andrei_Sorokin2/projects/bombard", "windows": [{"debug": "cd bombard; python3"}, {"bash": "cd bombard; . ./activate.sh"}]}
{"name": "dev", "root": "~/", "windows": [{"proj": {"root": "~/Projects/github.com/Aireck2/portfolio-api", "layout": "even-vertical", "panes": [{"dev": null}, {"dev": null}]}}]}
{"name": "zmq-grpc-proxy-poc", "windows": [{"servers": {"layout": "main-horizontal", "panes": ["target/debug/proxy --bind-port=1111 --grpc-port=2222 --zmq-port=3333", "target/debug/grpc_server --bind-port=2222", "target/debug/zmq_pull --bind-port=3333"]}}, {"clients": {"layout": "tiled", "panes": ["sleep 10 && target/debug/grpc_client --name=\"GRPC Client 1\" --connect-port=1111", "sleep 10 && target/debug/grpc_client --name=\"GRPC Client 2\" --connect-port=1111", "sleep 10 && target/debug/zmq_push --name=\"ZMQ Push 1\" --connect-port=1111", "sleep 10 && target/debug/zmq_push --name=\"ZMQ Push 2\" --connect-port=1111"]}}]}
{"name": "zsh-clean", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "dbg", "pre_window": "export ARM_TYPE=j2n6s300", "windows": [{"roscore": {"layout": "even-vertical", "panes": ["roscore"]}}, {"virtual_robot": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch j2n6s300_moveit_config j2n6s300_virtual_robot_demo.launch"]}}, {"arm_manager": {"layout": "even-vertical", "panes": ["sleep 5; roslaunch kinova_control_manager control_manager.launch"]}}, {"vision": {"layout": "even-vertical", "panes": ["sleep 8; roslaunch realsense2_camera rs_aligned_depth.launch", "sleep 9; rosrun mbzirc_husky brickDetector"]}}, {"home_arm": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/home_arm", "history -s rosservice call /kinova/arm_manager/soft_home_arm"]}}, {"prepare_gripping": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/prepare_gripping"]}}, {"align_arm": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/align_arm"]}}, {"pickup_brick": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/pickup_brick"]}}, {"goto": {"layout": "even-vertical", "panes": ["sleep 5; rostopic echo /kinova/arm_manager/status", "history -s rosservice call /kinova/arm_manager/goto \\\"pose: \\[0.0, 0.0, 0.0, 0.0, 0.0, 0.0\\]\\\""]}}, {"goto_relative": {"layout": "even-vertical", "panes": ["sleep 5; rostopic echo /kinova/arm_manager/status", "history -s rosservice call /kinova/arm_manager/goto_relative \\\"pose: \\[0.0, 0.0, 0.0, 0.0, 0.0, 0.0\\]\\\""]}}, {"cartesian_velocity": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/set_velocity \\\"pose: \\[0.0, 0.0, 0.1\\]\\\""]}}, {"rviz": {"layout": "even-vertical", "panes": ["sleep 5; rviz"]}}]}
{"name": "godot-pong", "root": "<%= ENV[\"PROJECTS\"] %>/godot/pong", "on_project_start": "make stage", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate godot-pong", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "maporizer", "root": "~/dev/maporizer", "windows": [{"main": {"layout": "main-vertical", "panes": ["emacs .", "ls maporizer.xsl | entr -cr bash -c \"time java -jar saxon.jar -s:peckhamXL3.xml -xsl:maporizer.xsl -o:peckham.svg title='P E C K H A M' && echo done\"", null]}}]}
{"name": "tmux-config", "root": "./", "windows": [{"(git)": {"layout": "main-vertical", "panes": [null]}}, {"(master)": {"layout": "main-vertical", "panes": ["cd master"]}}, {"(slaves)": {"layout": "tiled", "synchronize": "after", "panes": ["cd slave01 && tmux select-pane -t 2.0 -T slave01", "cd slave02 && tmux select-pane -t 2.1 -T slave02", "cd slave03 && tmux select-pane -t 2.2 -T slave03", "cd slave04 && tmux select-pane -t 2.3 -T slave04", "cd slave05 && tmux select-pane -t 2.4 -T slave05", "cd slave06 && tmux select-pane -t 2.5 -T slave06", "cd slave07 && tmux select-pane -t 2.6 -T slave07", "cd slave08 && tmux select-pane -t 2.7 -T slave08", "cd slave09 && tmux select-pane -t 2.8 -T slave09", "cd slave10 && tmux select-pane -t 2.9 -T slave10", "cd slave11 && tmux select-pane -t 2.10 -T slave11"]}}, {"(extras)": {"layout": "even-vertical", "panes": ["cd _extra01 && tmux select-pane -t 3.0 -T _extra01", "cd _extra02 && tmux select-pane -t 3.1 -T _extra02"]}}]}
{"name": "hw4", "root": ".", "startup_window": "ros", "windows": [{"ros": {"layout": "b2a4,205x57,0,0{102x57,0,0[102x28,0,0{51x28,0,0,0,50x28,52,0,3},102x28,0,29,4],102x57,103,0[102x28,103,0,5,102x28,103,29,7]}", "panes": ["roscore", {"vrep": ["until rostopic list ; do sleep 1; done", "clear", "vrep -h -s ../scenes/rosControlKinect3d.ttt"]}, {"rostopic": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "rostopic list"]}, {"roslaunch": ["until rostopic info /vrep/info; do sleep 1; done", "clear", "roslaunch floor_plane_ransac fpr.launch"]}]}}, {"vim": "vim -O floor_plane_hough/src/floor_plane_hough.cpp floor_plane_ransac/src/floor_plane_ransac.cpp -c 'cd ~/ros_ws/build'"}, {"build": {"layout": "even-horizontal", "panes": [{"build": ["cd ~/ros_ws/", "clear"]}, {"git": ["cd ..", "clear"]}]}}]}
{"name": "cookiecutter-tmux-plugin", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "pokermans", "root": "./", "pre_window": "nvm use", "windows": [{"editor": {"layout": "main-vertical", "panes": ["ls -l", "npm run test -- --watchAll", "git status"]}}, {"server": {"layout": "even-vertical", "panes": ["npm run dev", "npm run storybook", "npm run cypress:open", "npx prisma studio"]}}]}
{"name": "ansible-example", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "Banble", "windows": [{"editor": {"layout": "main-vertical", "panes": ["vim"]}}, {"server": "yd"}, {"terminal": "echo \"Get shit done.\""}]}
{"name": "blockchain-with-nodejs", "root": ".", "windows": [{"editor": "nvim"}, {"sockets": {"layout": "even-vertical", "panes": ["npm run start", "npm run start -- 2829 127.0.0.1:2828"]}}, {"tests": "npm run test"}]}
{"name": "slides-user-story", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "starred-repos", "root": "./", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "blog", "root": ".", "tmux_command": "byobu", "windows": [{"docker": ["cd 02*", "./run-container.sh", "cd ~", "./post-install.sh", "cd /octopress", "alias la='ls -al'", "echo \"Hello in Docker!\""]}, {"local": ["cd share/octopress", "ls -al", "echo \"new post              -> rake new_post\"", "echo \"editing previous post -> source/_posts\"", "echo \"update talks          -> source/talks/index.markdown\""]}]}
{"name": "python", "root": "/home/simba/ncku/physic-python/HW3", "windows": [{"editor": {"layout": "main-horizontal", "panes": [". /home/simba/ncku/physic-python/bin/activate; vim a.py", ". /home/simba/ncku/physic-python/bin/activate; nodemon --watch *.py --exec python a.py"]}}]}
{"name": "test2", "root": "~/", "windows": [{"exercise": {"layout": "even-horizontal", "panes": [{"p1": "ping 8.8.8.8"}, {"p2": "watch -n 2 -d nvidia-smi"}]}}]}
{"name": "node-tweets", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "vscode-show-buffers", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "lagoon", "root": ".", "windows": [{"logs": {"layout": "tiled", "panes": ["docker-compose logs -f --tail=5 webhook-handler", "docker-compose logs -f --tail=5 webhooks2tasks", "docker-compose logs -f --tail=5 openshiftdeploy", "docker-compose logs -f --tail=5 openshiftremove"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "pre_window": "export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export RUN_TYPE=simulation; export WORLD_FILE=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/world_defs/world_gps.yaml; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["export EPISODE=0; roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["export EPISODE=0; waitForRos; roslaunch mrs_simulation simulation.launch gui:=true world_file:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/ros_packages/swarm_gazebo_resources/worlds/grass_plane.world"]}}, {"rviz": {"layout": "tiled", "panes": ["export EPISODE=0; waitForRos; sleep 2; rviz -d /tmp/swarm_rviz_config.yaml"]}}, {"status": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForRos; roslaunch mrs_uav_status status.launch", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForRos; roslaunch mrs_uav_status status.launch"]}}, {"swarm_controller": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForControl; roslaunch swarm_control_manager swarm_control_manager.launch controller_pkg:=pacnav origin_frame:=local_origin uav_frame:=fcu_untilted", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForControl; roslaunch swarm_control_manager swarm_control_manager.launch controller_pkg:=pacnav origin_frame:=local_origin uav_frame:=fcu_untilted"]}}, {"run_swarm_ctrl": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; history -s rosservice call /$UAV_NAME/uav_manager/land; history -s rosservice call /$UAV_NAME/swarm_control_manager/activate_controller; history -s rosservice call /$UAV_NAME/swarm_control_manager/run_controller", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; history -s rosservice call /$UAV_NAME/uav_manager/land; history -s rosservice call /$UAV_NAME/swarm_control_manager/activate_controller; history -s rosservice call /$UAV_NAME/swarm_control_manager/run_controller"]}}, {"goto": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; history -s rosservice call /$UAV_NAME/path_finder/path_goto", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; history -s rosservice call /$UAV_NAME/path_finder/path_goto"]}}, {"spawn": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForSimulation; sleep 2; rosservice call /mrs_drone_spawner/spawn \"$UAV_NUM $UAV_TYPE --pos_file /home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/gazebo_config/init_uav_pose/grass_plane.yaml --enable-rangefinder --enable-rplidar\"", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForSimulation; sleep 2; rosservice call /mrs_drone_spawner/spawn \"$UAV_NUM $UAV_TYPE --pos_file /home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/gazebo_config/init_uav_pose/grass_plane.yaml --enable-rangefinder --enable-rplidar\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch config_uav_manager:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/uav_sys_config/uav_manager.yaml config_mpc_tracker:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/uav_sys_config/mpc_tracker.yaml config_constraint_manager:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/uav_sys_config/constraint_manager.yaml debug:=true", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch config_uav_manager:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/uav_sys_config/uav_manager.yaml config_mpc_tracker:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/uav_sys_config/mpc_tracker.yaml config_constraint_manager:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/uav_sys_config/constraint_manager.yaml debug:=true"]}}, {"takeoff": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForControl; sleep 2; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/uav_manager/takeoff", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForControl; sleep 2; rosservice call /$UAV_NAME/control_manager/motors 1; rosservice call /$UAV_NAME/mavros/cmd/arming 1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard; rosservice call /$UAV_NAME/uav_manager/takeoff"]}}, {"bumper": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_bumper bumper.launch", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_bumper bumper.launch"]}}, {"shared_gps_aggr": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForControl; roslaunch swarm_utils shared_gps_aggr.launch", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForControl; roslaunch swarm_utils shared_gps_aggr.launch"]}}, {"global_origin_tf": {"layout": "tiled", "panes": ["export UAV_NUM=1; export LED_FREQ=6; export UAV_NAME=uav1; waitForControl; roslaunch swarm_utils common_tf_pub.launch uav_frame:=fcu origin_frame:=local_origin global_frame:=global_origin init_pose_file:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/gazebo_config/init_uav_pose/grass_plane.yaml", "export UAV_NUM=2; export LED_FREQ=10; export UAV_NAME=uav2; waitForControl; roslaunch swarm_utils common_tf_pub.launch uav_frame:=fcu origin_frame:=local_origin global_frame:=global_origin init_pose_file:=/home/afzal/user_ros_workspace/src/mrs_swarm_core/simulation/config/gazebo_config/init_uav_pose/grass_plane.yaml"]}}]}
{"name": "simulation", "root": "./", "startup_window": "status", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gimbal": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_serial gimbal.launch"]}}, {"additional": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_gimbal_camera camera_to_apriltag_binding.launch"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForRos; rviz -d $(rospack find mrs_gimbal_camera)/rviz/gimbal.rviz"]}}, {"apriltag_detection": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_gimbal_camera gimbal_camera.launch"]}}]}
{"name": "dashboard", "windows": [{"main": {"layout": "tiled", "panes": ["docker logs -f stemn-slackbot_webhooks_1", "docker logs -f stemn-slackbot_test_1", "docker logs -f stemn-slackbot_api_1", "zsh || bash"]}}]}
{"name": "workspace", "root": "~/workspace/app", "windows": [{"app": ["vim"]}, {"server": ["ember serve"]}, {"bash": null}]}
{"name": "ansible-role-postgresql", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "hover_mode", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_FILE=./custom_configs/world.yaml; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=dunes_plane gui:=true"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForSimulation; rosrun rviz rviz -d ./custom_configs/rviz.rviz"]}}, {"status": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "even-vertical", "synchronize": "after", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos1.yaml --enable-uv-leds --uvled_s_l 0 --uvled_s_r 0 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 7;  rosservice call /mrs_drone_spawner/spawn \"2 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos2.yaml --enable-uv-leds --uvled_s_l 1 --uvled_s_r 1 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 15;  rosservice call /mrs_drone_spawner/spawn \"3 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos3.yaml --enable-uv-leds --uvled_s_l 2 --uvled_s_r 2 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\""]}}, {"control": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml"]}}, {"automatic_start": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"command_sender": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch flocking command_sender.launch"]}}, {"hover_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 0\\\""]}}, {"swarming_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 1\\\""]}}, {"emergency_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 2\\\""]}}, {"takeoff": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"uv_observer": {"layout": "tiled", "synchronize": "after", "panes": ["waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core new_signaling.launch"]}}, {"kalman_filter": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin"]}}, {"slow_down": {"layout": "even-vertical", "panes": ["waitForSimulation; waitForRos; sleep 15; gz physics -u 50"]}}, {"sensor_neighbor": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml"]}}, {"formation": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml"]}}, {"neighbors_topic": {"layout": "tiled", "synchronize": "after", "panes": ["waitForRos; rostopic echo /uav1/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav2/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav3/sensor_neighbor/neighbors"]}}, {"uvdar_uav1": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav1/uvdar/filteredPoses"]}}, {"uvdar_uav2": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav2/uvdar/filteredPoses"]}}, {"uvdar_uav3": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav3/uvdar/filteredPoses"]}}]}
{"name": "project", "root": "~/", "windows": [{"main": {"layout": "tiled", "panes": ["vim", "ash"]}}]}
{"name": "terrarium", "on_project_start": "docker network create terrarium_habitat && sleep 3", "on_project_stop": "./scripts/capture_logs.sh && docker-compose down", "startup_window": "console", "windows": [{"bastion": ["docker-compose up bastion"]}, {"alpha": ["docker-compose up alpha"]}, {"beta": ["docker-compose up beta"]}, {"gamma": ["docker-compose up gamma"]}, {"delta": ["docker-compose up delta"]}, {"console": ["docker-compose run console", "hab pkg install core/curl -b -f", "hab pkg install core/jq-static -b -f"]}, {"shell": ["bash"]}]}
{"name": "simulation", "root": "./", "startup_window": "example", "pre_window": "export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation; export SENSORS=\"garmin_down\"; export ODOMETRY_TYPE=\"gps\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=grass_plane gui:=true", "waitForOdometry; gz camera -c gzclient_camera -f uav1; history -s gz camera -c gzclient_camera -f uav1"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"status": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "tiled", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --pos 0 0 1 0\"", "waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"2 $UAV_TYPE --enable-rangefinder --enable-mobius-camera-front --pos -15 0 1 0\""]}}, {"control": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch mrs_uav_general core.launch", "export UAV_NAME=uav2; waitForOdometry; roslaunch mrs_uav_general core.launch"]}}, {"automatic_start": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"example": {"layout": "tiled", "panes": ["export UAV_NAME=uav2; waitForRos; roslaunch tii_uav_example tii_uav_example.launch", "export UAV_NAME=uav2; history -s 'rosservice call /$UAV_NAME/tii_uav_example/start'"]}}, {"takeoff": {"layout": "tiled", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 2; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForControl; rosrun rviz rviz -d rviz.rviz", "waitForControl; export UAV_NAME=uav1; waitForControl; roslaunch mrs_rviz_plugins rviz_interface.launch", "waitForControl; export UAV_NAME=uav1; roslaunch mrs_rviz_plugins load_robot.launch", "waitForControl; export UAV_NAME=uav2; roslaunch mrs_rviz_plugins load_robot.launch"]}}, {"i3_layout": {"layout": "tiled", "panes": ["waitForControl; sleep 4; ~/.i3/layout_manager.sh ./i3_layout.json"]}}]}
{"name": "munzala", "root": "<%= Dir.pwd %>", "windows": [{"repl": {"root": "<%= Dir.pwd %>", "layout": "f030,181x43,0,0{105x43,0,0,0,75x43,106,0[75x21,106,0,2,75x21,106,22,5]}", "panes": ["make repl", "bash", "bash"]}}]}
{"name": "utils", "root": ".", "startup_window": "lein", "windows": [{"lein": {"panes": [{"shell": "ls"}, {"shell2": "ls"}, {"repl": "lein repl"}, {"tests": "lein test-refresh"}]}}]}
{"name": "Learn Python3 the Hard Way", "windows": [{"exercises": {"layout": "even-horizontal", "root": ".", "panes": ["git pull && python3", "git status"]}}]}
{"name": "experiment", "root": "./", "startup_window": "start", "tmux_options": "-f tmux.conf", "pre_window": "export SESSION=am_on_air_2; export SENSOR=0", "windows": [{"rospix": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch long_cell_scanner rospix.launch"]}}, {"start": {"layout": "even-vertical", "panes": ["history -s rosservice call /rospix/sensor_0/do_continuous_exposure 1.0", "history -s rosservice call /rospix/sensor_1/do_continuous_exposure 1.0"]}}, {"masker": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch long_cell_scanner masker.launch sensor:=0", "waitForRos; roslaunch long_cell_scanner masker.launch sensor:=1"]}}, {"record": {"layout": "even-vertical", "panes": ["waitForRos; mkdir -p ~/rex/data/$SESSION; ./record.sh \"$SESSION\""]}}, {"saver": {"layout": "even-vertical", "panes": ["waitForRos; mkdir -p ~/rex/data/$SESSION; roslaunch long_cell_scanner saver.launch sensor:=0 sub_directory:=$SESSION", "waitForRos; mkdir -p ~/rex/data/$SESSION; roslaunch long_cell_scanner saver.launch sensor:=1 sub_directory:=$SESSION"]}}, {"integrator": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch rospix_utils integrator.launch sensor:=0", "waitForRos; roslaunch rospix_utils integrator.launch sensor:=1"]}}, {"normalizer_0": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch rospix_utils normalizer.launch sensor:=0 topic:=masker_0/image_out invert:=true name_suffix:=_orig", "waitForRos; roslaunch rospix_utils normalizer.launch sensor:=0 topic:=integrator_0/image_out invert:=true name_suffix:=_int"]}}, {"normalizer_1": {"layout": "even-vertical", "panes": ["waitForRos; roslaunch rospix_utils normalizer.launch sensor:=1 topic:=masker_1/image_out invert:=true name_suffix:=_orig", "waitForRos; roslaunch rospix_utils normalizer.launch sensor:=1 topic:=integrator_1/image_out invert:=true name_suffix:=_int"]}}, {"rqt": {"layout": "even-vertical", "panes": ["waitForRos; sleep 2; rqt_image_view /norm_orig_0/image_out", "waitForRos; sleep 2; rqt_image_view /norm_int_0/image_out", "waitForRos; sleep 2; rqt_image_view /norm_orig_1/image_out", "waitForRos; sleep 2; rqt_image_view /norm_int_1/image_out", "waitForRos; ~/.i3/layout_manager.sh rex-observing-both"]}}, {"control": {"layout": "main-horizontal", "panes": ["waitForRos; roslaunch long_cell_scanner scanner.launch sensor:=$SENSOR"]}}]}
{"name": "detective", "root": "~/", "windows": [{"logs": {"layout": "tiled", "panes": [{"carla": ["cd /home/e5_5044/Desktop/carla/", "./CarlaUE4.sh -opengl"]}, {"GPU": ["watch nvidia-smi"]}, {"falsifier": ["cd ~/Desktop/k_explorer/", "source venv/bin/activate", "python falsifier.py"]}, {"simulator": ["cd ~/Desktop/k_explorer/", "source venv/bin/activate", "python simulator.py"]}]}}]}
{"name": "graph-thing", "root": ".", "on_project_first_start": "sudo docker-compose -f backend/docker-compose.yml up -d", "on_project_stop": "sudo docker-compose -f backend/docker-compose.yml down", "windows": [{"frontend": {"root": "./frontend", "layout": "main-horizontal", "panes": ["npm start", ""]}}, {"backend": {"root": "./backend", "layout": "06fe,204x52,0,0[204x31,0,0{102x31,0,0,1,101x31,103,0[101x14,103,0,6,101x16,103,15,7]},204x20,0,32,4]", "panes": ["npm run start:dev", "npm run watch:lint:fix", "npm run watch:test", ""]}}, {"root": ""}]}
{"name": "sakugahd", "root": ".", "windows": [{"nvim": ["clear", "nvim ."]}, {"server": ["cd server/", "clear"]}, {"client": ["cd client/", "clear"]}, {"sass build": ["cd client/", "clear", "sass --watch src/scss:src/css/"]}, {"bacon": "bacon -j clippy"}, {"git": ["clear", "gs"]}]}
{"name": "vite", "root": "./", "windows": [{"vite": {"layout": "even-vertical", "panes": [{"terminal": "clear; echo \"open http://localhost/admin/ or http://localhost/profile/\""}, {"admin": "cd ./repos/admin && yarn && yarn dev"}, {"profile": "cd ./repos/profile && yarn && yarn dev"}]}}]}
{"name": "flutter_hello_world", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "docker-latex", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "slides-ioc-challenger", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "timestamps-svelte", "root": "~/dev/timestamps-svelte", "windows": [{"main": {"layout": "main-vertical", "panes": ["npm run dev", null]}}]}
{"name": "simulation", "root": "./", "startup_window": "hover_mode", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_FILE=./custom_configs/world.yaml; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=dunes_plane gui:=true"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForSimulation; rosrun rviz rviz -d ./custom_configs/rviz.rviz"]}}, {"status": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "even-vertical", "synchronize": "after", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos1.yaml --enable-uv-leds --uvled_s_l 0 --uvled_s_r 0 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 5;  rosservice call /mrs_drone_spawner/spawn \"2 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos2.yaml --enable-uv-leds --uvled_s_l 1 --uvled_s_r 1 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 10;  rosservice call /mrs_drone_spawner/spawn \"3 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos3.yaml --enable-uv-leds --uvled_s_l 2 --uvled_s_r 2 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\""]}}, {"control": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml"]}}, {"automatic_start": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"command_sender": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch flocking command_sender.launch"]}}, {"hover_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 0\\\""]}}, {"swarming_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 1\\\""]}}, {"emergency_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 2\\\""]}}, {"takeoff": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"uv_observer": {"layout": "tiled", "synchronize": "after", "panes": ["waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core new_signaling.launch"]}}, {"kalman_filter": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin"]}}, {"slow_down": {"layout": "even-vertical", "panes": ["waitForSimulation; waitForRos; sleep 15; gz physics -u 50"]}}, {"sensor_neighbor": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml"]}}, {"formation": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml"]}}, {"neighbors_topic": {"layout": "tiled", "synchronize": "after", "panes": ["waitForRos; rostopic echo /uav1/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav2/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav3/sensor_neighbor/neighbors"]}}, {"uvdar_uav1": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav1/uvdar/filteredPoses"]}}, {"uvdar_uav2": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav2/uvdar/filteredPoses"]}}, {"uvdar_uav3": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav3/uvdar/filteredPoses"]}}]}
{"name": "zsh-karabiner", "root": "./", "on_project_start": "make environment", "pre_window": "eval $(env-secrets bw me/env)", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "prop", "windows": [{"watch": {"layout": "even-vertical", "panes": ["npm run pegjs:watch", "npm run babel:watch", "npm run webpack:watch"]}}, {"test": {"root": "test", "panes": "npm test"}}, {"root": {"panes": "git status"}}, {"src": {"root": "src", "panes": "tree"}}, {"cjs": {"root": "cjs", "panes": "tree"}}, {"umd": {"root": "umd", "panes": "tree"}}]}
{"name": "zsh-keybase", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "vimrc", "root": "./", "on_project_start": "make environment", "pre_window": "eval $(env-secrets bw me/env)", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "sestrella/nix-darwin-config", "windows": [{"editor": "nvim ."}, {"shell": null}]}
{"name": "mind-paper", "root": "~/sandboxes/mind-paper", "windows": [{"mohawk": {"layout": "18fb,189x45,0,0[189x33,0,0{52x33,0,0,21,136x33,53,0,37},189x11,0,34,32]", "panes": ["cd npm run start", {"shell_command": ["git status", "echo \"Loading tmuxinator from local\""]}, "flask run"]}}, {"db": "psql"}, {"notes": "vim .notes.md"}, {"htop": "htop"}, {"jobs": {"layout": "main-vertical", "panes": null}}, {"logs": {"layout": "even-horizontal", "panes": ["heroku logs --tail -a mind-paper-apiv1-qa"]}}, {"jupyter": "cd ~/analytics && conda activate base"}]}
{"project_name": "softcream", "windows": [{"editor": "vi"}, {"cli": null}, {"server": "live-server"}]}
{"name": "timestamps", "root": "~/dev/timestamps", "windows": [{"main": {"layout": "main-vertical", "panes": ["emacs -nw .", "http-server", null]}}]}
{"name": "noetic", "root": "~/ros_ws/", "startup_window": "editor", "tmux_command": "tmux -2", "windows": [{"build": {"panes": ["catkin build"]}}, {"ros": {"layout": "even-horizontal", "panes": ["roscore", "echo \"\\nAvailable local packages:\" && rospack list | grep -vwE \"/opt\""]}}, {"editor": {"panes": ["nvim -c \":CocCommand explorer --preset floating src/\""]}}, {"monitor": {"panes": ["htop"]}}]}
{"name": "noetic", "root": "~/ros_ws/", "startup_window": "editor", "tmux_command": "tmux -2", "windows": [{"build": {"panes": ["catkin build"]}}, {"ros": {"layout": "even-horizontal", "panes": ["roscore", "echo \"\\nAvailable local packages:\" && rospack list | grep -vwE \"/opt\""]}}, {"editor": {"panes": ["nvim -c \":CocCommand explorer --preset floating src/\""]}}, {"monitor": {"panes": ["htop"]}}]}
{"name": "cli-talk", "root": ".", "tmux_command": "byobu", "windows": [{"empty": ["cd ~", "clear", "echo -e \"\\nHallo Softwerkskammer\\n\" | boxes -d peek -a c"]}, {"ranger": ["cd ~", "clear", "echo -e \"\\nranger\\n\" | boxes -d peek -a c"]}, {"bat": ["clear", "echo -e \"\\nbat slides.md\\n\" | boxes -d peek -a c"]}, {"(porn) colorls": ["clear", "echo -e \"\\nlc\\n\" | boxes -d peek -a c"]}, {"(porn) lolcat": ["clear", "echo -e \"\\nla | lolcat\\n\" | boxes -d peek -a c"]}, {"(porn) no-more-secrets": ["clear", "echo -e \"\\nla | nms | lolcat\\n\" | boxes -d peek -a c"]}, {"christmas-tree": ["clear", "./christmas-tree.sh"]}]}
{"name": "k8s-tew", "on_project_start": "export PATH=$(pwd):$PATH", "windows": [{"editor": {"layout": "main-horizontal", "panes": ["vi", "make watch-and-compile"]}}, {"shell": null}, {"sandbox-command": ["cd setup/sandbox/vbox-single"]}, {"sandbox-environment": ["cd setup/sandbox/vbox-single", "source <(k8s-tew environment)"]}, {"k9s": ["cd setup/sandbox/vbox-single", "source <(k8s-tew environment)", "k9s"]}, {"documentation-update": ["make watch-and-update-documentation"]}, {"documentation-server": ["(cd docs/_build/html && python -m SimpleHTTPServer 8080)"]}, {"port-forwarding-80": ["make forward-80"]}, {"port-forwarding-443": ["make forward-443"]}]}
{"name": "a3s", "pre_window": "source env && export PATH=.:$PATH", "windows": [{"a3s": {"layout": "main-vertical", "panes": [{"term": ["clear"]}, {"a3s": ["a3s-run"]}, {"mongo": ["mongo-run"]}, {"nats": ["nats-run"]}]}}]}
{"name": "meltano", "root": "<%= ENV[\"MELTANO_ROOT\"] || '.' %>", "pre_window": "source <%= ENV[\"MELTANO_VENV\"] || \".venv\" %>/bin/activate", "startup_window": "shell", "windows": [{"services": {"layout": "main-vertical", "panes": ["docker-compose up warehouse_db", "python -m meltano.api", "cd src/webapp; yarn && yarn serve"]}}, {"shell": {"layout": "main-vertical", "panes": ["clear"]}}, {"logs": {"layout": "main-vertical", "panes": ["tail -f meltano.log", "less +G meltano.yml"]}}]}
{"name": "cpp_project", "on_project_start": "cmake -Bbuild && cmake --build build", "windows": [{"build": {"layout": "even-horizontal", "panes": ["vim main.cpp", "find . | entr -c './build_and_run.sh'"]}}]}
{"name": "gen-indices", "root": "/development/rust_proj", "startup_window": "gen-indices", "windows": [{"gen-indices": {"layout": "3ccd,274x63,0,0{90x63,0,0,47,90x63,91,0,49,92x63,182,0[92x22,182,0,50,92x21,182,23,51,92x18,182,45,52]}", "root": "/development/rust_proj/gen-indices", "panes": [{"cargo": ["cargo check", "coolprompt"]}, {"note": ["git status -sb", "coolprompt"]}, "coolprompt", "coolprompt", "coolprompt"]}}, {"tests": {"layout": "3ccd,274x63,0,0{90x63,0,0,47,90x63,91,0,49,92x63,182,0[92x22,182,0,50,92x21,182,23,51,92x18,182,45,52]}", "root": "/development/rust_proj/peekaboo", "panes": ["coolprompt", "coolprompt", "coolprompt", "coolprompt", "coolprompt"]}}]}
{"name": "webxr4", "root": ".", "windows": [{"editor": {"layout": "main-horizontal", "panes": ["emacs -nw .", null, "python3 -m http.server 8000 --bind 127.0.0.1"]}}]}
{"name": "sorokin", "root": "/mnt/c/Users/Andrei_Sorokin2/projects/sorokin.engineer", "windows": [{"sorokin": "cd sorokin.engineer"}, {"jekyll": "cd sorokin.engineer; jekyll serve"}]}
{"name": "detection_and_visualization", "startup_window": "main", "pre_window": "export UAV_NAME=uav1; export SIMULATION=true", "windows": [{"main": {"layout": "tiled", "panes": ["roslaunch uav_detect detect_depth.launch", "roslaunch uav_detect localize_single.launch", "roslaunch uav_detect display_detections.launch", "roslaunch uav_detect backproject_location.launch"]}}, {"rqt_reconfigure": {"layout": "even-vertical", "panes": ["rosrun rqt_reconfigure rqt_reconfigure"]}}, {"bash": {"layout": "even-vertical", "panes": ["mv -n layout-UAV_LOCALIZATION.json ~/.layouts/; ~/.i3/layout_manager.sh UAV_LOCALIZATION"]}}]}
{"name": "sudoku-solver", "windows": [{"app": {"root": "<%= Dir.pwd %>", "layout": "tiled", "panes": ["cargo watch -x run"]}}]}
{"name": "ruby-client-core", "root": "~/projects/ruby-client-core/", "windows": [{"editor": {"layout": "main-vertical", "panes": [{"vim": "$EDITOR"}, {"bash": ["git pull", "git status", "bundle", "bundle outdated"]}]}}, {"guard": {"layout": "even-horizontal", "panes": [{"guard": ["bundle exec guard"]}]}}]}
{"name": "cookiecutter-docker", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "chatserver", "root": "<%= ENV[\"PROJECTS\"] %>/go/chatserver", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate chatserver", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "project", "root": "./", "windows": [{"main": {"layout": "main-vertical", "panes": ["./up.sh && exit"]}}, {"kafka": {"layout": "d6d3,130x40,0,0{63x40,0,0,1,66x40,64,0,4}", "panes": ["sudo docker logs -f kafka_zk", "sudo docker logs -f kafka"]}}, {"mariadb": {"layout": "main-vertical", "panes": ["sudo docker logs -f db_maria"]}}, {"nginx": {"layout": "main-vertical", "panes": ["sudo docker logs -f nginx"]}}]}
{"name": "follower_launch_1", "root": "./", "windows": [{"mavros": {"layout": "even-vertical", "panes": ["roslaunch mission_planner mavros_experiment.launch id:=2"]}}, {"ual": {"layout": "even-vertical", "panes": ["sleep 3; roslaunch mission_planner ual_experiment.launch drone_id:=2 pose:=[-8,0,0]"]}}, {"mission_follower1": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch mission_planner mission_planner_follower_experiment.launch drone_id:=2 leader:=false"]}}, {"camera": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch mission_planner camera_experiment.launch drone_id:=2"]}}, {"trajectory_follower": {"layout": "even-vertical", "panes": ["sleep 5; roslaunch mission_planner trajectory_follower_experiment.launch drone_id:=2"]}}, {"rosbag": {"layout": "even-vertical", "panes": ["sleep 25; roslaunch mission_planner rosbag_recorder_experiment.launch id:=2 record_duration:=120"]}}]}
{"name": "terraform-module-aws-s3-redirect", "root": "<%= ENV[\"PROJECTS\"] %>/terraform/modules/terraform-module-aws-s3-redirect", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate terraform-module-aws-s3-redirect", "startup_window": "docker", "windows": [{"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "eslint-config", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "pagerduty-examples", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "streamdeck-ui-hs", "root": "/development/haskell/streamdeck-ui-hs", "startup_window": "streamdeck-ui-hs", "windows": [{"streamdeck-ui-hs": {"layout": "3ccd,274x63,0,0{90x63,0,0,47,90x63,91,0,49,92x63,182,0[92x22,182,0,50,92x21,182,23,51,92x18,182,45,52]}", "panes": [null, {"note": ["git status -sb"]}, null, null, null]}}, {"tests": {"layout": "3ccd,274x63,0,0{90x63,0,0,47,90x63,91,0,49,92x63,182,0[92x22,182,0,50,92x21,182,23,51,92x18,182,45,52]}", "panes": [null, null, null, null, null]}}]}
{"name": "outside", "windows": [{"main": null}, {"guard": "b guard"}]}
{"name": "hupai", "on_project_start": "export AWS_PROFILE=hupai.tips", "on_project_first_start": "mkdir -p dist", "windows": [{"serve": {"layout": "even-vertical", "panes": "npm start"}}, {"root": "git status"}, {"src": {"root": "src", "panes": "tree"}}]}
{"name": "mohkale-io", "windows": [{"root": {"layout": "6456,228x23,0,0{175x23,0,0,9,52x23,176,0,10}", "panes": ["lf || ranger || <%= ENV[\"EDITOR\"] || \"vim\" || \"vi\" %> .", "<%= @settings[\"serve-cmd\"] || \"bundle exec thor site:serve --no-webpack\" %>"]}}]}
{"name": "zsh-pipenv", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "zsh-gst", "root": "./", "on_project_start": "make environment", "pre_window": "eval $(env-secrets bw me/env)", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "review-mobile-app", "root": ".", "windows": [{"Default": {"layout": "main-vertical", "panes": ["npm test", "ionic serve", "watch docker ps", "code ."]}}, {"Logs": null}, {"Console": null}]}
{"name": "mist", "windows": [{"app": {"layout": "main-vertical", "panes": ["just app-tmux-astro", "just app-tmux-wasm"]}}]}
{"name": "yasnippet-snippets", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "repl", "root": "/workdir", "windows": [{"main": {"layout": "fbde,209x50,0,0{104x50,0,0[104x25,0,0,0,104x24,0,26,3],104x50,105,0,2}", "panes": ["node", "fish", "nvim /workdir/"]}}]}
{"name": "noctilux-tmux", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pipenv shell --fancy", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "trello", "root": "~/code/k2052/trello", "pre_window": "loadfnm", "windows": [{"npm": {"layout": "tiled", "panes": ["yarn run dev", "yarn run test:watch", "echo \"type commands here\""]}}]}
{"name": "preview", "root": "/home/artur/Playground/blockchain_networks/Base_Projects", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["if [ -d \"cardano-node\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-node; fi", "cd cardano-node", "if [ -d \"preview\" ]; then echo \"Preview Config folder already exists.\"; else cp -R /home/artur/Playground/blockchain_networks/preview/preview . ; fi", "./_cardano-node run --topology preview/topology.json --database-path preview/db --socket-path preview/node.socket --config preview/config.json"]}, {"db-sync": ["if [ -d \"cardano-db-sync\" ]; then echo \"Repository already exists.\"; else git clone https://github.com/input-output-hk/cardano-db-sync; fi", "cd cardano-db-sync", "PGPASSFILE=config/pgpass-preview db-sync-node/bin/cardano-db-sync --config config/preview-config.yaml --socket-path ../cardano-node/preview/node.socket --schema-dir schema/ --state-dir ledger-state/preview"]}, {"smash": ["cd cardano-db-sync", "PGPASSFILE=config/pgpass-preview ./_cardano-smash-server --config config/preview-config.yaml --port 3100 --admins admins.txt"]}, {"node_playground": ["sleep 20", "export CARDANO_NODE_SOCKET_PATH=/home/artur/Playground/blockchain_networks/Base_Projects/cardano-node/preview/node.socket", "cardano-cli query tip --testnet-magic 2"]}, {"smash_playground": ["sleep 20", "cat /home/artur/Playground/blockchain_networks/preview/preview.txt", "echo \"Checking SMASH service status:\"", "curl http://localhost:3100/api/v1/status"]}]}}]}
{"name": "shell_examples", "root": "./", "windows": [{"editor": {"layout": "9cef,135x72,0,0[135x36,0,0,0,135x35,0,37{63x35,0,37,1,71x35,64,37[71x17,64,37,3,71x17,64,55,4]}]", "panes": ["htop", "nano ./.tmuxinator.yml", "", ""]}}, {"server": "bundle exec rails s"}, {"logs": "tail -f log/development.log"}]}
{"name": "gclib_ros", "root": "./", "startup_window": "gclib_ros", "tmux_options": "-f tmux.conf", "windows": [{"gclib_ros": {"layout": "even-horizontal", "panes": ["waitForRos; roslaunch gclib_ros gclib.launch"]}}, {"roscore": {"layout": "even-horizontal", "panes": ["roscore"]}}]}
{"name": "zsh-notify", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "demo", "root": "~/", "windows": [{"demo": {"layout": "main-vertical", "panes": ["gst-launch-1.0   rtpbin name=rtpbin   udpsrc address=127.0.0.1 port=60000 caps=\"application/x-rtp, media=audio, encoding-name=OPUS, clock-rate=48000\" ! rtpbin.recv_rtp_sink_0   udpsrc address=127.0.0.1 port=60001 caps=\"application/x-rtcp\" ! rtpbin.recv_rtcp_sink_0   udpsrc address=127.0.0.1 port=60002 caps=\"application/x-rtp, media=video, encoding-name=VP8, clock-rate=90000\" ! rtpbin.recv_rtp_sink_1   udpsrc address=127.0.0.1 port=60003 caps=\"application/x-rtcp\" ! rtpbin.recv_rtcp_sink_1   rtpbin. ! rtpvp8depay ! vp8dec ! aasink     rtpbin. ! rtpopusdepay ! queue ! opusdec ! fakesink", "~/progs/bin/janus -D", "cd ~/janus-rtpforward-plugin/demo; http-server"]}}]}
{"name": "sean_navstack", "root": "~/sim_ws", "windows": [{"navstack": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"bridge": ["roslaunch --wait social_sim_ros sim_tcp_bridge.launch"]}, {"move_base": ["roslaunch --wait social_sim_ros kuri_move_base.launch"]}, {"description": ["roslaunch --wait social_sim_ros kuri_description.launch"]}, {"map_publisher": ["rosrun social_sim_ros map_publisher.py"]}, {"trial_info": ["roslaunch --wait social_sim_ros trial_info.launch prefix:=./data/metrics/<%=@settings['task']%> condition:=navstack"]}, {"scan": ["roslaunch --wait social_sim_ros depth_to_laserscan.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find social_sim_ros)/config/move.rviz"]}]}}]}
{"project_name": "petstore-kafka", "windows": [{"servers": {"layout": "even-vertical", "panes": [{"pets": "make dev-pets"}, {"adoptions": "make dev-adoptions"}, {"websocket": "make dev-websocket"}]}}, {"infra": {"layout": "even-vertical", "panes": [{"kafka": "make dev-kafka"}, {"gateway": "make dev-gateway"}, {"web-ui": "make dev-web-ui"}]}}]}
{"name": "simulation", "root": "./", "startup_window": "dbg", "pre_window": "export ARM_TYPE=j2n6s300", "windows": [{"roscore": {"layout": "even-vertical", "panes": ["roscore"]}}, {"kinova_bringup": {"layout": "even-vertical", "panes": ["sleep 3; roslaunch kinova_bringup kinova_robot.launch kinova_robotType:=$ARM_TYPE"]}}, {"arm_manager": {"layout": "even-vertical", "panes": ["sleep 5; roslaunch kinova_control_manager control_manager.launch"]}}, {"vision": {"layout": "even-vertical", "panes": ["sleep 8; roslaunch realsense2_camera rs_aligned_depth.launch", "sleep 9; rosrun mbzirc_husky brickDetector"]}}, {"home_arm": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/home_arm", "history -s rosservice call /kinova/arm_manager/soft_home_arm"]}}, {"prepare_gripping": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/prepare_gripping"]}}, {"align_arm": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/align_arm"]}}, {"pickup_brick": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/pickup_brick"]}}, {"goto": {"layout": "even-vertical", "panes": ["sleep 5; rostopic echo /kinova/arm_manager/status", "history -s rosservice call /kinova/arm_manager/goto \\\"pose: \\[0.0, 0.0, 0.0, 0.0, 0.0, 0.0\\]\\\""]}}, {"goto_relative": {"layout": "even-vertical", "panes": ["sleep 5; rostopic echo /kinova/arm_manager/status", "history -s rosservice call /kinova/arm_manager/goto_relative \\\"pose: \\[0.0, 0.0, 0.0, 0.0, 0.0, 0.0\\]\\\""]}}, {"cartesian_velocity": {"layout": "even-vertical", "panes": ["history -s rosservice call /kinova/arm_manager/set_velocity \\\"pose: \\[0.0, 0.0, 0.1\\]\\\""]}}, {"rviz": {"layout": "even-vertical", "panes": ["sleep 5; rviz"]}}]}
{"name": "tsconfig", "root": "./", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "pots", "root": "/home/jneidel/code/pots", "windows": [{"vim": "cd src; vim"}, {"zsh": {"layout": "70a3,192x43,0,0[192x12,0,0,92,192x30,0,13,100]", "panes": ["nwb", null]}}]}
{"name": "terraform-aws-s3-cloudfront-website", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "dev", "root": ".", "windows": [{"backend": ["source venv/bin/activate", "export FLASK_ENV=development", "gunicorn --worker-class eventlet -w 1 -b 0.0.0.0:5000 \"app:create_app()\""]}]}
{"name": "project", "root": ".", "windows": [{"local-dev": {"layout": "4da5,141x36,0,0[141x10,0,0{93x10,0,0,0,47x10,94,0,2},141x25,0,11{93x25,0,11,1,47x25,94,11,3}]", "panes": [{"client": ["cd client", "ng serve --disable-host-check"]}, {"proxy": ["cd proxy", "DEBUG=proxy:* npm start"]}, {"server": ["cd server", "export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/.ssh/presentation-firebase-auth-firebase-adminsdk.json\"", "DEBUG=server:* npm start"]}, {"ngrok": ["ngrok http -subdomain=<%= @args[0] %> 8080"]}]}}]}
{"name": "<%= ENV['PWD'].gsub('.', '@+') %>", "root": "./", "windows": [{"editor": {"layout": "086d,272x73,0,0{205x73,0,0,48,66x73,206,0[66x34,206,0,49,66x19,206,35,51,66x18,206,55,50]}", "panes": ["nvim -S", null, null]}}]}
{"name": "terraform-uptimerobot-monitor", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "refactoring", "root": "~/development/refactoring-introduction", "windows": [{"yarn": {"layout": "even-horizontal", "panes": ["yarn install", "git pull && yarn test"]}}]}
{"name": "elevation", "root": ".", "windows": [{"main": {"layout": "main-vertical", "panes": ["e .", "yarn run parcel index.html", "yarn run tsc -w", null]}}]}
{"name": "patternkit", "root": ".", "tmux_options": "-f ./.tmux.conf", "windows": [{"editor": {"layout": "6154,209x53,0,0[209x43,0,0,0,209x9,0,44{119x9,0,44,3,89x9,120,44,5}]", "panes": ["vim +'PlugInstall --sync' +qa . && vim .", "git status", "fin doctor"]}}, {"patternkit": "cd web/modules/contrib/patternkit; git status"}, {"patternfly": "cd web/themes/contrib/patternfly; git status"}, {"server": "sleep 15; fin project start -y; fin bash"}, {"logs": "sleep 15; until fin exec curl patternkit-env.docksal; do sleep 15; done; fin drush en -y dblog; fin exec watch -tc drush ws"}]}
{"name": "equipindustry-base", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "tapestry", "on_project_start": "lsof -t -i tcp:3000 | xargs kill -KILL && lsof -t -i tcp:3035 | xargs kill -KILL", "on_project_stop": "docker kill tapestry_db_1 && docker kill tapestry_redis_1", "windows": [{"db": "docker-compose -f docker/docker-compose.dev.yml -p tapestry up"}, {"console": "bin/rails c"}, {"server": {"layout": "main-vertical", "panes": ["env DISABLE_SPRING=1 bin/rails s", "npm start"]}}, {"worker": "bundle exec sidekiq"}, {"shell": null}]}
{"name": "python_project", "on_project_start": "poetry init --no-interaction", "windows": [{"build": {"layout": "even-horizontal", "panes": ["vim main.py", "find . | entr -c './build_and_run.sh'"]}}]}
{"name": "ansible-role-memcached", "root": "<%= ENV[\"PROJECTS\"] %>/ansible/roles/ansible-role-memcached", "on_project_start": "make environment", "on_project_exit": "make docker.down", "on_project_stop": "make docker.down", "pre_window": "pyenv activate ansible-role-memcached", "startup_window": "docker", "windows": [{"editor": {"layout": "even-horizontal", "panes": [{"editor": null}, {"pwd": null}, {"pwd": null}]}}, {"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"databases": {"layout": "main-vertical", "panes": [{"postgresql": null}, {"ls": null}]}}, {"aws": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "hadenlabs-terraform-uptimerobot-alert", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "cookiecutter-terraform-module", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "simulation", "root": "./", "startup_window": "hover_mode", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=f450; export ODOMETRY_TYPE=gps; export WORLD_FILE=./custom_configs/world.yaml; export SENSORS=\"garmin_down\"", "windows": [{"roscore": {"layout": "tiled", "panes": ["roscore"]}}, {"gazebo": {"layout": "tiled", "panes": ["waitForRos; roslaunch mrs_simulation simulation.launch world_name:=dunes_plane gui:=true"]}}, {"tf_connector": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch mrs_uav_odometry tf_connector.launch custom_config:=./custom_configs/tf_connector.yaml"]}}, {"rviz": {"layout": "tiled", "panes": ["waitForSimulation; rosrun rviz rviz -d ./custom_configs/rviz.rviz"]}}, {"status": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_status status.launch", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_status status.launch"]}}, {"spawn": {"layout": "even-vertical", "synchronize": "after", "panes": ["waitForSimulation; rosservice call /mrs_drone_spawner/spawn \"1 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos1.yaml --enable-uv-leds --uvled_s_l 0 --uvled_s_r 0 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 7;  rosservice call /mrs_drone_spawner/spawn \"2 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos2.yaml --enable-uv-leds --uvled_s_l 1 --uvled_s_r 1 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 15;  rosservice call /mrs_drone_spawner/spawn \"3 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos3.yaml --enable-uv-leds --uvled_s_l 2 --uvled_s_r 2 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 15;  rosservice call /mrs_drone_spawner/spawn \"4 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos4.yaml --enable-uv-leds --uvled_s_l 3 --uvled_s_r 3 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\"", "waitForSimulation; sleep 15;  rosservice call /mrs_drone_spawner/spawn \"5 $UAV_TYPE --enable-rangefinder --enable-ground-truth --pos_file `pwd`/pos5.yaml --enable-uv-leds --uvled_s_l 4 --uvled_s_r 4 --enable-uv-camera --uvcam-calib-file `rospack find uvdar_core`/include/OCamCalib/config/calib_results_bf_uv_fe.txt\""]}}, {"control": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_general core.launch config_constraint_manager:=./custom_configs/constraint_manager.yaml config_control_manager:=./custom_configs/control_manager.yaml config_mpc_tracker:=./custom_configs/mpc_tracker.yaml config_odometry:=./custom_configs/odometry.yaml config_uav_manager:=./custom_configs/uav_manager.yaml"]}}, {"automatic_start": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav2; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav3; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav4; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch", "export UAV_NAME=uav5; waitForSimulation; roslaunch mrs_uav_general automatic_start.launch"]}}, {"command_sender": {"layout": "tiled", "panes": ["waitForSimulation; roslaunch flocking command_sender.launch"]}}, {"hover_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 0\\\""]}}, {"swarming_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 1\\\""]}}, {"emergency_mode": {"layout": "tiled", "panes": ["history -s rosservice call /command_sender/send_command \\\"value: 2\\\""]}}, {"takeoff": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav2; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav3; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav4; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard", "export UAV_NAME=uav5; waitForControl; rosservice call /$UAV_NAME/mavros/cmd/arming 1; sleep 0.1; rosservice call /$UAV_NAME/mavros/set_mode 0 offboard"]}}, {"uv_observer": {"layout": "tiled", "synchronize": "after", "panes": ["waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav4; waitForControl; roslaunch uvdar_core new_signaling.launch", "waitForCompile; gz world --pause=0; sleep 6;  export UAV_NAME=uav5; waitForControl; roslaunch uvdar_core new_signaling.launch"]}}, {"kalman_filter": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav2; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav3; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav4; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin", "export UAV_NAME=uav5; waitForControl; roslaunch uvdar_core uvdar_kalman_identified.launch output_frame:=$UAV_NAME/stable_origin"]}}, {"slow_down": {"layout": "even-vertical", "panes": ["waitForSimulation; waitForRos; sleep 15; gz physics -u 50"]}}, {"sensor_neighbor": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav4; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml", "export UAV_NAME=uav5; waitForOdometry; roslaunch flocking sensor_neighbor.launch config_sensor:=./custom_configs/sensor.yaml"]}}, {"formation": {"layout": "tiled", "synchronize": "after", "panes": ["export UAV_NAME=uav1; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav2; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav3; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav4; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml", "export UAV_NAME=uav5; waitForOdometry; roslaunch flocking formation.launch config_flocking:=./custom_configs/flocking/modified.yaml"]}}, {"neighbors_topic": {"layout": "tiled", "synchronize": "after", "panes": ["waitForRos; rostopic echo /uav1/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav2/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav3/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav4/sensor_neighbor/neighbors", "waitForRos; rostopic echo /uav5/sensor_neighbor/neighbors"]}}, {"uvdar_uav1": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav1/uvdar/filteredPoses"]}}, {"uvdar_uav2": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav2/uvdar/filteredPoses"]}}, {"uvdar_uav3": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav3/uvdar/filteredPoses"]}}, {"uvdar_uav4": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav4/uvdar/filteredPoses"]}}, {"uvdar_uav5": {"layout": "tiled", "panes": ["waitForRos; rostopic echo /uav5/uvdar/filteredPoses"]}}]}
{"name": "watch_tests", "root": ".", "tmux_options": "-f ../.tmux.conf", "startup_window": "watch_tests", "windows": [{"watch_tests": {"layout": "main-vertical", "panes": ["make watch-test-pytest", "make watch-test-mypy", "make watch-test-black"]}}]}
{"name": "iot-air-pollution", "root": "./", "on_project_start": "make environment", "startup_window": "docker", "windows": [{"python": {"layout": "main-vertical", "panes": [{"ipython": null}]}}, {"cloud": {"layout": "main-vertical", "panes": [{"cloud": null}, {"databases": null}]}}, {"docker": {"layout": "main-vertical", "panes": [{"webserver": null}, {"databases": null}]}}]}
{"name": "kinova", "root": "./", "startup_window": "kortex_control_manager", "pre_window": "export UAV_NAME=uav1; export RUN_TYPE=simulation; export UAV_TYPE=t650; export WORLD_NAME=simulation", "windows": [{"roscore": {"layout": "even-vertical", "panes": ["roscore"]}}, {"arm_drivers": {"layout": "even-vertical", "panes": ["sleep 2; roslaunch kortex_driver kortex_driver.launch start_moveit:=true start_rviz:=false", "sleep 3; roslaunch iiwa_moveit_pouring moveit_action.launch"]}}, {"kortex_control_manager": {"layout": "even-vertical", "panes": ["sleep 4; roslaunch kortex_control_manager control_manager.launch", "sleep 6; rostopic echo /kinova/arm_manager/status", "history -s rosservice call /kinova/arm_manager/"]}}]}
{"name": "p3dx_teleop", "root": "~/sim_ws", "windows": [{"dev_abuse": {"layout": "tiled", "panes": [{"shell": null}, {"core": ["roscore"]}, {"joy": ["roslaunch --wait social_sim_teleop ps3_teleop_p3dx.launch"]}, {"p2os": ["roslaunch --wait social_sim_ros p2os_driver.launch"]}, {"zed": ["roslaunch zed_wrapper zed.launch"]}, {"sick_laser": ["roslaunch --wait sick_scan p3dx_lms100.launch"]}, {"rviz": ["rosrun rviz rviz -d $(rospack find img_p3dx)/rviz/p3dx.rviz"]}, {"description": ["roslaunch --wait p2os_urdf pioneer3dx_urdf.launch"]}, {"map_publisher": ["rosrun map_server map_server $(rospack find img_p3dx)/maps/lab2.map.yaml"]}, {"amcl": ["roslaunch --wait img_p3dx p3dx_amcl.launch"]}]}}]}
{"name": "plastenik", "root": "~/", "windows": [{"devices": {"layout": "even-horizontal", "synchronize": "after", "panes": [{"ACM0": ["cd ~/mu_interface/Sensor", "python3 main.py --port /dev/ttyACM0"]}, {"ACM1": ["cd ~/mu_interface/Sensor", "python3 main.py --port /dev/ttyACM1"]}, {"ACM2": ["cd ~/mu_interface/Sensor", "python3 main.py --port /dev/ttyACM2"]}]}}]}
{"name": "elevator_starter", "root": "~/NTNU/sanntid/sanntid_lab", "attach": true, "windows": [{"elevators": {"layout": "tiled", "panes": ["./sim/SimElevatorServer --port 15657", "./sim/SimElevatorServer --port 15658"]}}]}
{"name": "mrt-scraper", "windows": [{"logs": {"name": "dev", "panes": ["mv log log-old && echo \"\" > log && tail -f log"]}}, {"santolan-anapolis": {"name": "dev", "panes": ["ruby mrt-scraper.rb -s santolan-anapolis"]}}, {"shaw-boulevard": {"name": "server", "panes": ["ruby mrt-scraper.rb -s shaw-boulevard"]}}]}
{"name": "hw", "root": "./", "windows": [{"hw": {"root": "./", "panes": ["./run.sh \"newlc1\" 2>&1 | tee hw1.log", "./run.sh \"newlc2\" 2>&1 | tee hw2.log"]}}]}
{"name": "test_framework", "root": "/home/artur/Playground/test_framework/", "on_project_exit": "home/artur/Playground/test_framework/cardano-node-tests/scripts/destination/dir/stop-cluster-hfc", "on_project_stop": "home/artur/Playground/test_framework/cardano-node-tests/scripts/destination/dir/stop-cluster-hfc", "windows": [{"editor": {"layout": "tiled", "panes": [{"node": ["if [ -d \"cardano-node-tests\" ]; then echo \"Repository already exists.\"; else git clone git@github.com:input-output-hk/cardano-node-tests.git; fi", "cd cardano-node-tests", "git checkout master", "git pull", "python3 -m venv .env", ". .env/bin/activate", "make install", "cd ..", "if [ -d \"cardano-node\" ]; then echo \"Repository already exists.\"; else git clone git@github.com:input-output-hk/cardano-node.git; fi", "cd cardano-node", "git fetch --all --tags", "git checkout tags/1.35.3-configs", "nix-shell -A devops", "cd ../cardano-node-tests", "rm -rf /scripts/destination", ". .env/bin/activate", "export PGHOST=localhost PGPORT=5434 PGUSER=postgres_dbsync", "export CARDANO_NODE_SOCKET_PATH=/home/artur/Playground/test_framework/cardano-node/state-cluster0/bft1.socket", "export DEV_CLUSTER_RUNNING=1", "./scripts/postgres-start.sh \"/home/artur/Playground/test_framework/postgres-qa\" -k", "prepare-cluster-scripts -d scripts/destination/dir -s cardano_node_tests/cluster_scripts/babbage", "export DBSYNC_REPO=\"/home/artur/Playground/blockchain_networks/Base_Projects/cardano-db-sync\"", "scripts/destination/dir/start-cluster-hfc", "export PYTHONPATH=\"$(echo $VIRTUAL_ENV/lib/python3*/site-packages)\":$PYTHONPATH", "./check_env.sh"]}, {"db-sync and smash": ["cd cardano-node-tests", "echo  \"psql -h /home/artur/Playground/test_framework/postgres-qa -U postgres_dbsync -e dbsync0 -p 5434\"", "echo \"Run pytest cardano_node_tests/tests/test_transactions.py -k 'test_transfer_funds'\""]}]}}]}
{"name": "meltano", "root": "<%= ENV[\"MELTANO_ROOT\"] || '.' %>", "pre_window": "source <%= ENV[\"MELTANO_VENV\"] || \".venv\" %>/bin/activate", "startup_window": "shell", "windows": [{"services": {"layout": "main-vertical", "panes": ["docker-compose up warehouse_db", "python -m meltano.api", "cd src/webapp; yarn && yarn serve"]}}, {"shell": {"layout": "main-vertical", "panes": ["clear"]}}, {"logs": {"layout": "main-vertical", "panes": ["tail -f meltano.log", "less +G meltano.yml"]}}]}
{"name": "meltano", "root": "<%= ENV[\"MELTANO_ROOT\"] || '.' %>", "pre_window": "source <%= ENV[\"MELTANO_VENV\"] || \".venv\" %>/bin/activate", "startup_window": "shell", "windows": [{"services": {"layout": "main-vertical", "panes": ["docker-compose up warehouse_db", "python -m meltano.api", "cd src/webapp; yarn && yarn serve"]}}, {"shell": {"layout": "main-vertical", "panes": ["clear"]}}, {"logs": {"layout": "main-vertical", "panes": ["tail -f meltano.log", "less +G meltano.yml"]}}]}
{"name": "meltano", "root": "<%= ENV[\"MELTANO_ROOT\"] || '.' %>", "pre_window": "source <%= ENV[\"MELTANO_VENV\"] || \".venv\" %>/bin/activate", "startup_window": "shell", "windows": [{"services": {"layout": "main-vertical", "panes": ["docker-compose up warehouse_db", "python -m meltano.api", "cd src/webapp; yarn && yarn serve"]}}, {"shell": {"layout": "main-vertical", "panes": ["clear"]}}, {"logs": {"layout": "main-vertical", "panes": ["tail -f meltano.log", "less +G meltano.yml"]}}]}
{"name": "meltano", "root": "<%= ENV[\"MELTANO_ROOT\"] || '.' %>", "pre_window": "source <%= ENV[\"MELTANO_VENV\"] || \".venv\" %>/bin/activate", "startup_window": "shell", "windows": [{"services": {"layout": "main-vertical", "panes": ["docker-compose up warehouse_db", "python -m meltano.api", "cd src/webapp; yarn && yarn serve"]}}, {"shell": {"layout": "main-vertical", "panes": ["clear"]}}, {"logs": {"layout": "main-vertical", "panes": ["tail -f meltano.log", "less +G meltano.yml"]}}]}
{"name": "cpp_project", "on_project_start": "cmake -Bbuild && cmake --build build", "windows": [{"build": {"layout": "even-horizontal", "panes": ["vim main.cpp", "find . | entr -c './build_and_run.sh'"]}}]}
{"project_name": "petstore-kafka", "windows": [{"servers": {"layout": "even-vertical", "panes": [{"pets": "make dev-pets"}, {"adoptions": "make dev-adoptions"}, {"websocket": "make dev-websocket"}]}}, {"infra": {"layout": "even-vertical", "panes": [{"kafka": "make dev-kafka"}, {"gateway": "make dev-gateway"}, {"web-ui": "make dev-web-ui"}]}}]}
