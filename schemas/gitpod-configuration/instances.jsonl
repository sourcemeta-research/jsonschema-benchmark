{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 27017, "onOpen": "ignore"}, {"port": 8000, "onOpen": "notify", "visibility": "public"}, {"port": 9228, "onOpen": "ignore"}, {"port": 3000, "onOpen": "ignore", "visibility": "public"}, {"port": 9229, "onOpen": "ignore"}, {"port": 9230, "onOpen": "ignore"}, {"port": 3200, "visibility": "public"}, {"port": 3300, "visibility": "public"}], "tasks": [{"before": "echo '\nexport COOKIE_DOMAIN=gitpod.io\nexport HOME_LOCATION=$(gp url 8000)\nexport API_LOCATION=$(gp url 3000)\nexport CYPRESS_BASE_URL=$(gp url 8000)\nexport REACT_APP_CHALLENGE_EDITOR_API_LOCATION=$(gp url 3200)\nexport CHALLENGE_EDITOR_CLIENT_LOCATION=$(gp url 3300)\n' >> ~/.bashrc;\nexit;\n"}, {"name": "db", "before": "mkdir -p /workspace/data && (mongod --dbpath /workspace/data &)\n"}, {"name": "server", "before": "export COOKIE_DOMAIN=gitpod.io && export HOME_LOCATION=$(gp url 8000) && export API_LOCATION=$(gp url 3000) && export CYPRESS_BASE_URL=$(gp url 8000)", "init": "cp sample.env .env && pnpm install && gp sync-done pnpm-install && pnpm run build:curriculum && gp ports await 27017\n", "command": "pnpm run seed && mongosh --eval \"db.fsyncLock(); db.fsyncUnlock()\" && gp ports await 27017 && pnpm run develop:server\n"}, {"name": "client", "before": "export HOME_LOCATION=$(gp url 8000) && export API_LOCATION=$(gp url 3000) && export CYPRESS_BASE_URL=$(gp url 8000)", "init": "cd ./client && gp sync-await pnpm-install && cd ..\n", "command": "gp ports await 3000 && pnpm run develop:client -- -H '0.0.0.0'\n", "openMode": "split-right"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": true, "addBadge": false, "addLabel": false}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "esbenp.prettier-vscode"]}}
{"tasks": [{"init": "./configure && timeout 50m make -j16 || true"}, {"init": "pnpm i -g node-core-utils"}], "github": {"prebuilds": {"pullRequests": false, "addCheck": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "mvn dependency:resolve\nmvn compile\n"}], "vscode": {"extensions": ["xaver.clang-format"]}}
{"tasks": [{"command": "./gradlew build"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"name": "Bootstrap", "init": "./bootstrap.sh --core"}]}
{"tasks": [{"command": "npm install"}]}
{"tasks": [{"init": "git clone https://github.com/algorithm-visualizer/server.git && cd server && npm install && echo -e \"GITHUB_CLIENT_ID=dummy\\nGITHUB_CLIENT_SECRET=dummy\\nAWS_ACCESS_KEY_ID=dummy\\nAWS_SECRET_ACCESS_KEY=dummy\" > .env.local && cd ..\n", "command": "cd server && npm run watch"}, {"init": "npm install && echo 'DANGEROUSLY_DISABLE_HOST_CHECK=true' > .env.local\n", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "notify"}, {"port": 8080, "onOpen": "ignore"}]}
{"image": "ubuntu:latest", "tasks": [{"before": "echo \"...\"", "init": "cargo install rustup-toolchain-install-master\n./miri toolchain\n./miri build\n", "command": "echo \"Run tests with ./miri test\""}]}
{"image": {"file": "Dockerfile"}, "tasks": [{"name": "Prepare development environment", "init": "mkdir -p .vscode\ncp gitpod/settings.json .vscode/settings.json\ngit fetch --tags\npython -m pip install -ve . --no-build-isolation --config-settings editable-verbose=true\npre-commit install\n", "command": "python -m pip install -ve . --no-build-isolation --config-settings editable-verbose=true\necho \"\u2728 Pre-build complete! You can close this terminal \u2728 \"\n"}], "ports": [{"port": 5500, "onOpen": "notify"}], "vscode": {"extensions": ["ms-python.python", "yzhang.markdown-all-in-one", "eamodio.gitlens", "lextudio.restructuredtext", "ritwickdey.liveserver"]}, "github": {"prebuilds": {"main": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}}
{"tasks": [{"init": "npm install && npm run build\n", "command": "npm run watch"}, {"init": "cd ../ && git clone https://github.com/photonstorm/phaser3-examples.git && cd phaser3-examples && npm install && npm start\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"image": {"file": "./scripts/gitpod/.gitpod.Dockerfile"}, "tasks": [{"name": "Supervisor (VNC and noVNC)", "command": "/usr/bin/supervisord --configuration /etc/supervisord.conf &"}, {"name": "Set cache path and warm it up", "init": "echo \"build --repository_cache=/workspace/.cache/bazel-repo\" >> /workspace/selenium/.bazelrc.local\necho \"test --repository_cache=/workspace/.cache/bazel-repo\" >> /workspace/selenium/.bazelrc.local\necho \"build --disk_cache=/workspace/.cache/bazel-disk\" >> /workspace/selenium/.bazelrc.local\necho \"test --disk_cache=/workspace/.cache/bazel-disk\" >> /workspace/selenium/.bazelrc.local\necho \"build --jobs=10\" >> /workspace/selenium/.bazelrc.local\necho \"test --jobs=10\" >> /workspace/selenium/.bazelrc.local\nbazel build grid\n"}], "ports": [{"name": "VNC", "description": "Port where VNC server is listening", "port": 5900, "onOpen": "ignore"}, {"name": "XVFB", "description": "Port where XVFB server is listening", "port": 6099, "onOpen": "ignore"}, {"name": "noVNC", "description": "Port where the noVNC view is available", "port": 7900, "onOpen": "notify"}, {"name": "Build and test ports", "description": "Other ports opened while building or testing", "port": "8000-65535", "onOpen": "ignore"}]}
{"tasks": [{"init": "npx pnpm install\nnpx pnpm build:stub\n", "command": "npx pnpm play"}], "ports": [{"port": 3000, "onOpen": "open-preview", "visibility": "public"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}}
{"tasks": [{"init": "make bootstrap", "command": "make watch"}, {"openMode": "split-right", "command": "clear && echo '\nWelcome to Gitpod!\n\nIf you haven'\\''t forked Babel yet and you want to prepare a PR, you can use\nthe Ctrl+P (or \u2318P) shortcut, type `>Fork` and press ENTER: Gitpod\\ will\ncreate the fork for you.\n\n<-- The other terminal is building Babel. It should automatically rebuild\n    when you change a file, so you don'\\''t need to worry about it.\n    If it'\\''s still building, please wait until it'\\''s finished!\n\nIf you want to run the tests, you can run `yarn jest` in this terminal,\nor filter by package name (for example, `yarn jest babel-parser`).\n'"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.1.5:9Wg0Glx/TwD8ElFBg+FKcQ==", "esbenp.prettier-vscode@5.0.0:qca7d0cHbKkrkb5rvNlpcg=="]}}
{"tasks": [{"init": "mvn install -DskipTests=true"}], "vscode": {"extensions": ["vscjava.vscode-maven@0.21.0:37ZOg7jK2M04yXsE+ItbZg==", "GabrielBB.vscode-lombok@1.0.0:fYRHVd+UkrccCfjaRz7jKw=="]}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run watch"}]}
{"tasks": [{"init": "./scripts/ci/install_breeze.sh"}, {"name": "Install pre-commit", "openMode": "split-right", "command": "printf '%s\\n' \"export PIP_USER=no\" >> \"$HOME/.bashrc\"\nsource \"$HOME/.bashrc\"\npip install pre-commit\npre-commit install\necho \"for running integration test with breeze\"\n"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "pnpm install && pnpm run build", "command": "pnpm run start"}]}
{"tasks": [{"init": "brew install hyperfine\nyarn\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "vscode": {"extensions": ["esbenp.prettier-vscode", "dbaeumer.vscode-eslint", "editorconfig.editorconfig", "streetsidesoftware.code-spell-checker"]}}
{"tasks": [{"init": "mvn -am -pl war,bom -P quick-build clean install\n", "command": "mvn -pl war jetty:run -Dhost=0.0.0.0\n", "name": "Run"}, {"command": "gp ports await 8080 && gp url 8080 && gp preview $(gp url 8080)/jenkins/", "name": "Preview"}], "github": {"prebuilds": {"pullRequestsFromForks": true, "addBadge": true}}, "jetbrains": {"intellij": {"plugins": ["Stapler plugin for IntelliJ IDEA"], "prebuilds": {"version": "stable"}}}, "vscode": {"extensions": ["vscjava.vscode-java-pack"]}, "image": {"file": ".gitpod/Dockerfile"}}
{"tasks": [{"name": "Setup", "init": "cp -r contrib/ide/vscode .vscode\nmake deps\nmake build\n", "command": "gp sync-done setup\nexit 0\n"}, {"name": "Run backend", "command": "gp sync-await setup\nif [ ! -f custom/conf/app.ini ]\nthen\n  mkdir -p custom/conf/\n  echo -e \"[server]\\nROOT_URL=$(gp url 3000)/\" > custom/conf/app.ini\n  echo -e \"\\n[database]\\nDB_TYPE = sqlite3\\nPATH = $GITPOD_REPO_ROOT/data/gitea.db\" >> custom/conf/app.ini\nfi\nexport TAGS=\"sqlite sqlite_unlock_notify\"\nmake watch-backend\n"}, {"name": "Run frontend", "command": "gp sync-await setup\nmake watch-frontend\n", "openMode": "split-right"}], "vscode": {"extensions": ["editorconfig.editorconfig", "dbaeumer.vscode-eslint", "golang.go", "stylelint.vscode-stylelint", "DavidAnson.vscode-markdownlint", "Vue.volar", "ms-azuretools.vscode-docker", "zixuanchen.vitest-explorer", "qwtel.sqlite-viewer", "GitHub.vscode-pull-request-github"]}, "ports": [{"name": "Gitea", "port": 3000}]}
{"ports": [{"port": 8001, "onOpen": "open-preview"}], "tasks": [{"before": "export DEV_HOST=$(gp url 8001)\n", "init": "npm install", "command": "npm start"}]}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn gulp fastBuild && printf \"\\nWelcome to Learn Git Branching\\nTo rebuild the app, simply run 'yarn gulp fastBuild' and reload index.html.\\n\\n\" && python3 -m http.server 8000 2>/dev/null\n"}]}
{"tasks": [{"name": "Build & Watch", "init": "npm install", "command": "npm run build -- -w -f"}, {"name": "Node", "init": "npm install", "command": "npm start node -- --no-watch"}, {"name": "Next.js", "init": "npm install", "command": "npm start next -- --no-watch"}, {"name": "Vanilla", "init": "npm install", "command": "npm start vanilla -- --no-watch"}]}
{"ports": [{"port": 8080, "onOpen": "open-browser"}], "tasks": [{"name": "Docs", "init": "make build", "command": "make run"}, {"name": "Notice", "command": "clear\necho \"Once the docs server is running, go to the following URL to view the docs:\n\n$(gp url 8080)\"\n", "openMode": "split-right"}]}
{"tasks": [{"before": "npm install && npm i gulp -g", "command": "gulp"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build:packages", "command": "pnpm dev"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "editorconfig.editorconfig", "esbenp.prettier-vscode", "vue.volar", "vue.vscode-typescript-vue-plugin"]}}
{"image": {"file": "Dockerfile"}, "tasks": [{"command": "mkdir --parents build && cd build && cmake .. && make && ./tinyrenderer ../obj/diablo3_pose/diablo3_pose.obj ../obj/floor.obj && convert framebuffer.tga framebuffer.png && open framebuffer.png && cd ..\n"}]}
{"tasks": [{"init": "make install", "command": "make run"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"image": {"file": ".github/dockerfiles/Dockerfile.ubuntu-base", "context": ".github"}, "vscode": {"extensions": ["ms-vscode.cpptools", "erlang-ls.erlang-ls"]}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run watch"}]}
{"mainConfiguration": "https://github.com/mattermost/mattermost-gitpod-config"}
{"image": {"file": "docker/gitpod/Dockerfile"}, "ports": [{"port": 3449, "onOpen": "open-preview"}, {"port": 3447, "onOpen": "ignore", "visibility": "private"}, {"port": 3448, "onOpen": "ignore", "visibility": "private"}, {"port": 6060, "onOpen": "ignore"}, {"port": 9630, "onOpen": "ignore", "visibility": "private"}, {"port": 6061, "onOpen": "ignore"}, {"port": 8025, "onOpen": "ignore"}, {"port": 1025, "onOpen": "ignore"}, {"port": 5432, "onOpen": "ignore"}, {"port": 6379, "onOpen": "ignore"}, {"port": 389, "onOpen": "ignore"}], "tasks": [{"name": "gulp", "command": "cd $GITPOD_REPO_ROOT/frontend/; yarn && gp sync-done 'frontend-yarn'; npx gulp --theme=${PENPOT_THEME} watch\n"}, {"name": "frontend shadow watch", "command": "cd $GITPOD_REPO_ROOT/frontend/; gp sync-await 'frontend-yarn'; npx shadow-cljs watch main\n"}, {"init": "gp await-port 5432 && psql -f $GITPOD_REPO_ROOT/docker/gitpod/files/postgresql_init.sql", "name": "backend", "command": "cd $GITPOD_REPO_ROOT/backend/; ./scripts/start-dev\n"}, {"name": "exporter shadow watch", "command": "cd $GITPOD_REPO_ROOT/exporter/; gp sync-await 'frontend-yarn'; yarn && npx shadow-cljs watch main"}, {"name": "exporter web server", "command": "cd $GITPOD_REPO_ROOT/exporter/; ./scripts/wait-and-start.sh\n"}, {"name": "signed terminal", "before": "[[ ! -z ${GNUGPG}  ]] && cd ~ && rm -rf .gnupg && echo ${GNUGPG} | base64 -d | tar --no-same-owner -xzvf -\n", "init": "[[ ! -z ${GNUGPG_KEY}  ]] && git config --global commit.gpgsign true && git config --global user.signingkey ${GNUGPG_KEY}\n", "command": "cd $GITPOD_REPO_ROOT"}, {"name": "redis", "command": "redis-server"}, {"before": "go get github.com/mailhog/MailHog", "name": "mailhog", "command": "MailHog"}, {"name": "Nginx", "command": "nginx && multitail /var/log/nginx/access.log -I /var/log/nginx/error.log\n"}]}
{"tasks": [{"init": "pnpm i", "command": "pnpm dev"}]}
{"ports": [{"port": 8008, "onOpen": "open-preview"}], "tasks": [{"init": "pip install -r requirements.txt && cp env.py.example env.py", "command": "python main.py -t"}]}
{"tasks": [{"init": "./mvnw package -DskipTests"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-pack"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "npm_config_yes=true pnpm setup:project && gp sync-done setup", "command": "mkdir -p /workspace/data && mongod --dbpath /workspace/data"}, {"init": "gp sync-await setup", "command": "redis-server"}, {"name": "Shared Library", "init": "gp sync-await setup", "command": "cd libs/shared && pnpm start"}, {"name": "DAL", "init": "gp sync-await setup", "command": "cd libs/dal && pnpm start"}, {"name": "TESTING LIB", "init": "gp sync-await setup", "command": "cd libs/testing && pnpm start"}, {"name": "API", "init": "gp sync-await setup", "command": "cd apps/api && pnpm start"}, {"name": "WS", "init": "gp sync-await setup", "command": "cd apps/ws && pnpm start"}, {"name": "WEB", "init": "gp sync-await setup", "command": "cd apps/web\nAPI_URL=`gp url 3000`\nWS_URL=`gp url 3002`\nsed -i \"/REACT_APP_API_URL=/c\\REACT_APP_API_URL=$API_URL\" .env\necho \"REACT_APP_WS_URL=$WS_URL\" >> .env\npnpm envsetup && pnpm start\n"}, {"name": "WIDGET", "init": "gp sync-await setup", "command": "cd apps/widget\nAPI_URL=`gp url 3000`\nWS_URL=`gp url 3002`\nsed -i \"/REACT_APP_API_URL=/c\\REACT_APP_API_URL=$API_URL\" .env\nsed -i \"/REACT_APP_WS_URL=/c\\REACT_APP_WS_URL=$WS_URL\" .env\npnpm envsetup && pnpm start:dev\n"}], "ports": [{"port": 4200, "onOpen": "open-preview", "visibility": "public"}, {"port": 4500, "onOpen": "notify", "visibility": "public"}, {"port": 3000, "onOpen": "notify", "visibility": "public"}, {"port": 3002, "onOpen": "notify", "visibility": "public"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true, "addComment": true}}}
{"github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}, "tasks": [{"name": "setup", "init": "pushd /workspace\nwget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\npopd\n# bootstrap activation commands for other tasks to reuse\ncat <<EOT > /workspace/bin/activate-env.sh\nexport MAMBA_ROOT_PREFIX=/workspace/.micromamba\nexport MAMBA_EXE=/workspace/bin/micromamba\n$(/workspace/bin/micromamba shell hook --shell=bash)\nexport JUPYTER_PREFER_ENV_PATH=1\nmicromamba activate\nEOT\nsource /workspace/bin/activate-env.sh\nmicromamba install -n base -y -c conda-forge python=3.11 nodejs=18\nsource /workspace/bin/activate-env.sh\npython -m pip install -e \".[dev,test]\" && jlpm run build && jlpm develop\ngp sync-done setup\n", "command": "gp sync-done setup\nsource /workspace/bin/activate-env.sh\njupyter notebook --no-browser --ServerApp.token='' --ServerApp.allow_remote_access=True\n"}, {"name": "auto-activate", "command": "gp sync-await setup\nsource /workspace/bin/activate-env.sh\njlpm watch\n"}, {"name": "shell", "command": "gp sync-await setup\necho \"source /workspace/bin/activate-env.sh\" >> ~/.bashrc\nsource /workspace/bin/activate-env.sh\n"}, {"name": "docs", "command": "gp sync-await setup\nsudo apt-get update\nsudo apt install enchant-2 -y\nwget https://github.com/jgm/pandoc/releases/download/2.14.2/pandoc-2.14.2-1-amd64.deb -O /tmp/pandoc.deb && sudo dpkg -i /tmp/pandoc.deb\nsource /workspace/bin/activate-env.sh\nhatch run docs:build\nhatch run docs:serve\n"}], "ports": [{"port": 8888}]}
{"tasks": [{"init": "./mvnw package -DskipTests"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-pack", "lextudio.restructuredtext"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false}}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"init": "./mvnw -Dquickly"}, {"name": "Quarkus command", "openMode": "split-right"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-dependency", "vscjava.vscode-java-debug", "vscjava.vscode-java-pack"]}}
{"ports": [{"port": 3000, "onOpen": "ignore", "visibility": "public"}, {"port": 8888, "onOpen": "ignore", "visibility": "public"}], "tasks": [{"name": "SDK", "command": "npm i\nnpm run build --workspace amis --workspace amis-ui\nnpx -y serve packages/amis/\n"}, {"name": "Amis", "command": "gp await-port 3000\nnpm run start\n"}]}
{"tasks": [{"init": "./mvnw package -DskipTests"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-pack", "lextudio.restructuredtext"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false}}}
{"tasks": [{"init": "test -f go.mod && go get -v ./...; wget https://github.com/prometheus/prometheus/releases/download/v2.22.2/prometheus-2.22.2.linux-amd64.tar.gz --directory-prefix=/tmp; cd /tmp && tar xvfz prometheus-*.tar.gz && rm prometheus-*.tar.gz; mv prometheus-*/prometheus /workspace/go/bin/; wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh && chmod u+x ./wait-for-it.sh && cd /workspace/thanos/scripts && mv /tmp/wait-for-it.sh .; ./quickstart.sh; for i in {0..2};do ./wait-for-it.sh -q localhost:909\"$i\" --  && echo \"Prometheus instance no.$((i+1)) localhost:909$i is up\"; done; ./wait-for-it.sh localhost:10914 --  && echo \"Thanos frontend at localhost:10914 is up\";\n"}], "ports": [{"port": 10914, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"before": "mkdir -p /workspace/opt-pulumi && sudo ln -s /workspace/opt-pulumi $HOME/.pulumi-dev\n", "init": "make ensure && make install\n", "command": "pulumi version"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}}
{"tasks": [{"init": "sudo apt-get install libncurses5 libncursesw5 libtinfo5\nsudo apt-get install libcurl4-openssl-dev\n"}, {"command": "./gradlew assemble"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"image": "ghcr.io/pymc-devs/pymc-devcontainer:latest", "tasks": [{"name": "initialize", "init": "# General devcontainer initialization, e.g. pre-commit\n_dev-init.sh\n\n# Create an empty object for .vscode/settings.json if the file doesn't exist\nmkdir -p .vscode\n[ -f .vscode/settings.json ] || echo \"{}\" > .vscode/settings.json\n\n# Add vscode settings\njq '\n      .[\"python.defaultInterpreterPath\"] = \"/opt/conda/bin/python\"\n' .vscode/settings.json | sponge .vscode/settings.json\njq '\n      .[\"terminal.integrated.defaultProfile.linux\"] = \"bash\"\n' .vscode/settings.json | sponge .vscode/settings.json\njq '\n      .[\"git.autofetch\"] = true\n' .vscode/settings.json | sponge .vscode/settings.json\n\n# Install dependencies\nsudo chown \"$(id -u):$(id -g)\" /opt/conda/conda-meta/history\n(micromamba install --yes --name base --file conda-envs/environment-dev.yml; pip install -e .) &> /tmp/install-init.log &\n", "command": "# Reinitialize devcontainer for good measure\n_dev-init.sh\n\n# Install the pre-commit hooks in the background if not already installed\npre-commit install --install-hooks &> /tmp/pre-commit-init-output.log &\n"}], "vscode": {"extensions": ["eamodio.gitlens", "ms-python.python", "ms-pyright.pyright", "donjayamanne.githistory"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false, "addLabel": false}}}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 3001, "onOpen": "ignore"}], "vscode": {"extensions": ["syler.sass-indented@1.6.7:gAbIL/5IWvH0xYAbwe0Vag=="]}}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn", "command": "yarn dev:web"}]}
{"tasks": [{"init": "pip install -r ./requirements.txt", "command": "mkdocs serve"}]}
{"tasks": [{"name": "Run Script to Comment ut required lines", "init": "cd ./.scripts\nsh commentLinesForSetup.sh\n"}, {"name": "Run Docker Images", "init": "cd ./deploy\nsudo docker-compose -f docker/clickhouse-setup/docker-compose.yaml up -d\n"}, {"name": "Run Frontend", "init": "cd ./frontend\nyarn install\n", "command": "yarn dev"}], "ports": [{"port": 3301, "onOpen": "open-browser"}, {"port": 8080, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 8123, "onOpen": "ignore"}, {"port": 8089, "onOpen": "ignore"}, {"port": 9093, "onOpen": "ignore"}]}
{"image": "eu.gcr.io/gitpod-core-dev/dev/dev-environment:at-node-18-17-1-gha.15610", "workspaceLocation": "gitpod/gitpod-ws.code-workspace", "checkoutLocation": "gitpod", "ports": [{"port": 1337, "onOpen": "open-preview"}, {"port": 3000, "onOpen": "ignore"}, {"port": 3001, "onOpen": "ignore"}, {"port": 3306, "onOpen": "ignore"}, {"port": 4000, "onOpen": "ignore"}, {"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "ignore"}, {"port": 7777, "onOpen": "ignore"}, {"port": 9229, "onOpen": "ignore"}, {"port": 9999, "onOpen": "ignore"}, {"port": 13001, "onOpen": "ignore"}, {"port": 13444}, {"port": 8022, "onOpen": "ignore"}], "tasks": [{"name": "Remove GCP_ADC_FILE", "command": "if [[ -n \"${GCP_ADC_FILE}\" ]]; then\n  echo \"$GCP_ADC_FILE\" > \"/home/gitpod/.config/gcloud/application_default_credentials.json\"\n  yes | gcloud auth application-default revoke\n  gp env -u GCP_ADC_FILE\nfi\nexit 0\n"}, {"name": "Preview environment configuration", "init": "leeway run dev/preview/previewctl:install", "command": "INSTALL_CONTEXT=true leeway run dev/preview:configure-workspace"}, {"name": "Installer dependencies", "init": "(cd install/installer && make deps)\nexit 0\n"}, {"name": "Java", "command": "if [ -z \"$RUN_GRADLE_TASK\" ]; then\n  read -r -p \"Press enter to continue Java gradle task\"\nfi\nleeway exec --package components/supervisor-api/java:lib --package components/gitpod-protocol/java:lib -- ./gradlew build\nleeway exec --package components/ide/jetbrains/backend-plugin:plugin-latest --package components/ide/jetbrains/gateway-plugin:publish-latest --parallel -- ./gradlew buildPlugin\n"}, {"name": "TypeScript", "init": "yarn --network-timeout 100000 && yarn build"}, {"name": "Go", "before": "pre-commit install --install-hooks", "init": "./components/gitpod-protocol/go/scripts/generate-config.sh\nleeway exec --filter-type go -v -- go mod verify\n"}], "vscode": {"extensions": ["EditorConfig.EditorConfig", "golang.go", "hashicorp.terraform", "ms-azuretools.vscode-docker", "ms-kubernetes-tools.vscode-kubernetes-tools", "stkb.rewrap", "zxh404.vscode-proto3", "matthewpi.caddyfile-support", "heptio.jsonnet", "timonwong.shellcheck", "fwcd.kotlin", "dbaeumer.vscode-eslint", "esbenp.prettier-vscode", "akosyakov.gitpod-monitor", "hbenl.vscode-mocha-test-adapter"]}}
{"github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}, "tasks": [{"name": "Setup the environment", "init": "PYTHON_VERSION=3.11.3\npyenv install $PYTHON_VERSION\npyenv global $PYTHON_VERSION\npython -m pip install -r requirements.txt\n"}]}
{"tasks": [{"init": "yarn install\nyarn build\nyarn test --maxWorkers=30%\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}, "vscode": {"extensions": ["bierner.markdown-preview-github-styles", "dbaeumer.vscode-eslint", "eamodio.gitlens", "EditorConfig.EditorConfig", "esbenp.prettier-vscode", "streetsidesoftware.code-spell-checker", "yzhang.markdown-all-in-one"]}}
{"image": "ghcr.io/conda/conda-ci:main-linux-python3.9", "tasks": [{"name": "initialize", "init": "mkdir -p .vscode\necho '{\"python.pythonPath\": \"/opt/conda/bin/python\"}' > .vscode/settings.json\ngit tag \"$(git tag --sort=committerdate | tail -1).dev\"\neval \"$(sudo /opt/conda/bin/python -m conda init --dev bash)\"\n", "command": "eval \"$(sudo /opt/conda/bin/python -m conda init --dev bash)\"\n"}], "vscode": {"extensions": ["eamodio.gitlens", "ms-python.python", "ms-python.vscode-pylance"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}}
{"tasks": [{"name": "Run PostgreSQL Database", "command": "docker run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres"}, {"name": "Install Project Dependencies", "command": "pnpm install\npnpm dlx playwright install --with-deps chromium\ngp sync-done deps\n"}, {"name": "Generate Environment Variables", "init": "gp sync-await deps", "command": "if [ -f .env ]; then\n  echo \"Found .env in workspace, skipping generation\"\nelse\n  pnpm generate-env\nfi\ngp sync-done env\n"}, {"name": "Build and Run Project", "init": "gp sync-await env", "command": "pnpm build\npnpm start\n"}], "ports": [{"port": 5432, "onOpen": "ignore", "visibility": "private"}, {"port": 3100, "onOpen": "ignore", "visibility": "public"}, {"port": 3000, "onOpen": "open-browser", "visibility": "public"}]}
{"tasks": [{"init": "yarn install && gp sync-done install", "command": "yarn watch"}, {"name": "Docs", "init": "gp sync-await install", "command": "yarn docs", "openMode": "split-right"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "Install dependencies for Emscripten and build GDevelop.js", "init": "sudo apt-get update \nsudo apt install cmake python-is-python3 python3-distutils -y\ngit clone https://github.com/juj/emsdk.git && cd emsdk && ./emsdk install 1.39.6 && ./emsdk activate 1.39.6 && cd ..\ncd GDevelop.js\nnpm install\nsource ../emsdk/emsdk_env.sh && npm run build -- --dev\ncd ..\n"}, {"name": "Install GDevelop IDE dependencies", "init": "cd newIDE/app && npm install && cd ../electron-app && npm install"}]}
{"tasks": [{"init": "python3 -m venv /workspace/venv\nsource /workspace/venv/bin/activate\nmake dev_install\ncd /workspace\nzip -qr venv.zip venv\nrm -fr venv\n"}, {"command": "cd /workspace\nunzip -q venv.zip\nsource /workspace/venv/bin/activate\ncd /workspace/dagster\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}]}
{"ports": [{"port": 1337, "onOpen": "open-preview"}], "tasks": [{"init": "npm install", "command": "node example/server.js"}]}
{"tasks": [{"init": "npm install", "command": "npm run dev"}]}
{"tasks": [{"init": "sudo apt-get install ffmpeg -y && go get && go build ./... && go test ./...", "command": "go run ."}]}
{"tasks": [{"name": "docs", "before": "make docs-deps", "command": "mkdocs serve"}, {"name": "binary", "before": "npm install --global nodemon\nmake cli-deps-static-sites\n", "command": "nodemon --watch './**/*.go' --ext go --signal SIGTERM --exec \"CGO_ENABLED=1 go run main.go serve --listen-http :2586 --debug --base-url $(gp url 2586)\"\n", "openMode": "split-right"}, {"name": "web", "before": "make web-deps", "command": "cd web && npm start", "openMode": "split-right"}], "vscode": {"extensions": ["golang.go", "ms-azuretools.vscode-docker"]}, "ports": [{"name": "docs", "port": 8000}, {"name": "binary", "port": 2586}, {"name": "web", "port": 3000}]}
{"image": {"file": "gitpod.dockerfile"}, "tasks": [{"init": "./gradlew jar idea", "command": "./gradlew jar game"}], "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}]}
{"image": "gitpod/workspace-dotnet", "tasks": [{"init": "npm install\n", "command": "dotnet build ./site/AntDesign.Docs.Build/AntDesign.Docs.Build.csproj\nnpm run start\n"}], "ports": [{"port": 5000, "visibility": "public", "onOpen": "open-browser"}, {"port": 5001, "visibility": "public", "onOpen": "ignore"}, {"port": "30000-60000", "visibility": "public", "onOpen": "ignore"}]}
{"tasks": [{"init": "pnpm i && npx lerna run build"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn run bootstrap && cd ./examples/using-typescript && yarn install && gatsby-dev --set-path-to-repo ../.. && gatsby-dev --scan-once && npx gatsby build && cd ../.. && touch /tmp/done.txt\n", "command": "yarn run watch --scope={gatsby,gatsby-link}\n"}, {"openMode": "split-right", "before": "cd ./examples/using-typescript\n", "command": "gp await-port 8000 && gatsby-dev --set-path-to-repo ../.. && gatsby-dev\n"}, {"before": "cd ./examples/using-typescript\n", "init": "until [ -f /tmp/done.txt ]\ndo\n    sleep 2\ndone\n", "command": "npx gatsby develop\n"}], "ports": [{"port": 8000, "onOpen": "open-preview"}, {"port": 31997, "onOpen": "ignore"}]}
{"tasks": [{"init": "npm i", "command": "npm start"}], "ports": [{"port": 9000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "Setup Spin environment and Composer dependencies", "before": "sudo curl -o /usr/local/bin/docker-compose -fsSL https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-$(uname -m)", "init": "cp .env.example .env &&\nsed -i \"s#APP_URL=http://localhost#APP_URL=$(gp url 8000)#g\" .env\nsed -i \"s#USERID=#USERID=33333#g\" .env\nsed -i \"s#GROUPID=#GROUPID=33333#g\" .env\ncomposer install --ignore-platform-reqs\n./vendor/bin/spin up -d\n./vendor/bin/spin exec -u webuser coolify php artisan key:generate\n./vendor/bin/spin exec -u webuser coolify php artisan storage:link\n./vendor/bin/spin exec -u webuser coolify php artisan migrate:fresh --seed\ncat .coolify-logo\ngp sync-done spin-is-ready\n"}, {"name": "Install Node dependencies and run Vite", "command": "echo \"Waiting for Sail environment to boot up.\"\ngp sync-await spin-is-ready\n./vendor/bin/spin exec vite npm install\n./vendor/bin/spin exec vite npm run dev\n"}, {"name": "Laravel Queue Worker, listening to code changes", "command": "echo \"Waiting for Sail environment to boot up.\"\ngp sync-await spin-is-ready\n./vendor/bin/spin exec -u webuser coolify php artisan queue:listen\n"}], "ports": [{"port": 5432, "onOpen": "ignore", "name": "PostgreSQL", "visibility": "public"}, {"port": 5173, "onOpen": "ignore", "visibility": "public", "name": "Node Server for Vite"}, {"port": 8000, "onOpen": "ignore", "visibility": "public", "name": "Coolify"}], "vscode": {"extensions": ["bmewburn.vscode-intelephense-client", "ikappas.composer", "ms-azuretools.vscode-docker", "ecmel.vscode-html-css", "MehediDracula.php-namespace-resolver", "wmaurer.change-case", "Equinusocio.vsc-community-material-theme", "EditorConfig.EditorConfig", "streetsidesoftware.code-spell-checker", "rangav.vscode-thunder-client", "PKief.material-icon-theme", "cierra.livewire-vscode", "lennardv.livewire-goto-updated", "bradlc.vscode-tailwindcss", "heybourn.headwind", "adrianwilczynski.alpine-js-intellisense", "amiralizadeh9480.laravel-extra-intellisense", "shufo.vscode-blade-formatter"]}}
{"image": "gitpod/workspace-dotnet", "vscode": {"extensions": ["muhammad-sammy.csharp"]}}
{"github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "tasks": [{"init": "npm install"}]}
{"tasks": [{"name": "Init Frontend", "before": "cd ./frontend", "init": "pnpm i", "command": "pnpm dev"}, {"name": "Init Backend", "init": "curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s", "command": "rm -fv .air/pgdata/postmaster.pid && ./bin/air -c scripts/.air.toml"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 8080, "onOpen": "ignore"}]}
{"additionalRepositories": [{"url": "https://github.com/cloudfoundry/cli-ci"}, {"url": "https://github.com/cloudfoundry/cli-private"}, {"url": "https://github.com/cloudfoundry/cli-workstation"}], "workspaceLocation": "cli/.devcontainer/cli.code-workspace", "tasks": [{"name": "Setup Workspace", "before": "sudo apt install --yes  icdiff tldr fzf\nbrew install asdf cloudfoundry/tap/credhub-cli cloudfoundry/tap/bbl cloudfoundry/tap/bosh-cli act tmux neovim\n", "init": "tldr --update \nmake clean build\n", "command": "out/cf version"}], "vscode": {"extensions": ["vscodevim.vim", "eamodio.gitlens", "golang.go"]}}
{"tasks": [{"init": "pip install -r requirements.txt\n", "command": "mkdocs serve --dirtyreload"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"image": "gitpod/workspace-postgres", "tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}]}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "vscode": {"extensions": ["twxs.cmake", "ms-vscode.cmake-tools", "mhutchie.git-graph", "notskm.clang-tidy", "mitaki28.vscode-clang"]}}
{"image": "gitpod/workspace-full", "checkoutLocation": "gitpod-k3s", "tasks": [{"init": "make --always-make\nexport PATH=\"$(pwd)/tmp/bin:${PATH}\"\ncat > ${PWD}/.git/hooks/pre-commit <<EOF\n#!/bin/bash\n\necho \"Checking jsonnet fmt\"\nmake fmt > /dev/null 2>&1\necho \"Checking if manifests are correct\"\nmake generate > /dev/null 2>&1\n\ngit diff --exit-code\nif [[ \\$? == 1 ]]; then\n  echo \"\n\nThis commit is being rejected because the YAML manifests are incorrect or jsonnet needs to be formatted.\"\n  echo \"Please commit your changes again!\"\n  exit 1\nfi\nEOF\nchmod +x ${PWD}/.git/hooks/pre-commit\n"}, {"name": "run kube-prometheus", "command": "developer-workspace/gitpod/prepare-k3s.sh\ndeveloper-workspace/common/deploy-kube-prometheus.sh\n"}, {"name": "kernel dev environment", "init": "sudo apt update -y\nsudo apt install qemu qemu-system-x86 linux-image-$(uname -r) libguestfs-tools sshpass netcat -y\nsudo curl -o /usr/bin/kubectl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo chmod +x /usr/bin/kubectl\ndeveloper-workspace/gitpod/prepare-rootfs.sh\n", "command": "developer-workspace/gitpod/qemu.sh\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}, {"port": 9090, "onOpen": "open-browser"}, {"port": 9093, "onOpen": "open-browser"}], "vscode": {"extensions": ["heptio.jsonnet"]}}
{"tasks": [{"init": "cd website && yarn", "command": "yarn dev"}, {"init": "fish"}], "ports": [{"port": 8080, "onOpen": "open-preview", "visibility": "public"}]}
{"tasks": [{"init": "python -m venv venv\nsource venv/bin/activate\n\npip install pre-commit\npre-commit install --hook-type pre-commit --hook-type pre-push\npip install '.[dev]'\nmake compile-protos-python\nmake compile-protos-go\nmake compile-go-lib\n", "env": {"PYTHONUSERBASE": "/workspace/.pip-modules"}, "command": "source venv/bin/activate\n\ngit config --global alias.ci 'commit -s'\ngit config --global alias.sw switch\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.df diff\n"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}, "vscode": {"extensions": ["ms-python.python"]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust@0.7.8:CvNqMTgDdt3UXt+6BCDTVg=="]}}
{"image": "ghcr.io/notional-labs/cosmos", "tasks": [{"name": "install tools", "command": "go install golang.org/x/tools/cmd/goimports@latest\ngo install mvdan.cc/gofumpt@latest\nsudo pacman -Syyu clang --noconfirm\nsudo make tools\nsudo bash scripts/proto-tools-installer.sh\n"}]}
{"image": "gitpod/workspace-full", "checkoutLocation": "webrtc-streamer", "tasks": [{"name": "build", "init": "pushd ..\ngit clone https://chromium.googlesource.com/chromium/tools/depot_tools.git\npopd\nexport PATH=$PATH:`realpath ../depot_tools`\n\nmkdir ../webrtc\npushd ../webrtc\nfetch --no-history webrtc \npopd\n\ncmake -DCMAKE_BUILD_TYPE=Debug .\nmake\n", "command": "./webrtc-streamer -C config.json\n"}], "ports": [{"port": 8000, "onOpen": "open-browser"}], "vscode": {"extensions": ["webfreak.debug"]}}
{"image": {"file": "gitpod.Dockerfile"}, "tasks": [{"name": "Welcome message", "init": "echo \"Please run ./bootstrap.sh\""}], "vscode": {"extensions": ["llvm-vs-code-extensions.vscode-clangd", "ms-vscode.cmake-tools", "coenraads.bracket-pair-colorizer-2", "notskm.clang-tidy", "zxh404.vscode-proto3"]}}
{"tasks": [{"init": "mvn install -DskipTests=true"}]}
{"vscode": {"extensions": ["EditorConfig.EditorConfig", "svelte.svelte-vscode", "rust-lang.rust-analyzer", "tamasfe.even-better-toml"]}, "tasks": [{"name": "Install cargo-insta", "init": "cargo install cargo-insta"}, {"name": "Build Onefetch", "before": "sudo apt install -y cmake", "init": "cargo build"}, {"name": "onefetch.dev", "init": "cd $GITPOD_REPO_ROOT/docs/vercel && npm install", "command": "cd $GITPOD_REPO_ROOT/docs/vercel && npm run dev -- --port 3000"}], "ports": [{"name": "onefetch.dev", "description": "Web preview of onefetch ASCII art", "port": 3000, "onOpen": "open-preview"}]}
{"image": "ghcr.io/faddat/cosmos"}
{"tasks": [{"init": "npm install", "command": "npm run dev"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"gitConfig": {"core.autocrlf": "input"}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": true}}, "ports": [{"name": "AzuraCast HTTP", "port": 80, "onOpen": "ignore"}, {"name": "AzuraCast HTTPS", "port": 443, "onOpen": "open-browser", "visibility": "public"}, {"name": "SFTP", "port": 2022, "onOpen": "ignore"}, {"name": "MariaDB", "port": 3306, "onOpen": "ignore"}, {"name": "Redis", "port": 6379, "onOpen": "ignore"}, {"name": "Broadcast Ports", "port": "8000-8999", "onOpen": "ignore"}], "tasks": [{"name": "Backend", "init": "cp dev.env .env\ncp azuracast.dev.env azuracast.env\ncp docker-compose.sample.yml docker-compose.yml\ncp docker-compose.dev.yml docker-compose.override.yml\ndocker-compose build\n", "command": "bash util/setup_gitpod.sh\nbash docker.sh install-dev\ngp sync-done install\nmake bash\n"}, {"name": "Frontend", "command": "gp sync-await install\nmake frontend-bash\n"}]}
{"image": "maven:3-eclipse-temurin-8", "tasks": [{"name": "Fetch Dependencies and Build", "init": "mvn install -Pquick -Daether.dependencyCollector.impl=bf -T.5C"}, {"name": "Add upstream GitHub repo", "init": "git remote add upstream https://github.com/gchq/Gaffer.git || true", "command": "if ! [[ $(git config --global --get user.email) =~ .*@users.noreply.github.com ]]\nthen git config --global --remove-section user; echo;\necho \"Git user details weren't using noreply email and have been removed\"; echo; fi\n"}], "vscode": {"extensions": ["vscjava.vscode-java-pack", "redhat.java", "vscjava.vscode-java-dependency", "vscjava.vscode-java-debug", "vscjava.vscode-java-test", "vscjava.vscode-maven"]}}
{"image": {"file": "Dockerfile"}, "tasks": [{"command": "gp open .gitpod.yml"}]}
{"tasks": [{"name": "Initialize OctoBot", "init": "cd OctoBot\npython3 -m pip install -Ur requirements.txt\n", "command": "python3 start.py\n"}], "ports": [{"port": 5001, "onOpen": "open-preview", "name": "OctoBot"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": true}}}
{"tasks": [{"init": "npm install -g @google/clasp"}]}
{"tasks": [{"init": "make clean runtime\n", "command": "./just --help\n"}]}
{"tasks": [{"init": "go get && go build ./... && go test ./... && make", "command": "go run"}], "vscode": {"extensions": ["golang.go"]}}
{"tasks": [{"name": "Database", "command": "mkdir -p /workspace/data && mongod --dbpath /workspace/data\n"}, {"name": "Server", "init": "npm ci\nPLAYWRIGHT_BROWSERS_PATH=0 npx playwright install chromium\n", "command": "gp env PLAYWRIGHT_BROWSERS_PATH=0\neval $(gp env -e)\ngp ports await 27017\nnvm install 18\nnpm run dev\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}, "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["bradlc.vscode-tailwindcss"]}}
{"tasks": [{"name": "Database", "init": "docker pull postgres:14-alpine", "command": "docker run -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=p0stgr3s postgres:14-alpine"}, {"name": "Logto dev", "init": "nvm i 18\nnvm use 18\npnpm i\npnpm prepack\ncd packages/core\npnpm build\ncd -\npnpm connectors:build\npnpm cli connector link\n", "command": "gp ports await 5432\nsleep 3\nexport ENDPOINT=$(gp url 3001)\nexport ADMIN_ENDPOINT=$(gp url 3002)\npnpm cli db seed\npnpm start:dev\n", "env": {"TRUST_PROXY_HEADER": 1, "DB_URL": "postgres://postgres:p0stgr3s@127.0.0.1:5432/logto"}}], "ports": [{"name": "Logto", "description": "The Logto core service", "port": 3001, "visibility": "public"}, {"name": "Admin Console", "description": "The Admin Console for Logto core service", "port": 3002, "visibility": "public"}, {"name": "Postgres", "port": 5432, "visibility": "public", "onOpen": "ignore"}, {"port": 5001, "onOpen": "ignore"}, {"port": 5002, "onOpen": "ignore"}, {"port": 5003, "onOpen": "ignore"}, {"port": 6001, "onOpen": "ignore"}, {"port": 6002, "onOpen": "ignore"}, {"port": 6003, "onOpen": "ignore"}]}
{"tasks": [{"init": "yarn", "command": "yarn test:watch"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "gp await-port 3000 && sleep 3 && gp preview $(gp url 3000)/examples/browser/demo.html"}, {"init": "npm install", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "ignore"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"before": "export DANGEROUSLY_DISABLE_HOST_CHECK=true", "init": "yarn install", "command": "yarn start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 27017, "onOpen": "ignore"}, {"port": 8000, "onOpen": "notify", "visibility": "public"}, {"port": 9228, "onOpen": "ignore"}, {"port": 3000, "onOpen": "ignore", "visibility": "public"}, {"port": 9229, "onOpen": "ignore"}, {"port": 9230, "onOpen": "ignore"}, {"port": 3200, "visibility": "public"}, {"port": 3300, "visibility": "public"}], "tasks": [{"before": "echo '\nexport COOKIE_DOMAIN=gitpod.io\nexport HOME_LOCATION=$(gp url 8000)\nexport API_LOCATION=$(gp url 3000)\nexport CYPRESS_BASE_URL=$(gp url 8000)\nexport REACT_APP_CHALLENGE_EDITOR_API_LOCATION=$(gp url 3200)\nexport CHALLENGE_EDITOR_CLIENT_LOCATION=$(gp url 3300)\n' >> ~/.bashrc;\nexit;\n"}, {"name": "db", "before": "mkdir -p /workspace/data && (mongod --dbpath /workspace/data &)\n"}, {"name": "server", "before": "export COOKIE_DOMAIN=gitpod.io && export HOME_LOCATION=$(gp url 8000) && export API_LOCATION=$(gp url 3000) && export CYPRESS_BASE_URL=$(gp url 8000)", "init": "cp sample.env .env && pnpm install && gp sync-done pnpm-install && pnpm run build:curriculum && gp ports await 27017\n", "command": "pnpm run seed && mongosh --eval \"db.fsyncLock(); db.fsyncUnlock()\" && gp ports await 27017 && pnpm run develop:server\n"}, {"name": "client", "before": "export HOME_LOCATION=$(gp url 8000) && export API_LOCATION=$(gp url 3000) && export CYPRESS_BASE_URL=$(gp url 8000)", "init": "cd ./client && gp sync-await pnpm-install && cd ..\n", "command": "gp ports await 3000 && pnpm run develop:client -- -H '0.0.0.0'\n", "openMode": "split-right"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": true, "addBadge": false, "addLabel": false}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "esbenp.prettier-vscode"]}}
{"tasks": [{"init": "./configure && timeout 50m make -j16 || true"}, {"init": "pnpm i -g node-core-utils"}], "github": {"prebuilds": {"pullRequests": false, "addCheck": false}}}
{"tasks": [{"init": "./configure && timeout 50m make -j16 || true"}, {"init": "pnpm i -g node-core-utils"}], "github": {"prebuilds": {"pullRequests": false, "addCheck": false}}}
{"tasks": [{"init": "./configure && timeout 50m make -j16 || true"}, {"init": "pnpm i -g node-core-utils"}], "github": {"prebuilds": {"pullRequests": false, "addCheck": false}}}
{"tasks": [{"init": "./configure && timeout 50m make -j16 || true"}, {"init": "pnpm i -g node-core-utils"}], "github": {"prebuilds": {"pullRequests": false, "addCheck": false}}}
{"tasks": [{"command": "./gradlew build"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"command": "npm install"}]}
{"tasks": [{"command": "npm install"}]}
{"tasks": [{"command": "npm install"}]}
{"tasks": [{"command": "npm install"}]}
{"tasks": [{"init": "git clone https://github.com/algorithm-visualizer/server.git && cd server && npm install && echo -e \"GITHUB_CLIENT_ID=dummy\\nGITHUB_CLIENT_SECRET=dummy\\nAWS_ACCESS_KEY_ID=dummy\\nAWS_SECRET_ACCESS_KEY=dummy\" > .env.local && cd ..\n", "command": "cd server && npm run watch"}, {"init": "npm install && echo 'DANGEROUSLY_DISABLE_HOST_CHECK=true' > .env.local\n", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "notify"}, {"port": 8080, "onOpen": "ignore"}]}
{"tasks": [{"init": "git clone https://github.com/algorithm-visualizer/server.git && cd server && npm install && echo -e \"GITHUB_CLIENT_ID=dummy\\nGITHUB_CLIENT_SECRET=dummy\\nAWS_ACCESS_KEY_ID=dummy\\nAWS_SECRET_ACCESS_KEY=dummy\" > .env.local && cd ..\n", "command": "cd server && npm run watch"}, {"init": "npm install && echo 'DANGEROUSLY_DISABLE_HOST_CHECK=true' > .env.local\n", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "notify"}, {"port": 8080, "onOpen": "ignore"}]}
{"tasks": [{"init": "git clone https://github.com/algorithm-visualizer/server.git && cd server && npm install && echo -e \"GITHUB_CLIENT_ID=dummy\\nGITHUB_CLIENT_SECRET=dummy\\nAWS_ACCESS_KEY_ID=dummy\\nAWS_SECRET_ACCESS_KEY=dummy\" > .env.local && cd ..\n", "command": "cd server && npm run watch"}, {"init": "npm install && echo 'DANGEROUSLY_DISABLE_HOST_CHECK=true' > .env.local\n", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "notify"}, {"port": 8080, "onOpen": "ignore"}]}
{"tasks": [{"init": "git clone https://github.com/algorithm-visualizer/server.git && cd server && npm install && echo -e \"GITHUB_CLIENT_ID=dummy\\nGITHUB_CLIENT_SECRET=dummy\\nAWS_ACCESS_KEY_ID=dummy\\nAWS_SECRET_ACCESS_KEY=dummy\" > .env.local && cd ..\n", "command": "cd server && npm run watch"}, {"init": "npm install && echo 'DANGEROUSLY_DISABLE_HOST_CHECK=true' > .env.local\n", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "notify"}, {"port": 8080, "onOpen": "ignore"}]}
{"image": "ubuntu:latest", "tasks": [{"before": "echo \"...\"", "init": "cargo install rustup-toolchain-install-master\n./miri toolchain\n./miri build\n", "command": "echo \"Run tests with ./miri test\""}]}
{"image": "ubuntu:latest", "tasks": [{"before": "echo \"...\"", "init": "cargo install rustup-toolchain-install-master\n./miri toolchain\n./miri build\n", "command": "echo \"Run tests with ./miri test\""}]}
{"image": "ubuntu:latest", "tasks": [{"before": "echo \"...\"", "init": "cargo install rustup-toolchain-install-master\n./miri toolchain\n./miri build\n", "command": "echo \"Run tests with ./miri test\""}]}
{"image": "ubuntu:latest", "tasks": [{"before": "echo \"...\"", "init": "cargo install rustup-toolchain-install-master\n./miri toolchain\n./miri build\n", "command": "echo \"Run tests with ./miri test\""}]}
{"image": {"file": "Dockerfile"}, "tasks": [{"name": "Prepare development environment", "init": "mkdir -p .vscode\ncp gitpod/settings.json .vscode/settings.json\ngit fetch --tags\npython -m pip install -ve . --no-build-isolation --config-settings editable-verbose=true\npre-commit install\n", "command": "python -m pip install -ve . --no-build-isolation --config-settings editable-verbose=true\necho \"\u2728 Pre-build complete! You can close this terminal \u2728 \"\n"}], "ports": [{"port": 5500, "onOpen": "notify"}], "vscode": {"extensions": ["ms-python.python", "yzhang.markdown-all-in-one", "eamodio.gitlens", "lextudio.restructuredtext", "ritwickdey.liveserver"]}, "github": {"prebuilds": {"main": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}}
{"tasks": [{"init": "npm install && npm run build\n", "command": "npm run watch"}, {"init": "cd ../ && git clone https://github.com/photonstorm/phaser3-examples.git && cd phaser3-examples && npm install && npm start\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm install && npm run build\n", "command": "npm run watch"}, {"init": "cd ../ && git clone https://github.com/photonstorm/phaser3-examples.git && cd phaser3-examples && npm install && npm start\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm install && npm run build\n", "command": "npm run watch"}, {"init": "cd ../ && git clone https://github.com/photonstorm/phaser3-examples.git && cd phaser3-examples && npm install && npm start\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm install && npm run build\n", "command": "npm run watch"}, {"init": "cd ../ && git clone https://github.com/photonstorm/phaser3-examples.git && cd phaser3-examples && npm install && npm start\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"image": {"file": "./scripts/gitpod/.gitpod.Dockerfile"}, "tasks": [{"name": "Supervisor (VNC and noVNC)", "command": "/usr/bin/supervisord --configuration /etc/supervisord.conf &"}, {"name": "Set cache path and warm it up", "init": "echo \"build --repository_cache=/workspace/.cache/bazel-repo\" >> /workspace/selenium/.bazelrc.local\necho \"test --repository_cache=/workspace/.cache/bazel-repo\" >> /workspace/selenium/.bazelrc.local\necho \"build --disk_cache=/workspace/.cache/bazel-disk\" >> /workspace/selenium/.bazelrc.local\necho \"test --disk_cache=/workspace/.cache/bazel-disk\" >> /workspace/selenium/.bazelrc.local\necho \"build --jobs=10\" >> /workspace/selenium/.bazelrc.local\necho \"test --jobs=10\" >> /workspace/selenium/.bazelrc.local\nbazel build grid\n"}], "ports": [{"name": "VNC", "description": "Port where VNC server is listening", "port": 5900, "onOpen": "ignore"}, {"name": "XVFB", "description": "Port where XVFB server is listening", "port": 6099, "onOpen": "ignore"}, {"name": "noVNC", "description": "Port where the noVNC view is available", "port": 7900, "onOpen": "notify"}, {"name": "Build and test ports", "description": "Other ports opened while building or testing", "port": "8000-65535", "onOpen": "ignore"}]}
{"tasks": [{"init": "npx pnpm install\nnpx pnpm build:stub\n", "command": "npx pnpm play"}], "ports": [{"port": 3000, "onOpen": "open-preview", "visibility": "public"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}}
{"tasks": [{"init": "npx pnpm install\nnpx pnpm build:stub\n", "command": "npx pnpm play"}], "ports": [{"port": 3000, "onOpen": "open-preview", "visibility": "public"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}}
{"tasks": [{"init": "mvn install -DskipTests=true"}], "vscode": {"extensions": ["vscjava.vscode-maven@0.21.0:37ZOg7jK2M04yXsE+ItbZg==", "GabrielBB.vscode-lombok@1.0.0:fYRHVd+UkrccCfjaRz7jKw=="]}}
{"tasks": [{"init": "mvn install -DskipTests=true"}], "vscode": {"extensions": ["vscjava.vscode-maven@0.21.0:37ZOg7jK2M04yXsE+ItbZg==", "GabrielBB.vscode-lombok@1.0.0:fYRHVd+UkrccCfjaRz7jKw=="]}}
{"tasks": [{"init": "mvn install -DskipTests=true"}], "vscode": {"extensions": ["vscjava.vscode-maven@0.21.0:37ZOg7jK2M04yXsE+ItbZg==", "GabrielBB.vscode-lombok@1.0.0:fYRHVd+UkrccCfjaRz7jKw=="]}}
{"tasks": [{"init": "mvn install -DskipTests=true"}], "vscode": {"extensions": ["vscjava.vscode-maven@0.21.0:37ZOg7jK2M04yXsE+ItbZg==", "GabrielBB.vscode-lombok@1.0.0:fYRHVd+UkrccCfjaRz7jKw=="]}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run watch"}]}
{"tasks": [{"init": "./scripts/ci/install_breeze.sh"}, {"name": "Install pre-commit", "openMode": "split-right", "command": "printf '%s\\n' \"export PIP_USER=no\" >> \"$HOME/.bashrc\"\nsource \"$HOME/.bashrc\"\npip install pre-commit\npre-commit install\necho \"for running integration test with breeze\"\n"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "./scripts/ci/install_breeze.sh"}, {"name": "Install pre-commit", "openMode": "split-right", "command": "printf '%s\\n' \"export PIP_USER=no\" >> \"$HOME/.bashrc\"\nsource \"$HOME/.bashrc\"\npip install pre-commit\npre-commit install\necho \"for running integration test with breeze\"\n"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "pnpm install && pnpm run build", "command": "pnpm run start"}]}
{"tasks": [{"init": "brew install hyperfine\nyarn\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "vscode": {"extensions": ["esbenp.prettier-vscode", "dbaeumer.vscode-eslint", "editorconfig.editorconfig", "streetsidesoftware.code-spell-checker"]}}
{"tasks": [{"init": "mvn -am -pl war,bom -P quick-build clean install\n", "command": "mvn -pl war jetty:run -Dhost=0.0.0.0\n", "name": "Run"}, {"command": "gp ports await 8080 && gp url 8080 && gp preview $(gp url 8080)/jenkins/", "name": "Preview"}], "github": {"prebuilds": {"pullRequestsFromForks": true, "addBadge": true}}, "jetbrains": {"intellij": {"plugins": ["Stapler plugin for IntelliJ IDEA"], "prebuilds": {"version": "stable"}}}, "vscode": {"extensions": ["vscjava.vscode-java-pack"]}, "image": {"file": ".gitpod/Dockerfile"}}
{"ports": [{"port": 8001, "onOpen": "open-preview"}], "tasks": [{"before": "export DEV_HOST=$(gp url 8001)\n", "init": "npm install", "command": "npm start"}]}
{"ports": [{"port": 8001, "onOpen": "open-preview"}], "tasks": [{"before": "export DEV_HOST=$(gp url 8001)\n", "init": "npm install", "command": "npm start"}]}
{"ports": [{"port": 8001, "onOpen": "open-preview"}], "tasks": [{"before": "export DEV_HOST=$(gp url 8001)\n", "init": "npm install", "command": "npm start"}]}
{"ports": [{"port": 8001, "onOpen": "open-preview"}], "tasks": [{"before": "export DEV_HOST=$(gp url 8001)\n", "init": "npm install", "command": "npm start"}]}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn gulp fastBuild && printf \"\\nWelcome to Learn Git Branching\\nTo rebuild the app, simply run 'yarn gulp fastBuild' and reload index.html.\\n\\n\" && python3 -m http.server 8000 2>/dev/null\n"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn gulp fastBuild && printf \"\\nWelcome to Learn Git Branching\\nTo rebuild the app, simply run 'yarn gulp fastBuild' and reload index.html.\\n\\n\" && python3 -m http.server 8000 2>/dev/null\n"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn gulp fastBuild && printf \"\\nWelcome to Learn Git Branching\\nTo rebuild the app, simply run 'yarn gulp fastBuild' and reload index.html.\\n\\n\" && python3 -m http.server 8000 2>/dev/null\n"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn gulp fastBuild && printf \"\\nWelcome to Learn Git Branching\\nTo rebuild the app, simply run 'yarn gulp fastBuild' and reload index.html.\\n\\n\" && python3 -m http.server 8000 2>/dev/null\n"}]}
{"tasks": [{"name": "Build & Watch", "init": "npm install", "command": "npm run build -- -w -f"}, {"name": "Node", "init": "npm install", "command": "npm start node -- --no-watch"}, {"name": "Next.js", "init": "npm install", "command": "npm start next -- --no-watch"}, {"name": "Vanilla", "init": "npm install", "command": "npm start vanilla -- --no-watch"}]}
{"tasks": [{"before": "npm install && npm i gulp -g", "command": "gulp"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"before": "npm install && npm i gulp -g", "command": "gulp"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"before": "npm install && npm i gulp -g", "command": "gulp"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"before": "npm install && npm i gulp -g", "command": "gulp"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build:packages", "command": "pnpm dev"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "editorconfig.editorconfig", "esbenp.prettier-vscode", "vue.volar", "vue.vscode-typescript-vue-plugin"]}}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build:packages", "command": "pnpm dev"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "editorconfig.editorconfig", "esbenp.prettier-vscode", "vue.volar", "vue.vscode-typescript-vue-plugin"]}}
{"tasks": [{"init": "make install", "command": "make run"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "make install", "command": "make run"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "make install", "command": "make run"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "make install", "command": "make run"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"image": {"file": ".github/dockerfiles/Dockerfile.ubuntu-base", "context": ".github"}, "vscode": {"extensions": ["ms-vscode.cpptools", "erlang-ls.erlang-ls"]}}
{"image": {"file": ".github/dockerfiles/Dockerfile.ubuntu-base", "context": ".github"}, "vscode": {"extensions": ["ms-vscode.cpptools", "erlang-ls.erlang-ls"]}}
{"image": {"file": ".github/dockerfiles/Dockerfile.ubuntu-base", "context": ".github"}, "vscode": {"extensions": ["ms-vscode.cpptools", "erlang-ls.erlang-ls"]}}
{"mainConfiguration": "https://github.com/mattermost/mattermost-gitpod-config"}
{"mainConfiguration": "https://github.com/mattermost/mattermost-gitpod-config"}
{"mainConfiguration": "https://github.com/mattermost/mattermost-gitpod-config"}
{"mainConfiguration": "https://github.com/mattermost/mattermost-gitpod-config"}
{"tasks": [{"init": "pnpm i", "command": "pnpm dev"}]}
{"tasks": [{"init": "pnpm i", "command": "pnpm dev"}]}
{"tasks": [{"init": "pnpm i", "command": "pnpm dev"}]}
{"tasks": [{"init": "pnpm i", "command": "pnpm dev"}]}
{"ports": [{"port": 8008, "onOpen": "open-preview"}], "tasks": [{"init": "pip install -r requirements.txt && cp env.py.example env.py", "command": "python main.py -t"}]}
{"ports": [{"port": 8008, "onOpen": "open-preview"}], "tasks": [{"init": "pip install -r requirements.txt && cp env.py.example env.py", "command": "python main.py -t"}]}
{"ports": [{"port": 8008, "onOpen": "open-preview"}], "tasks": [{"init": "pip install -r requirements.txt && cp env.py.example env.py", "command": "python main.py -t"}]}
{"ports": [{"port": 8008, "onOpen": "open-preview"}], "tasks": [{"init": "pip install -r requirements.txt && cp env.py.example env.py", "command": "python main.py -t"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "npm_config_yes=true pnpm setup:project && gp sync-done setup", "command": "mkdir -p /workspace/data && mongod --dbpath /workspace/data"}, {"init": "gp sync-await setup", "command": "redis-server"}, {"name": "Shared Library", "init": "gp sync-await setup", "command": "cd libs/shared && pnpm start"}, {"name": "DAL", "init": "gp sync-await setup", "command": "cd libs/dal && pnpm start"}, {"name": "TESTING LIB", "init": "gp sync-await setup", "command": "cd libs/testing && pnpm start"}, {"name": "API", "init": "gp sync-await setup", "command": "cd apps/api && pnpm start"}, {"name": "WS", "init": "gp sync-await setup", "command": "cd apps/ws && pnpm start"}, {"name": "WEB", "init": "gp sync-await setup", "command": "cd apps/web\nAPI_URL=`gp url 3000`\nWS_URL=`gp url 3002`\nsed -i \"/REACT_APP_API_URL=/c\\REACT_APP_API_URL=$API_URL\" .env\necho \"REACT_APP_WS_URL=$WS_URL\" >> .env\npnpm envsetup && pnpm start\n"}, {"name": "WIDGET", "init": "gp sync-await setup", "command": "cd apps/widget\nAPI_URL=`gp url 3000`\nWS_URL=`gp url 3002`\nsed -i \"/REACT_APP_API_URL=/c\\REACT_APP_API_URL=$API_URL\" .env\nsed -i \"/REACT_APP_WS_URL=/c\\REACT_APP_WS_URL=$WS_URL\" .env\npnpm envsetup && pnpm start:dev\n"}], "ports": [{"port": 4200, "onOpen": "open-preview", "visibility": "public"}, {"port": 4500, "onOpen": "notify", "visibility": "public"}, {"port": 3000, "onOpen": "notify", "visibility": "public"}, {"port": 3002, "onOpen": "notify", "visibility": "public"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true, "addComment": true}}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"init": "./mvnw -Dquickly"}, {"name": "Quarkus command", "openMode": "split-right"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-dependency", "vscjava.vscode-java-debug", "vscjava.vscode-java-pack"]}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"init": "./mvnw -Dquickly"}, {"name": "Quarkus command", "openMode": "split-right"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-dependency", "vscjava.vscode-java-debug", "vscjava.vscode-java-pack"]}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"init": "./mvnw -Dquickly"}, {"name": "Quarkus command", "openMode": "split-right"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-dependency", "vscjava.vscode-java-debug", "vscjava.vscode-java-pack"]}}
{"tasks": [{"init": "test -f go.mod && go get -v ./...; wget https://github.com/prometheus/prometheus/releases/download/v2.22.2/prometheus-2.22.2.linux-amd64.tar.gz --directory-prefix=/tmp; cd /tmp && tar xvfz prometheus-*.tar.gz && rm prometheus-*.tar.gz; mv prometheus-*/prometheus /workspace/go/bin/; wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh && chmod u+x ./wait-for-it.sh && cd /workspace/thanos/scripts && mv /tmp/wait-for-it.sh .; ./quickstart.sh; for i in {0..2};do ./wait-for-it.sh -q localhost:909\"$i\" --  && echo \"Prometheus instance no.$((i+1)) localhost:909$i is up\"; done; ./wait-for-it.sh localhost:10914 --  && echo \"Thanos frontend at localhost:10914 is up\";\n"}], "ports": [{"port": 10914, "onOpen": "open-preview"}]}
{"tasks": [{"init": "test -f go.mod && go get -v ./...; wget https://github.com/prometheus/prometheus/releases/download/v2.22.2/prometheus-2.22.2.linux-amd64.tar.gz --directory-prefix=/tmp; cd /tmp && tar xvfz prometheus-*.tar.gz && rm prometheus-*.tar.gz; mv prometheus-*/prometheus /workspace/go/bin/; wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh && chmod u+x ./wait-for-it.sh && cd /workspace/thanos/scripts && mv /tmp/wait-for-it.sh .; ./quickstart.sh; for i in {0..2};do ./wait-for-it.sh -q localhost:909\"$i\" --  && echo \"Prometheus instance no.$((i+1)) localhost:909$i is up\"; done; ./wait-for-it.sh localhost:10914 --  && echo \"Thanos frontend at localhost:10914 is up\";\n"}], "ports": [{"port": 10914, "onOpen": "open-preview"}]}
{"tasks": [{"init": "test -f go.mod && go get -v ./...; wget https://github.com/prometheus/prometheus/releases/download/v2.22.2/prometheus-2.22.2.linux-amd64.tar.gz --directory-prefix=/tmp; cd /tmp && tar xvfz prometheus-*.tar.gz && rm prometheus-*.tar.gz; mv prometheus-*/prometheus /workspace/go/bin/; wget https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh && chmod u+x ./wait-for-it.sh && cd /workspace/thanos/scripts && mv /tmp/wait-for-it.sh .; ./quickstart.sh; for i in {0..2};do ./wait-for-it.sh -q localhost:909\"$i\" --  && echo \"Prometheus instance no.$((i+1)) localhost:909$i is up\"; done; ./wait-for-it.sh localhost:10914 --  && echo \"Thanos frontend at localhost:10914 is up\";\n"}], "ports": [{"port": 10914, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"before": "mkdir -p /workspace/opt-pulumi && sudo ln -s /workspace/opt-pulumi $HOME/.pulumi-dev\n", "init": "make ensure && make install\n", "command": "pulumi version"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"before": "mkdir -p /workspace/opt-pulumi && sudo ln -s /workspace/opt-pulumi $HOME/.pulumi-dev\n", "init": "make ensure && make install\n", "command": "pulumi version"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"before": "mkdir -p /workspace/opt-pulumi && sudo ln -s /workspace/opt-pulumi $HOME/.pulumi-dev\n", "init": "make ensure && make install\n", "command": "pulumi version"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}}
{"tasks": [{"init": "sudo apt-get install libncurses5 libncursesw5 libtinfo5\nsudo apt-get install libcurl4-openssl-dev\n"}, {"command": "./gradlew assemble"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 3001, "onOpen": "ignore"}], "vscode": {"extensions": ["syler.sass-indented@1.6.7:gAbIL/5IWvH0xYAbwe0Vag=="]}}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn", "command": "yarn dev:web"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn", "command": "yarn dev:web"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn", "command": "yarn dev:web"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn", "command": "yarn dev:web"}]}
{"tasks": [{"init": "pip install -r ./requirements.txt", "command": "mkdocs serve"}]}
{"tasks": [{"init": "pip install -r ./requirements.txt", "command": "mkdocs serve"}]}
{"tasks": [{"name": "Run Script to Comment ut required lines", "init": "cd ./.scripts\nsh commentLinesForSetup.sh\n"}, {"name": "Run Docker Images", "init": "cd ./deploy\nsudo docker-compose -f docker/clickhouse-setup/docker-compose.yaml up -d\n"}, {"name": "Run Frontend", "init": "cd ./frontend\nyarn install\n", "command": "yarn dev"}], "ports": [{"port": 3301, "onOpen": "open-browser"}, {"port": 8080, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 8123, "onOpen": "ignore"}, {"port": 8089, "onOpen": "ignore"}, {"port": 9093, "onOpen": "ignore"}]}
{"tasks": [{"name": "Run Script to Comment ut required lines", "init": "cd ./.scripts\nsh commentLinesForSetup.sh\n"}, {"name": "Run Docker Images", "init": "cd ./deploy\nsudo docker-compose -f docker/clickhouse-setup/docker-compose.yaml up -d\n"}, {"name": "Run Frontend", "init": "cd ./frontend\nyarn install\n", "command": "yarn dev"}], "ports": [{"port": 3301, "onOpen": "open-browser"}, {"port": 8080, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 8123, "onOpen": "ignore"}, {"port": 8089, "onOpen": "ignore"}, {"port": 9093, "onOpen": "ignore"}]}
{"tasks": [{"name": "Run Script to Comment ut required lines", "init": "cd ./.scripts\nsh commentLinesForSetup.sh\n"}, {"name": "Run Docker Images", "init": "cd ./deploy\nsudo docker-compose -f docker/clickhouse-setup/docker-compose.yaml up -d\n"}, {"name": "Run Frontend", "init": "cd ./frontend\nyarn install\n", "command": "yarn dev"}], "ports": [{"port": 3301, "onOpen": "open-browser"}, {"port": 8080, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 8123, "onOpen": "ignore"}, {"port": 8089, "onOpen": "ignore"}, {"port": 9093, "onOpen": "ignore"}]}
{"tasks": [{"name": "Run Script to Comment ut required lines", "init": "cd ./.scripts\nsh commentLinesForSetup.sh\n"}, {"name": "Run Docker Images", "init": "cd ./deploy\nsudo docker-compose -f docker/clickhouse-setup/docker-compose.yaml up -d\n"}, {"name": "Run Frontend", "init": "cd ./frontend\nyarn install\n", "command": "yarn dev"}], "ports": [{"port": 3301, "onOpen": "open-browser"}, {"port": 8080, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 8123, "onOpen": "ignore"}, {"port": 8089, "onOpen": "ignore"}, {"port": 9093, "onOpen": "ignore"}]}
{"tasks": [{"init": "yarn install\nyarn build\nyarn test --maxWorkers=30%\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}, "vscode": {"extensions": ["bierner.markdown-preview-github-styles", "dbaeumer.vscode-eslint", "eamodio.gitlens", "EditorConfig.EditorConfig", "esbenp.prettier-vscode", "streetsidesoftware.code-spell-checker", "yzhang.markdown-all-in-one"]}}
{"tasks": [{"init": "yarn install && gp sync-done install", "command": "yarn watch"}, {"name": "Docs", "init": "gp sync-await install", "command": "yarn docs", "openMode": "split-right"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "python3 -m venv /workspace/venv\nsource /workspace/venv/bin/activate\nmake dev_install\ncd /workspace\nzip -qr venv.zip venv\nrm -fr venv\n"}, {"command": "cd /workspace\nunzip -q venv.zip\nsource /workspace/venv/bin/activate\ncd /workspace/dagster\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}]}
{"tasks": [{"init": "python3 -m venv /workspace/venv\nsource /workspace/venv/bin/activate\nmake dev_install\ncd /workspace\nzip -qr venv.zip venv\nrm -fr venv\n"}, {"command": "cd /workspace\nunzip -q venv.zip\nsource /workspace/venv/bin/activate\ncd /workspace/dagster\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}]}
{"tasks": [{"init": "python3 -m venv /workspace/venv\nsource /workspace/venv/bin/activate\nmake dev_install\ncd /workspace\nzip -qr venv.zip venv\nrm -fr venv\n"}, {"command": "cd /workspace\nunzip -q venv.zip\nsource /workspace/venv/bin/activate\ncd /workspace/dagster\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}]}
{"ports": [{"port": 1337, "onOpen": "open-preview"}], "tasks": [{"init": "npm install", "command": "node example/server.js"}]}
{"tasks": [{"init": "npm install", "command": "npm run dev"}]}
{"tasks": [{"init": "npm install", "command": "npm run dev"}]}
{"tasks": [{"init": "npm install", "command": "npm run dev"}]}
{"tasks": [{"init": "npm install", "command": "npm run dev"}]}
{"image": "gitpod/workspace-dotnet", "tasks": [{"init": "npm install\n", "command": "dotnet build ./site/AntDesign.Docs.Build/AntDesign.Docs.Build.csproj\nnpm run start\n"}], "ports": [{"port": 5000, "visibility": "public", "onOpen": "open-browser"}, {"port": 5001, "visibility": "public", "onOpen": "ignore"}, {"port": "30000-60000", "visibility": "public", "onOpen": "ignore"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm i", "command": "npm start"}], "ports": [{"port": 9000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm i", "command": "npm start"}], "ports": [{"port": 9000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm i", "command": "npm start"}], "ports": [{"port": 9000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm i", "command": "npm start"}], "ports": [{"port": 9000, "onOpen": "open-preview"}]}
{"github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "tasks": [{"init": "npm install"}]}
{"github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "tasks": [{"init": "npm install"}]}
{"tasks": [{"init": "pip install -r requirements.txt\n", "command": "mkdocs serve --dirtyreload"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "pip install -r requirements.txt\n", "command": "mkdocs serve --dirtyreload"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "vscode": {"extensions": ["twxs.cmake", "ms-vscode.cmake-tools", "mhutchie.git-graph", "notskm.clang-tidy", "mitaki28.vscode-clang"]}}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "vscode": {"extensions": ["twxs.cmake", "ms-vscode.cmake-tools", "mhutchie.git-graph", "notskm.clang-tidy", "mitaki28.vscode-clang"]}}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "vscode": {"extensions": ["twxs.cmake", "ms-vscode.cmake-tools", "mhutchie.git-graph", "notskm.clang-tidy", "mitaki28.vscode-clang"]}}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "vscode": {"extensions": ["twxs.cmake", "ms-vscode.cmake-tools", "mhutchie.git-graph", "notskm.clang-tidy", "mitaki28.vscode-clang"]}}
{"image": "gitpod/workspace-full", "checkoutLocation": "gitpod-k3s", "tasks": [{"init": "make --always-make\nexport PATH=\"$(pwd)/tmp/bin:${PATH}\"\ncat > ${PWD}/.git/hooks/pre-commit <<EOF\n#!/bin/bash\n\necho \"Checking jsonnet fmt\"\nmake fmt > /dev/null 2>&1\necho \"Checking if manifests are correct\"\nmake generate > /dev/null 2>&1\n\ngit diff --exit-code\nif [[ \\$? == 1 ]]; then\n  echo \"\n\nThis commit is being rejected because the YAML manifests are incorrect or jsonnet needs to be formatted.\"\n  echo \"Please commit your changes again!\"\n  exit 1\nfi\nEOF\nchmod +x ${PWD}/.git/hooks/pre-commit\n"}, {"name": "run kube-prometheus", "command": "developer-workspace/gitpod/prepare-k3s.sh\ndeveloper-workspace/common/deploy-kube-prometheus.sh\n"}, {"name": "kernel dev environment", "init": "sudo apt update -y\nsudo apt install qemu qemu-system-x86 linux-image-$(uname -r) libguestfs-tools sshpass netcat -y\nsudo curl -o /usr/bin/kubectl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo chmod +x /usr/bin/kubectl\ndeveloper-workspace/gitpod/prepare-rootfs.sh\n", "command": "developer-workspace/gitpod/qemu.sh\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}, {"port": 9090, "onOpen": "open-browser"}, {"port": 9093, "onOpen": "open-browser"}], "vscode": {"extensions": ["heptio.jsonnet"]}}
{"image": "gitpod/workspace-full", "checkoutLocation": "gitpod-k3s", "tasks": [{"init": "make --always-make\nexport PATH=\"$(pwd)/tmp/bin:${PATH}\"\ncat > ${PWD}/.git/hooks/pre-commit <<EOF\n#!/bin/bash\n\necho \"Checking jsonnet fmt\"\nmake fmt > /dev/null 2>&1\necho \"Checking if manifests are correct\"\nmake generate > /dev/null 2>&1\n\ngit diff --exit-code\nif [[ \\$? == 1 ]]; then\n  echo \"\n\nThis commit is being rejected because the YAML manifests are incorrect or jsonnet needs to be formatted.\"\n  echo \"Please commit your changes again!\"\n  exit 1\nfi\nEOF\nchmod +x ${PWD}/.git/hooks/pre-commit\n"}, {"name": "run kube-prometheus", "command": "developer-workspace/gitpod/prepare-k3s.sh\ndeveloper-workspace/common/deploy-kube-prometheus.sh\n"}, {"name": "kernel dev environment", "init": "sudo apt update -y\nsudo apt install qemu qemu-system-x86 linux-image-$(uname -r) libguestfs-tools sshpass netcat -y\nsudo curl -o /usr/bin/kubectl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo chmod +x /usr/bin/kubectl\ndeveloper-workspace/gitpod/prepare-rootfs.sh\n", "command": "developer-workspace/gitpod/qemu.sh\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}, {"port": 9090, "onOpen": "open-browser"}, {"port": 9093, "onOpen": "open-browser"}], "vscode": {"extensions": ["heptio.jsonnet"]}}
{"image": "gitpod/workspace-full", "checkoutLocation": "gitpod-k3s", "tasks": [{"init": "make --always-make\nexport PATH=\"$(pwd)/tmp/bin:${PATH}\"\ncat > ${PWD}/.git/hooks/pre-commit <<EOF\n#!/bin/bash\n\necho \"Checking jsonnet fmt\"\nmake fmt > /dev/null 2>&1\necho \"Checking if manifests are correct\"\nmake generate > /dev/null 2>&1\n\ngit diff --exit-code\nif [[ \\$? == 1 ]]; then\n  echo \"\n\nThis commit is being rejected because the YAML manifests are incorrect or jsonnet needs to be formatted.\"\n  echo \"Please commit your changes again!\"\n  exit 1\nfi\nEOF\nchmod +x ${PWD}/.git/hooks/pre-commit\n"}, {"name": "run kube-prometheus", "command": "developer-workspace/gitpod/prepare-k3s.sh\ndeveloper-workspace/common/deploy-kube-prometheus.sh\n"}, {"name": "kernel dev environment", "init": "sudo apt update -y\nsudo apt install qemu qemu-system-x86 linux-image-$(uname -r) libguestfs-tools sshpass netcat -y\nsudo curl -o /usr/bin/kubectl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo chmod +x /usr/bin/kubectl\ndeveloper-workspace/gitpod/prepare-rootfs.sh\n", "command": "developer-workspace/gitpod/qemu.sh\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}, {"port": 9090, "onOpen": "open-browser"}, {"port": 9093, "onOpen": "open-browser"}], "vscode": {"extensions": ["heptio.jsonnet"]}}
{"image": "gitpod/workspace-full", "checkoutLocation": "gitpod-k3s", "tasks": [{"init": "make --always-make\nexport PATH=\"$(pwd)/tmp/bin:${PATH}\"\ncat > ${PWD}/.git/hooks/pre-commit <<EOF\n#!/bin/bash\n\necho \"Checking jsonnet fmt\"\nmake fmt > /dev/null 2>&1\necho \"Checking if manifests are correct\"\nmake generate > /dev/null 2>&1\n\ngit diff --exit-code\nif [[ \\$? == 1 ]]; then\n  echo \"\n\nThis commit is being rejected because the YAML manifests are incorrect or jsonnet needs to be formatted.\"\n  echo \"Please commit your changes again!\"\n  exit 1\nfi\nEOF\nchmod +x ${PWD}/.git/hooks/pre-commit\n"}, {"name": "run kube-prometheus", "command": "developer-workspace/gitpod/prepare-k3s.sh\ndeveloper-workspace/common/deploy-kube-prometheus.sh\n"}, {"name": "kernel dev environment", "init": "sudo apt update -y\nsudo apt install qemu qemu-system-x86 linux-image-$(uname -r) libguestfs-tools sshpass netcat -y\nsudo curl -o /usr/bin/kubectl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo chmod +x /usr/bin/kubectl\ndeveloper-workspace/gitpod/prepare-rootfs.sh\n", "command": "developer-workspace/gitpod/qemu.sh\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}, {"port": 9090, "onOpen": "open-browser"}, {"port": 9093, "onOpen": "open-browser"}], "vscode": {"extensions": ["heptio.jsonnet"]}}
{"tasks": [{"init": "cd website && yarn", "command": "yarn dev"}, {"init": "fish"}], "ports": [{"port": 8080, "onOpen": "open-preview", "visibility": "public"}]}
{"tasks": [{"init": "python -m venv venv\nsource venv/bin/activate\n\npip install pre-commit\npre-commit install --hook-type pre-commit --hook-type pre-push\npip install '.[dev]'\nmake compile-protos-python\nmake compile-protos-go\nmake compile-go-lib\n", "env": {"PYTHONUSERBASE": "/workspace/.pip-modules"}, "command": "source venv/bin/activate\n\ngit config --global alias.ci 'commit -s'\ngit config --global alias.sw switch\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.df diff\n"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}, "vscode": {"extensions": ["ms-python.python"]}}
{"tasks": [{"init": "python -m venv venv\nsource venv/bin/activate\n\npip install pre-commit\npre-commit install --hook-type pre-commit --hook-type pre-push\npip install '.[dev]'\nmake compile-protos-python\nmake compile-protos-go\nmake compile-go-lib\n", "env": {"PYTHONUSERBASE": "/workspace/.pip-modules"}, "command": "source venv/bin/activate\n\ngit config --global alias.ci 'commit -s'\ngit config --global alias.sw switch\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.df diff\n"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}, "vscode": {"extensions": ["ms-python.python"]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust@0.7.8:CvNqMTgDdt3UXt+6BCDTVg=="]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust@0.7.8:CvNqMTgDdt3UXt+6BCDTVg=="]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust@0.7.8:CvNqMTgDdt3UXt+6BCDTVg=="]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust@0.7.8:CvNqMTgDdt3UXt+6BCDTVg=="]}}
{"image": "ghcr.io/notional-labs/cosmos", "tasks": [{"name": "install tools", "command": "go install golang.org/x/tools/cmd/goimports@latest\ngo install mvdan.cc/gofumpt@latest\nsudo pacman -Syyu clang --noconfirm\nsudo make tools\nsudo bash scripts/proto-tools-installer.sh\n"}]}
{"image": "ghcr.io/notional-labs/cosmos", "tasks": [{"name": "install tools", "command": "go install golang.org/x/tools/cmd/goimports@latest\ngo install mvdan.cc/gofumpt@latest\nsudo pacman -Syyu clang --noconfirm\nsudo make tools\nsudo bash scripts/proto-tools-installer.sh\n"}]}
{"image": "ghcr.io/notional-labs/cosmos", "tasks": [{"name": "install tools", "command": "go install golang.org/x/tools/cmd/goimports@latest\ngo install mvdan.cc/gofumpt@latest\nsudo pacman -Syyu clang --noconfirm\nsudo make tools\nsudo bash scripts/proto-tools-installer.sh\n"}]}
{"image": "ghcr.io/notional-labs/cosmos", "tasks": [{"name": "install tools", "command": "go install golang.org/x/tools/cmd/goimports@latest\ngo install mvdan.cc/gofumpt@latest\nsudo pacman -Syyu clang --noconfirm\nsudo make tools\nsudo bash scripts/proto-tools-installer.sh\n"}]}
{"image": {"file": "gitpod.Dockerfile"}, "tasks": [{"name": "Welcome message", "init": "echo \"Please run ./bootstrap.sh\""}], "vscode": {"extensions": ["llvm-vs-code-extensions.vscode-clangd", "ms-vscode.cmake-tools", "coenraads.bracket-pair-colorizer-2", "notskm.clang-tidy", "zxh404.vscode-proto3"]}}
{"image": {"file": "gitpod.Dockerfile"}, "tasks": [{"name": "Welcome message", "init": "echo \"Please run ./bootstrap.sh\""}], "vscode": {"extensions": ["llvm-vs-code-extensions.vscode-clangd", "ms-vscode.cmake-tools", "coenraads.bracket-pair-colorizer-2", "notskm.clang-tidy", "zxh404.vscode-proto3"]}}
{"image": {"file": "gitpod.Dockerfile"}, "tasks": [{"name": "Welcome message", "init": "echo \"Please run ./bootstrap.sh\""}], "vscode": {"extensions": ["llvm-vs-code-extensions.vscode-clangd", "ms-vscode.cmake-tools", "coenraads.bracket-pair-colorizer-2", "notskm.clang-tidy", "zxh404.vscode-proto3"]}}
{"image": {"file": "gitpod.Dockerfile"}, "tasks": [{"name": "Welcome message", "init": "echo \"Please run ./bootstrap.sh\""}], "vscode": {"extensions": ["llvm-vs-code-extensions.vscode-clangd", "ms-vscode.cmake-tools", "coenraads.bracket-pair-colorizer-2", "notskm.clang-tidy", "zxh404.vscode-proto3"]}}
{"image": "ghcr.io/faddat/cosmos"}
{"image": "ghcr.io/faddat/cosmos"}
{"image": "ghcr.io/faddat/cosmos"}
{"tasks": [{"init": "go get && go build ./... && go test ./... && make", "command": "go run"}], "vscode": {"extensions": ["golang.go"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "gp await-port 3000 && sleep 3 && gp preview $(gp url 3000)/examples/browser/demo.html"}, {"init": "npm install", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "ignore"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "gp await-port 3000 && sleep 3 && gp preview $(gp url 3000)/examples/browser/demo.html"}, {"init": "npm install", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "ignore"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "gp await-port 3000 && sleep 3 && gp preview $(gp url 3000)/examples/browser/demo.html"}, {"init": "npm install", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "ignore"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"before": "export DANGEROUSLY_DISABLE_HOST_CHECK=true", "init": "yarn install", "command": "yarn start"}]}
{"image": "registry.gitlab.com/gitlab-org/gitlab-development-kit/gitpod-workspace:stable", "checkoutLocation": "gitlab-development-kit/gitlab", "tasks": [{"name": "GDK", "before": "START_UNIXTIME=\"$(date +%s)\"\necho START_UNIXTIME=\"$(date +%s)\" > /workspace/gitpod_start_time.sh\n", "command": "# send signal to other tasks that Gitpod started\ngp sync-done gitpod-start\necho \"Waiting for other task to copy GDK..\"\ngp sync-await gdk-copied && cd /workspace/gitlab-development-kit && gdk help\n"}, {"name": "GitLab", "init": "(\n  set -e\n  echo \"$(date) \u2013 Copying GDK\" | tee -a /workspace/startup.log\n  cp -r $HOME/gitlab-development-kit /workspace/\n  cd /workspace/gitlab-development-kit\n  mv -v /workspace/gitlab-development-kit/secrets.yml /workspace/gitlab-development-kit/gitlab/config\n  # ensure gdk.yml has correct instance settings\n  gdk config set gitlab.rails.port 443  |& tee -a /workspace/startup.log\n  gdk config set gitlab.rails.https.enabled true  |& tee -a /workspace/startup.log\n  gdk config set webpack.host 127.0.0.1  |& tee -a /workspace/startup.log\n  gdk config set webpack.static false  |& tee -a /workspace/startup.log\n  gdk config set webpack.live_reload false  |& tee -a /workspace/startup.log\n  # reconfigure GDK\n  echo \"$(date) \u2013 Reconfiguring GDK\" | tee -a /workspace/startup.log\n  gdk reconfigure\n  # run DB migrations\n  echo \"$(date) \u2013 Running DB migrations\" | tee -a /workspace/startup.log\n  make gitlab-db-migrate\n  # stop GDK\n  echo \"$(date) \u2013 Stopping GDK\" | tee -a /workspace/startup.log\n  gdk stop\n  echo \"$(date) \u2013 GDK stopped\" | tee -a /workspace/startup.log\n)\n", "command": "(\n  set -e\n  gp sync-done gdk-copied\n  gp sync-await gitpod-start\n  [[ -f /workspace/gitpod_start_time.sh ]] && source /workspace/gitpod_start_time.sh\n  SECONDS=0\n  cd /workspace/gitlab-development-kit\n  # update GDK\n  echo \"$(date) \u2013 Updating GDK\" | tee -a /workspace/startup.log\n  export DEFAULT_BRANCH=$(git --git-dir=gitlab/.git branch --show-current)\n  gdk config set gitlab.default_branch \"$DEFAULT_BRANCH\"\n  gdk update\n  # ensure gdk.yml has correct instance settings\n  gdk config set gitlab.rails.hostname $(gp url 3000 | sed -e 's+^http[s]*://++')\n  gdk config set gitlab.rails.port 443\n  gdk config set gitlab.rails.https.enabled true\n  gdk config set webpack.host 127.0.0.1\n  gdk config set webpack.static false\n  gdk config set webpack.live_reload false\n  # reconfigure GDK\n  echo \"$(date) \u2013 Reconfiguring GDK\" | tee -a /workspace/startup.log\n  gdk reconfigure\n  # start GDK\n  echo \"$(date) \u2013 Starting GDK\" | tee -a /workspace/startup.log\n  export DEV_SERVER_PUBLIC_ADDR=$(gp url 3808)\n  export RAILS_HOSTS=$(gp url 3000 | sed -e 's+^http[s]*://++')\n  gdk start\n  # Run DB migrations\n  if [ \"$GITLAB_RUN_DB_MIGRATIONS\" == true ]; then\n    make gitlab-db-migrate\n  fi\n  cd /workspace/gitlab-development-kit/gitlab\n  echo \"--- on branch: $DEFAULT_BRANCH\"\n  echo \"--- installing lefthook\"\n  bundle exec lefthook install\n  echo \"--- resetting db/structure.sql\"\n  git checkout db/structure.sql\n  echo \"--- waiting for GitLab\"\n  gp ports await 3000\n  printf \"Awaiting /-/readiness on $(gp url 3000) ...\"\n  # Check /-/readiness which returns JSON, but we're only interested in the exit code\n  #\n  # We use http://localhost:3000 instead of the public hostname because\n  # it's no longer possible to access as specific cookies are required\n  until curl --silent --no-buffer --fail http://localhost:3000/-/readiness > /dev/null 2>&1; do printf '.'; sleep 5; done && echo \"\"\n  # Give Gitpod a few more seconds to set up everything ...\n  sleep 5\n  printf \"$(date) \u2013 GitLab is up (took ~%.1f minutes)\\n\" \"$((10*$SECONDS/60))e-1\" | tee -a /workspace/startup.log\n  gp preview $(gp url 3000) --external || true\n  PREBUILD_LOG=(/workspace/.gitpod/prebuild-log-*)\n  [[ -f /workspace/gitpod_start_time.sh ]] && printf \"Took %.1f minutes from https://gitlab.com/gitlab-org/gitlab/-/blob/master/.gitpod.yml being executed through to completion %s\\n\" \"$((10*(($(date +%s)-${START_UNIXTIME}))/60))e-1\" \"$([[ -f \"$PREBUILD_LOG\" ]] && echo \"With Prebuilds\")\"\n)\n"}], "ports": [{"port": 2222, "onOpen": "ignore"}, {"port": 3000, "onOpen": "notify"}, {"port": 3005, "onOpen": "notify"}, {"port": 3010, "onOpen": "ignore"}, {"port": 3808, "onOpen": "ignore"}, {"port": 5000, "onOpen": "ignore"}, {"port": 5778, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 9122, "onOpen": "ignore"}], "vscode": {"extensions": ["GitLab.gitlab-workflow", "rebornix.ruby@0.28.1", "wingrunr21.vscode-ruby@0.28.0", "karunamurti.haml@1.4.1", "octref.vetur@0.37.3", "dbaeumer.vscode-eslint@2.4.0", "DavidAnson.vscode-markdownlint@0.49.0", "esbenp.prettier-vscode"]}}
{"tasks": [{"command": "pip3 install -U platformio && platformio run -e tasmota"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["Atishay-Jain.All-Autocomplete", "esbenp.prettier-vscode", "shardulm94.trailing-spaces"]}}
{"tasks": [{"init": "make init"}]}
{"tasks": [{"name": "Show README link and build instructions", "before": "echo \"Try out Selenium Grid in Docker by following https://github.com/SeleniumHQ/docker-selenium#execution-modes\"\necho \"To build all images, run 'make all'. See more instructions at https://github.com/SeleniumHQ/docker-selenium/wiki/Building-your-own-images\"\n"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run start"}], "ports": [{"port": 3001, "onOpen": "ignore"}, {"port": "4000-4999", "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}}
{"image": "gitpod/workspace-mysql:2022-08-04-13-40-17", "ports": [{"port": 3306, "onOpen": "ignore"}, {"port": 8005, "onOpen": "ignore"}, {"port": 8009, "onOpen": "ignore"}, {"port": 8080}, {"port": 8081, "onOpen": "ignore"}, {"port": 8443}], "tasks": [{"command": "# NB MySQL on GitPod.io is currently quite slow.\n# Using authentication_string= instead of password= due to mysql major version difference\nmysql -e \"USE mysql;\\nUPDATE user SET authentication_string=PASSWORD('mysql') WHERE user='root';\\nFLUSH PRIVILEGES;\\n\"\n./gradlew createDB -PdbName=fineract_tenants\n./gradlew createDB -PdbName=fineract_default\n./gradlew build -x test\n", "init": "sdk default java 17.0.4.fx-zulu"}]}
{"tasks": [{"init": "pip install -r requirements.txt"}]}
{"tasks": [{"command": "DOCKER_BUILDKIT=1 ./docker/up.sh --seed\n"}], "ports": [{"port": 3000, "visibility": "public", "onOpen": "open-browser"}, {"port": 5000, "onOpen": "ignore"}, {"port": 5001, "onOpen": "ignore"}, {"port": 5432, "onOpen": "ignore"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"init": "rustup default 1.67.0\ncargo test --no-run\ncargo install cargo-insta\ncargo install git-branchless && git branchless init\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"image": "gitpod/workspace-full", "tasks": [{"init": "echo \"TODO: Replace with init/build command\"", "command": "echo \"TODO: Replace with command to start project\""}]}
{"tasks": [{"name": "App", "init": "npm install", "command": "npm run start", "openMode": "split-left"}, {"name": "Test", "command": "npm run test", "openMode": "split-right"}, {"name": "Set up email", "command": "clear\nprintf \"\\n\\n\\n\"\nprintf \"\\u001b[36;1mAutofilling Email\\u001b[0m\\n\"\nprintf \"\\u001b[2;1mEach exercise comes with a elaboration form to help your retention. Providing your email now will mean you don't have to provide it each time you fill out the form.\\u001b[0m\\n\"\nnpx \"https://gist.github.com/kentcdodds/2d44448a8997b9964b1be44cd294d1f5\" \\\n  && exit 0\n"}], "ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}], "vscode": {"extensions": ["VisualStudioExptTeam.vscodeintellicode", "dbaeumer.vscode-eslint", "formulahendry.auto-rename-tag", "esbenp.prettier-vscode", "ms-azuretools.vscode-docker"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false}}}
{"image": "nfcore/gitpod:latest", "tasks": [{"name": "install current state of nf-core/tools and setup pre-commit", "command": "python -m pip install -e .\npython -m pip install -r requirements-dev.txt\npre-commit install --install-hooks\nnextflow self-update\n"}], "vscode": {"extensions": ["codezombiech.gitignore", "esbenp.prettier-vscode", "eamodio.gitlens", "EditorConfig.EditorConfig", "Gruntfuggly.todo-tree", "mechatroner.rainbow-csv", "oderwat.indent-rainbow", "streetsidesoftware.code-spell-checker"]}}
{"tasks": [{"init": "pip install -r requirements.txt && pip install -e ."}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}, "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 6080, "onOpen": "open-preview"}, {"port": 5900, "onOpen": "ignore"}, {"port": 3343, "onOpen": "ignore"}], "tasks": [{"init": "mvn install\n", "command": "cd phoenicis-javafx/ && mvn exec:java\n"}]}
{"tasks": [{"init": "yarn install\nyarn test\n", "command": "DANGEROUSLY_DISABLE_HOST_CHECK=true yarn start-with-mock-data"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 4000, "onOpen": "ignore"}]}
{"tasks": [{"command": "npm install"}]}
{"image": {"file": ".gitpod/gitpod.Dockerfile"}, "tasks": [{"name": "install pre-commit git hooks", "init": "pre-commit install"}, {"name": "Bazel", "before": "./.gitpod/gitpod-init.sh", "init": "bazel build //...\n"}], "vscode": {"extensions": ["BazelBuild.vscode-bazel", "Ionide.Ionide-fsharp", "muhammad-sammy.csharp", "timonwong.shellcheck"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": false}}}
{"tasks": [{"init": "pip install robotframework\n", "command": "python -m pip install --upgrade pip\npip install -r Browser/dev-requirements.txt\ninv deps\nnpx --yes playwright install-deps\ninv build\npip install -e .\n"}], "image": "gitpod/workspace-full-vnc", "ports": [{"port": 6080, "onOpen": "open-preview"}], "vscode": {"extensions": ["ms-python.python", "d-biehl.robotcode", "eamodio.gitlens", "dbaeumer.vscode-eslint"]}}
{"image": "ghcr.io/notional-labs/cosmos"}
{"image": "nfcore/gitpod:latest", "tasks": [{"name": "Initialize", "init": "pip install graphviz\n. /opt/conda/etc/profile.d/conda.sh\nconda activate base\nmamba create -n bactopia-dev -y -q -c rpetit3 -c conda-forge -c bioconda bactopia\nconda activate bactopia-dev\ngit checkout dev\n"}], "vscode": {"extensions": ["codezombiech.gitignore", "cssho.vscode-svgviewer", "davidanson.vscode-markdownlint", "eamodio.gitlens", "EditorConfig.EditorConfig", "Gruntfuggly.todo-tree", "mechatroner.rainbow-csv", "nextflow.nextflow", "oderwat.indent-rainbow", "streetsidesoftware.code-spell-checker", "anwar.papyrus-pdf"]}}
{"github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false}}, "image": {"file": ".devcontainer/Dockerfile"}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "ms-vscode.cpptools-extension-pack", "esbenp.prettier-vscode"]}}
{"tasks": [{"init": "yarn install && yarn run build"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "pnpm install", "command": "pnpm start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "set +x; clear", "command": "set +x;clear\njava -version\n"}]}
{"image": "gitpod/workspace-full", "tasks": [{"name": "examples", "init": "yarn install && yarn link && cd examples/ && yarn install && yarn link react-xarrows && npm link ../node_modules/react", "command": "yarn start"}, {"name": "ts watch", "command": "tsc -w"}], "vscode": {"extensions": ["esbenp.prettier-vscode@6.3.2:13e527ae62035854197198eedd2bc84f", "streetsidesoftware.code-spell-checker@1.10.4:92856cb92ade23ff2764841b46d2fac2"]}}
{"github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "image": "gitpod/workspace-dotnet", "tasks": [{"init": "dotnet build IdentityServer4.PhoneNumberAuth.sln\n"}], "vscode": {"extensions": ["muhammad-sammy.csharp"]}}
{"tasks": [{"name": "Install Hugo, init submodules and start website", "init": "curl -LO https://github.com/gohugoio/hugo/releases/download/v0.110.0/hugo_extended_0.110.0_linux-amd64.deb && \\\nsudo dpkg -i hugo_extended_0.110.0_linux-amd64.deb && \\\nsudo rm hugo_extended_0.110.0_linux-amd64.deb\n", "command": "cd website_and_docs\nhugo server --baseUrl $(gp url 1313) --appendPort=false\n"}], "ports": [{"port": 1313, "onOpen": "open-preview"}]}
{"image": {"file": "docker/.gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": true, "addBadge": false, "addLabel": false}}}
{"tasks": [{"name": "Installing node packages", "init": "npm ci", "command": "npm run dev"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "Run Utopia Docker Stack", "init": "docker compose pull\ndocker compose build\n", "command": "docker run --rm --interactive --tty \\\n--volume $PWD:/app \\\ncomposer update \\\n--ignore-platform-reqs \\\n--optimize-autoloader \\\n--no-plugins \\\n--no-scripts \\\n--prefer-dist\n"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}, "github": {"prebuilds": {"pullRequestsFromForks": true, "addCheck": false}}}
{"image": "eclipse-temurin:17-jdk"}
{"image": {"file": ".docker/Dockerfile"}, "ports": [{"port": 8080}], "tasks": [{"init": "npm install"}], "github": {"prebuilds": {"pullRequestsFromForks": true, "addComment": true}}, "vscode": {"extensions": ["christian-kohler.path-intellisense", "mrmlnc.vscode-scss", "Ionide.Ionide-fsharp"]}}
{"github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true, "addComment": true}}, "tasks": [{"name": "install & run", "env": {"PORT": 8080}, "init": "cd ..\ngit clone https://github.com/module-federation/aegis\ngit clone https://github.com/module-federation/aegis-host\ncd aegis\nyarn\nyarn build\ncd ../aegis-app\nyarn\nyarn build\ncd ../aegis-host\nyarn\n", "command": "cd ../aegis-app\nnohup node repo.js 8000 dist &\nnohup node repo.js 8001 cache &\ncd ../aegis\nyarn link\ncd ../aegis-host\nyarn link @module-federation/aegis\nyarn build\ngp sync-done ready\nnode --title aegis src/bootstrap.js | tee public/aegis.log\n"}, {"name": "service mesh", "env": {"PORT": 8888, "SWITCH": true}, "command": "gp sync-await ready\ncd ../aegis-host\nnode --title webswitch src/bootstrap.js | tee public/webswitch.log\n"}, {"name": "mongodb", "command": "gp sync-await ready\ncd ../aegis\n./mongo.sh\n"}, {"name": "watch core", "command": "gp ports await 8080\ncd ../aegis\nnode watch.mjs\n"}, {"name": "watch app", "command": "gp ports await 8080\ncd ../aegis-app\nnode watch.mjs\n"}], "workspaceLocation": "aegis-app/aegis-app.code-workspace", "ports": [{"port": 8000, "description": "local repo", "visibility": "public", "onOpen": "ignore"}, {"port": 8001, "description": "cache repo", "visibility": "public", "onOpen": "ignore"}, {"port": 8080, "description": "http api", "visibility": "public", "onOpen": "open-preview"}, {"port": 8888, "description": "webswitch", "visibility": "public", "onOpen": "open-browser"}, {"port": 27017, "description": "mongodb", "visibility": "public", "onOpen": "ignore"}, {"port": 5353, "description": "multicast dns", "visibility": "public", "onOpen": "ignore"}]}
{"tasks": [{"init": "nvm install --latest-npm && npm i -g @sasjs/cli && npm i"}], "image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["sasjs.sasjs-for-vscode"]}}
{"tasks": [{"init": "rustup uninstall stable\nrustup install stable --profile default\nGEN=ninja make debug\n", "command": "cargo watch -x build"}]}
{"ports": [{"port": 3000}], "tasks": [{"init": "npm install;", "command": "npm i gatsby-cli -g; npm i now -g; npm run start\n"}]}
{"tasks": [{"name": "Dev Server", "init": "nvm install --lts\nnpm install\n", "command": "npm run serve"}], "ports": [{"port": 8888, "onOpen": "open-browser"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn dev"}]}
{"tasks": [{"name": "Go Server", "init": "go mod download", "command": "go build .\n./candy\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"checkoutLocation": "tutorial/seqan3", "workspaceLocation": "/tutorial", "tasks": [{"name": "Setup", "before": "mkdir -p build source && cd seqan3 && git submodule update --init", "init": "HOMEBREW_NO_INSTALL_CLEANUP=1 HOMEBREW_NO_ENV_HINTS=1 brew install cmake gcc@12 tree", "command": "echo && echo \"GCC 12 available via g++-12\" && echo && echo \"g++-12 --version\" && g++-12 --version"}]}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false}}, "tasks": [{"name": "main terminal", "init": "cp ./.env.gitpod ./.env\nmysqladmin create greencheck\npython -m pipenv install --dev\npython -m pipenv run python ./manage.py migrate\npython -m pipenv run python ./manage.py tailwind install\npython -m pipenv run python ./manage.py tailwind build\ncd ./apps/theme/static_src/\nnpx rollup --config\ncd ../../../\npython -m pipenv run python ./manage.py collectstatic --no-input\n", "command": "ls"}, {"name": "rabbitmq", "command": "docker run  --hostname green-rabbit  -p 5672:5672  --rm   --name green-rabbit  rabbitmq:3\n"}, {"name": "redis", "command": "docker run   --rm --name green-redis -p 6379:6379 redis:6\n"}, {"name": "mailhog", "command": "docker run --rm --name green-mailhog -p 8025:8025 -p 1025:1025 mailhog/mailhog\n"}, {"name": "tailwind", "command": "echo \"to run tailwind, type: make dev.tailwind.start\"\n"}], "ports": [{"port": 8000, "onOpen": "ignore"}, {"port": 6379, "onOpen": "ignore"}, {"port": 5672, "onOpen": "ignore"}, {"port": 3306, "onOpen": "ignore"}, {"port": 8025, "onOpen": "ignore"}, {"port": "30000-50000", "onOpen": "ignore"}], "vscode": {"extensions": ["ms-python.python", "eamodio.gitlens"]}}
{"tasks": [{"init": "npm install", "command": "npm run start"}], "image": {"file": ".gitpod.Dockerfile"}}
{"image": "openjdk:8", "vscode": {"extensions": ["scala-lang.scala@0.3.9:kklqw+c/dNRmtTU8B5repw==", "scalameta.metals@1.9.0:PtE/gdeE1YPL6It4tEfqpg=="]}, "tasks": [{"init": "source ./gitpod_init.sh"}, {"command": "source ./gitpod_command.sh"}]}
{"tasks": [{"command": "pip3 install -r requirements.txt && wget https://github.com/gdrive-org/gdrive/releases/download/2.1.0/gdrive-linux-x64 && mv gdrive-linux-x64 gdrive && chmod +x gdrive\n"}]}
{"vscode": {"extensions": ["streetsidesoftware.code-spell-checker", "anwar.papyrus-pdf", "eamodio.gitlens", "vscode-icons-team.vscode-icons", "esbenp.prettier-vscode", "redhat.vscode-yaml", "vscodevim.vim"]}}
{"image": "acgetchell/vcpkg-image", "tasks": [{"init": "vcpkg install --feature-flags=manifests\n"}]}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "shashin.py browse"}], "ports": [{"port": 8000, "onOpen": "open-preview"}], "image": {"file": ".gitpod.Dockerfile"}}
{"image": "gitpod/workspace-full-vnc", "ports": [{"port": 3000}], "tasks": [{"command": "npm ci && .theia/.bash_profile"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "sudo apt -y install gfortran libopenmpi3 libopenmpi-dev\nmkdir /workspace/python\npython -m venv /workspace/python/emu --system-site-packages\nsource /workspace/python/emu/bin/activate\npip install sympy numpy matplotlib\n\npushd Scripts/visualization\npython setup.py install\npopd\n\ncd Exec\n\nmake generate NUM_FLAVORS=2\nmake -j NUM_FLAVORS=2\nmkdir 2-Flavors\nmv *.ex 2-Flavors/.\npushd 2-Flavors\n\nmkdir bipolar\npushd bipolar\ncp ../*.ex .\ncp ../../../sample_inputs/inputs_bipolar_test .\ncp ../../../Scripts/visualization/plot_first_particle.py .\npopd\n\nmkdir msw\npushd msw\ncp ../*.ex .\ncp ../../../sample_inputs/inputs_msw_test .\ncp ../../../Scripts/visualization/plot_first_particle.py .\npopd\n\nmkdir FFI_zero_wavenumber\npushd FFI_zero_wavenumber\ncp ../*.ex .\ncp ../../../sample_inputs/inputs_fast_flavor .\npopd\n\nmkdir FFI\npushd FFI\ncp ../*.ex .\ncp ../../../sample_inputs/inputs_fast_flavor_nonzerok .\npopd\n\npopd\n\nmake realclean\nmake generate NUM_FLAVORS=3\nmake -j NUM_FLAVORS=3\nmkdir 3-Flavors\nmv *.ex 3-Flavors/.\npushd 3-Flavors\n\nmkdir FFI\npushd FFI\ncp ../*.ex .\ncp ../../../sample_inputs/inputs_1d_fiducial .\npopd\n\npopd\n\nmake realclean\n\nmkdir Examples\nmv 2-Flavors Examples/.\nmv 3-Flavors Examples/.\nmv Examples ../.\n\nclear"}, {"command": "source /workspace/python/emu/bin/activate\nclear"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": true, "addComment": true, "addBadge": true, "addLabel": false}}}
{"image": "ghcr.io/graphprotocol/substreams-gitpod:latest", "tasks": [{"command": "# Authenticate with the substreams server\nexport SUBSTREAMS_API_TOKEN=$(curl https://auth.dfuse.io/v1/auth/issue -s --data-binary '{\"api_key\":\"'$STREAMINGFAST_KEY'\"}' | jq -r .token)\n"}], "ports": [{"port": 6060, "onOpen": "ignore"}, {"port": 1065, "onOpen": "ignore"}]}
{"tasks": [{"init": "yarn install", "command": "yarn run start"}]}
{"vscode": {"extensions": ["Equinusocio.vsc-material-theme@30.0.0:jLnow3ETY7xdd9AGv2qHHA=="]}}
{"tasks": [{"init": "npm install -g npm"}, {"command": "npm i && npm run build && npm i -g @sasjs/cli"}], "image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["sasjs.sasjs-for-vscode", "ritwickdey.liveserver"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "addCheck": true, "addComment": false}}}
{"tasks": [{"init": "npm ci"}]}
{"tasks": [{"init": "pip3 install -r requirements.txt\npip3 install torch==1.9.1+cpu torchvision==0.10.1+cpu torchaudio==0.9.1 -f https://download.pytorch.org/whl/torch_stable.html\n", "command": "echo 'start script'"}], "ports": [{"port": 8081, "onOpen": "open-preview"}]}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz -O - | tar -xz -C .\nsudo cp binaryen-version_110/bin/wasm-opt /usr/bin/\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}], "vscode": {"extensions": ["betterthantomorrow.calva"]}, "tasks": [{"name": "Prepare deps", "init": "clojure -P -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"0.8.3\"},cider/cider-nrepl {:mvn/version,\"0.26.0\"}}}'"}, {"name": "Open README", "command": "open -g README.md"}]}
{"image": {"file": ".gitpod/Dockerfile", "context": ".gitpod"}, "ports": [{"port": 8080}, {"port": 3306, "onOpen": "ignore"}], "tasks": [{"name": "Apache", "command": "apachectl start\nmultitail /var/log/apache2/access.log -I /var/log/apache2/error.log\n"}, {"name": "Terminal", "command": "clear\n$GITPOD_REPO_ROOT/.gitpod/bootstrap.sh\necho \"\"\necho \"Commands you can try:\"\necho \" * apachectl stop\"\necho \" * apachectl start\"\necho \" * gp open /var/log/apache2/access.log\"\necho \" * gp open /var/log/apache2/error.log\"\necho \" * gp preview $(gp url 8080)\"\necho \" * sh .gitpod/mysql-restart.sh\"\necho \" * joomla site:delete ${APACHE_DOCROOT_IN_REPO} --www=$GITPOD_REPO_ROOT --mysql-login=root:;\necho \" * $GITPOD_REPO_ROOT/.gitpod/bootstrap.sh\n"}]}
{"tasks": [{"name": "Setup Dev", "before": "sudo wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\nsudo echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\nsudo mkdir -p /data/db\nsudo chown -R gitpod:gitpod /data\nsudo apt update && sudo apt install -y mongodb-org\n", "init": "eval $(gp env -e)\ngo get -u ./...\nmake build-linux\n"}], "jetbrains": {"intellij": {"plugins": ["org.jetbrains.plugins.go"], "prebuilds": {"version": "both"}}}}
{"tasks": [{"init": "cargo build", "command": "cargo test"}]}
{"tasks": [{"name": "Setup", "init": "cp -r contrib/ide/vscode .vscode\nmake deps\nmake build\n", "command": "gp sync-done setup\nexit 0\n"}, {"name": "Run frontend", "command": "gp sync-await setup\nmake watch-frontend\n"}, {"name": "Run backend", "command": "gp sync-await setup\nmkdir -p custom/conf/\necho -e \"[server]\\nROOT_URL=$(gp url 3000)/\" > custom/conf/app.ini\necho -e \"\\n[database]\\nDB_TYPE = sqlite3\\nPATH = $GITPOD_REPO_ROOT/data/gitea.db\" >> custom/conf/app.ini\nexport TAGS=\"sqlite sqlite_unlock_notify\"\nmake watch-backend\n"}, {"name": "Run docs", "before": "sudo bash -c \"$(grep 'https://github.com/gohugoio/hugo/releases/download' Makefile | tr -d '\\')\"", "command": "cd docs && make clean update && hugo server -D -F --baseUrl $(gp url 1313) --liveReloadPort=443 --appendPort=false --bind=0.0.0.0"}], "vscode": {"extensions": ["editorconfig.editorconfig", "dbaeumer.vscode-eslint", "golang.go", "stylelint.vscode-stylelint", "DavidAnson.vscode-markdownlint", "johnsoncodehk.volar", "ms-azuretools.vscode-docker", "zixuanchen.vitest-explorer", "alexcvzz.vscode-sqlite"]}, "ports": [{"name": "Gitea", "port": 3000}, {"name": "Docs", "port": 1313}]}
{"vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-debug", "vscjava.vscode-java-test", "pivotal.vscode-spring-boot"]}}
{"tasks": [{"init": "yarn", "command": "yarn start"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser", "visibility": "public"}], "tasks": [{"command": "BACKENDURL=$(gp url 3000) npm run dev"}, {"init": "npm i npm@latest -g && npm ci && cp server-middleware/credentials.gitpod.js server-middleware/credentials.js"}], "vscode": {"extensions": ["vtrois.gitmoji-vscode", "esbenp.prettier-vscode", "octref.vetur", "bradlc.vscode-tailwindcss", "github.github-vscode-theme", "eamodio.gitlens"]}}
{"tasks": [{"init": "yarn install && yarn build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust-analyzer@0.3.1348"]}}
{"tasks": [{"command": "npx browser-sync start -s -w", "name": "Server"}]}
{"tasks": [{"init": "sudo apt-get -y install universal-ctags"}, {"init": "curl -SL https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2022-07-23/oss-cad-suite-linux-x64-20220723.tgz | tar -xzC /workspace", "command": "export PATH=/workspace/oss-cad-suite/bin:$PATH"}], "vscode": {"extensions": ["mshr-h.veriloghdl@1.5.3"]}}
{"image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["learn-pack.learnpack-vscode"]}, "ports": [{"port": 3000, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 22}]}
{"tasks": [{"init": "echo \"Gitpod init. Setting up peerjs-python dev environment.\"\npyenv global system\npip3 install -e ./src\n", "command": "pyenv global system\necho \"Started peerjs-python development environment.\"\necho \"To run the peerjs-python testsuite use:\"\necho \"python3 -m pytest --cov=peerjs --cov-report=term tests/\"\necho \"To start peerjs http_proxy service use:\"\necho \"python3 -m peerjs.ext.http_proxy\"\n"}]}
{"image": "erlang:22.2.7", "vscode": {"extensions": ["erlang-ls.erlang-ls@0.0.11:LP8pbQuwxtiTrGIO84ngGw=="]}}
{"tasks": [{"init": "sudo apt-get update\nsudo apt-get install -y expect\nnpm install \n", "command": "node --inspect-brk dockerproxy.js setup"}, {"command": "cd test && bats test.bats"}], "ports": [{"port": 9299, "onOpen": "ignore"}]}
{"image": "nberlette/gitpod-enhanced:latest", "tasks": [{"before": "pnpm install", "init": "pnpm add -g degit tsm typescript @types/node", "command": "pnpm dev"}], "ports": [{"port": "3000-5000", "onOpen": "open-preview", "visibility": "private"}], "gitConfig": {"tag.gpgsign": "true", "commit.gpgsign": "true", "user.name": "Nicholas Berlette", "user.email": "nick@berlette.com", "user.signingkey": "0DCD135F"}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addLabel": true, "addBadge": true, "addCheck": true}}, "vscode": {"extensions": ["github.copilot-nightly", "vsls-contrib.gistfs", "eamodio.gitlens", "antfu.browse-lite", "mrmlm.vscode-scss", "svelte.svelte-vscode", "RafaelMartinez.svelte-preview", "fivethree.vscode-svelte-snippets", "antfu.vite", "voorjaar.windicss-intellisense", "timonwong.shellcheck", "mads-hartmann.bash-ide-vscode", "foxundermoon.shell-format", "redhat.vscode-yaml", "DotJoshJohnson.xml", "Jacano.vscode-pnpm", "gamunu.vscode-yarn", "christian-kohler.npm-intellisense", "christian-kohler.path-intellisense", "editorconfig.editorconfig", "esbenp.prettier-vscode", "dbaeumer.vscode-eslint", "DavidAnson.vscode-markdownlint", "yzhang.markdown-all-in-one", "PKief.markdown-checkbox", "TakumiI.markdowntable", "jock.svg"]}}
{"image": "nextstrain/base:latest", "tasks": [{"command": "nextstrain check-setup --set-default\nclear\n"}]}
{"image": "gitpod/workspace-dotnet", "vscode": {"extensions": ["Ionide.Ionide-fsharp@4.9.0:LjU41ecQ08JRNp8EaiYysQ==", "ms-dotnettools.csharp@1.21.17:5/iI88WHX4j3iL5jASDTYQ=="]}}
{"tasks": [{"name": "Dev Server", "before": "npm install && clear", "init": "npm run dev -- -p 6500"}, {"name": "Git", "init": "git status -s"}], "ports": [{"port": 6500, "onOpen": "notify", "visibility": "public"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "esbenp.prettier-vscode", "eamodio.gitlens", "bradlc.vscode-tailwindcss", "redhat.vscode-xml", "dsznajder.es7-react-js-snippets", "usernamehw.errorlens", "formulahendry.auto-rename-tag", "PKief.material-icon-theme", "Equinusocio.vsc-material-theme"]}}
{"image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "hugo", "command": "hugo serve --baseUrl $(gp url 1313) --appendPort=false --verbose --enableGitInfo -d _site --buildFuture --buildDrafts --gc --watch"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"before": "mkdir -p ~/.ssh && echo $SSH_PUBLIC_KEY > ~/.ssh/id_rsa.pub && chmod 644 ~/.ssh/id_rsa.pub && echo $SSH_PRIVATE_KEY > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa"}]}
{"mainConfiguration": "https://github.com/SU-SWS/ace-sulgryphon", "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": true}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pip3 install --upgrade conan && pre-commit install -f --hook-type pre-commit"}]}
{"tasks": [{"init": "go get -d ./...", "command": "brew install go-task/tap/go-task\ncurl -fsSL https://cutt.ly/tran-cli | bash\n"}]}
{"image": "gitpod/workspace-full", "tasks": [{"name": "Download go modules", "init": "go mod download"}, {"name": "Install dependencies", "init": "go install github.com/bufbuild/buf/cmd/buf@v1.9.0\n"}], "vscode": {"extensions": ["golang.go", "zxh404.vscode-proto3"]}}
{"tasks": [{"name": "Install dependency & Start hugo server", "before": "git submodule update --init --recursive\nnpm install\ncd themes/docsy/ && npm install && cd ../../\nnpm install -g hugo-extended\n", "command": "hugo server --disableFastRender --bind=0.0.0.0 --port=1313 --baseURL=$(gp url 1313) --appendPort=false"}], "ports": [{"port": 1313, "onOpen": "open-browser", "visibility": "public"}]}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "cp .env.example .env; pipenv install; mysql -u root -e \"CREATE DATABASE example\"; pipenv run init; pipenv run migrate; pipenv run upgrade; pipenv run start;\n"}, {"command": "python3 welcome.py"}]}
{"github": {"prebuilds": {"main": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}, "tasks": [{"init": "npm install", "command": "gp open readme.md .\nnpm run edit\n"}, {"name": "Dev Server", "command": "npx browser-sync start --server \"docs\" --files \"docs\" --no-ui"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "echo \"sdkman_auto_answer=true\" >> $HOME/.sdkman/etc/config\nsdk install java 17.0.8-tem\nsdk install sbt\nsbt \"Test / compile\"\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "cd capstone-backend; mvn package appengine:stage"}, {"command": "cd capstone-frontend; npm install; npm run build"}, {"command": "curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-299.0.0-linux-x86_64.tar.gz; tar zxvf google-cloud-sdk-299.0.0-linux-x86_64.tar.gz google-cloud-sdk; rm -r google-cloud-sdk-299.0.0-linux-x86_64.tar.gz; ./google-cloud-sdk/install.sh; echo -e \"To initialize gcloud, Open a new Terminal (Terminal -> New Terminal) and enter 'gcloud init'\\n\\n\""}], "vscode": {"extensions": ["dsznajder.es7-react-js-snippets@2.7.1:adU40EmL4YfIciiaLc7LVQ=="]}}
{"tasks": [{"name": "Install", "init": "npm install && gp sync-done install\n"}, {"name": "Run Webpack", "init": "gp sync-await install", "command": "npm start"}, {"name": "Editor server", "init": "gp sync-await install", "command": "npm run editor-remote"}], "ports": [{"port": 1959, "onOpen": "open-preview"}]}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo apt install cmake -y\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"tasks": [{"init": "nvm i v18 && yarn install && yarn run build", "command": "yarn run dev"}]}
{"tasks": [{"init": "poetry install && poetry shell"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"name": "Get Core & Configure", "before": "wget https://downloads.lambdatest.com/hyperexecute/linux/hyperexecute\nchmod u+x hyperexecute\n", "init": "echo \"Performing test\"\n./hyperexecute --user=$LT_USERNAME --key=$LT_ACCESS_KEY --config yaml/win/.hyperexecute_autosplit.yaml --download-artifacts --force-clean-artifacts\necho \"Test completion\""}]}
{"tasks": [{"init": "yarn"}], "github": {"prebuilds": {"addCheck": true, "addComment": true}}}
{"image": {"file": "Dockerfile"}, "tasks": [{"init": "yarn install", "command": "yarn start"}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "vscode": {"extensions": ["rocketseat.RocketseatReactJS@2.2.0:CMZI2JF+9mcg15CoJkRPOQ==", "dbaeumer.vscode-eslint@2.0.15:/v3eRFwBI38JLZJv5ExY5g==", "ricardo-emerson.react-development-extensions-pack@1.4.2:ZR9UKwg+vEw6gEStbxk8sw==", "EditorConfig.EditorConfig@0.14.5:DTIJHHNrM36zsvYRBOY3ow=="]}}
{"image": {"file": "Dockerfile"}, "ports": [{"port": 4444, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}, {"port": 5900, "onOpen": "ignore"}], "tasks": [{"command": "npm install"}]}
{"tasks": [{"init": "sudo apt install libvulkan-dev && rustup component add rustfmt && rustup component add clippy"}], "vscode": {"extensions": ["serayuzgur.crates", "rust-lang.rust-analyzer", "bungcip.better-toml", "vadimcn.vscode-lldb", "DavidAnson.vscode-markdownlint"]}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"name": "Flutter env prep", "before": "flutter pub get\n"}], "ports": [{"port": 5900, "onOpen": "ignore", "name": "VNC Server"}, {"port": 6080, "onOpen": "ignore", "name": "VNC Client", "description": "noVNC web client"}, {"port": 8080, "onOpen": "ignore", "name": "Flutter Web", "visibility": "public"}, {"port": "9100-9199", "name": "Flutter DevTools", "onOpen": "ignore"}, {"port": "40000-50000", "onOpen": "ignore", "name": "Flutter Internals"}, {"port": 5037, "onOpen": "ignore", "name": "ADB"}, {"port": 6000, "onOpen": "ignore", "name": "Appetize SSH Tunnel"}], "vscode": {"extensions": ["dart-code.flutter", "dart-code.dart-code", "editorconfig.editorconfig", "ms-azuretools.vscode-docker"]}}
{"image": "corise/dbt-course-gitpod", "tasks": [{"command": "sudo /etc/init.d/postgresql start && mkdir -p /workspace/.dbt && ln -snf /workspace/.dbt ~/.dbt && export PGPASSWORD=corise PGUSER=corise PGDATABASE=dbt"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "runserver", "init": "gp sync-await prebuild\n", "command": "poetry run python manage.py runserver"}, {"name": "console", "init": "if [ ! -f pyproject.toml ]; then\npoetry init -n\npoetry add django\npoetry run django-admin startproject config .\nsed -i \"s/ALLOWED_HOSTS = \\[\\]/ALLOWED_HOSTS = \\[\\\"localhost\\\"\\]\\nCSRF_TRUSTED_ORIGINS = \\[\\\"https:\\/\\/*.ws-us72.gitpod.io\\\"\\]/g\" config/settings.py\nsed -i \"s/UTC/Asia\\/Seoul/g\" config/settings.py\nelse\npoetry update\nfi\nif [ ! -s db.sqlite3 ]; then\npoetry run python manage.py migrate\nclear && echo \"Create Admin account:\"\npoetry run python manage.py createsuperuser\nfi\n", "command": "gp sync-done prebuild\nclear && gp ports await 8000\ngp preview $(gp url 8000) --external\n"}], "ports": [{"port": 8000, "visibility": "private", "onOpen": "notify"}], "vscode": {"extensions": ["ms-python.python"]}}
{"ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 10000, "onOpen": "ignore"}], "tasks": [{"init": "npm install", "command": "echo \"Applying a temporary workaround until https://github.com/vitejs/vite/pull/1992 is fixed\"\n(\n  cd ./node_modules/vite/dist/node/chunks/ &&\n  sed -i 's/JSON.stringify(port)/JSON.stringify(443)/g' * &&\n  export WSS_HOST=`gp url 24678 | sed 's#https://##g'` &&\n  sed -i \"s#JSON.stringify(host)#JSON.stringify(\\\"$WSS_HOST\\\")#g\" *\n)\nnpm run dev\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "vscode": {"extensions": ["svelte.svelte-vscode", "bradlc.vscode-tailwindcss"]}}
{"tasks": [{"name": "Welcome", "before": "echo \"Use this virtual environment to complete the steps in the tutorial.\""}]}
{"image": {"file": ".devcontainer/Dockerfile"}, "tasks": [{"init": "npm install && npm run build\n"}, {"command": "npm start\n"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "hbenl.test-adapter-converter", "hbenl.vscode-test-explorer", "elmtooling.elm-ls-vscode"]}}
{"tasks": [{"init": "npm install -g lambdatest-cypress-cli", "command": "lambdatest-cypress run"}]}
{"github": {"prebuilds": {"pullRequestsFromForks": true}}, "vscode": {"extensions": ["ms-vscode.makefile-tools", "james-yu.latex-workshop", "editorconfig.editorconfig"]}, "tasks": [{"before": "sudo apt update && sudo apt install -y texlive texlive-latex-extra"}, {"before": "pip install -U pip poetry", "init": "poetry install"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run start"}], "ports": [{"port": 8080, "onOpen": "ignore"}, {"port": 3000, "onOpen": "open-preview"}, {"port": 4445, "onOpen": "notify"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "echo \"export PUPPETEER_CACHE_DIR=/workspace/eslint-config/node_modules/.cache/puppeteer\" >> /home/gitpod/.bashrc\ngitpod-env-per-project >> /home/gitpod/.bashrc && source /home/gitpod/.bashrc", "init": "git config --global user.name \"Sebastian Landwehr\"\ngit config diff.lfs.textconv cat\ngit lfs pull\nyarn --frozen-lockfile"}], "vscode": {"extensions": ["https://sebastianlandwehr.com/vscode-extensions/karlito40.fix-irregular-whitespace-0.1.1.vsix", "https://sebastianlandwehr.com/vscode-extensions/adrianwilczynski.toggle-hidden-1.0.2.vsix", "octref.vetur@0.33.1", "Tobermory.es6-string-html", "zjcompt.es6-string-javascript"]}}
{"tasks": [{"name": "Gitbook", "before": "cd ./gitbook", "init": "npm install", "command": "npm run book", "openIn": "right"}, {"name": "Main UI", "init": "npm install", "command": "npm run boot", "openIn": "right", "openMode": "tab-after"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.1.1:DO6k4GCpqhwZcKo+jY9xjQ==", "esbenp.prettier-vscode@3.20.0:37/f4uBlE287wUjENFq1aA==", "mikestead.dotenv@1.0.1:SSXjr5hZcbqSF7nMIhTNnA==", "wayou.vscode-todo-highlight@1.0.4:8IqxuxCVol2WnScJc5xVzg=="]}, "ports": [{"port": 4000, "onOpen": "ignore"}, {"port": 35729, "onOpen": "ignore"}]}
{"tasks": [{"before": "curl -fsSL https://deno.land/x/install/install.sh | sh\nexport DENO_INSTALL=\"/home/gitpod/.deno\"\nexport PATH=\"$DENO_INSTALL/bin:$PATH\"\n"}], "vscode": {"extensions": ["denoland.vscode-deno"]}}
{"ports": [{"port": 8050, "onOpen": "open-preview"}, {"port": 8888, "onOpen": "open-browser"}], "image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "chmod +x envconfig.sh && ./envconfig.sh\n"}, {"command": "export CMAKE_PREFIX=/opt/conda\n"}], "vscode": {"extensions": ["ms-vscode.cmake-tools", "twxs.cmake", "cschlosser.doxdocgen", "matklad.rust-analyzer"]}}
{"github": {"prebuilds": {"pullRequestsFromForks": true, "addComment": true}}, "tasks": [{"name": "run docker", "command": "sudo docker-up &"}, {"command": "echo \"source /usr/share/bash-completion/completions/git\" >> $HOME/.bashrc"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.1.5:9Wg0Glx/TwD8ElFBg+FKcQ=="]}}
{"tasks": [{"init": "go get && go build ./... && go test ./...", "command": "go run"}]}
{"vscode": {"extensions": ["philsinatra.popping-and-locking-vscode-black@1.1.7:9ATXO4H+slSkAIB8QPoRUg==", "steoates.autoimport@1.5.3:ssEPucpXsRjqSbJX1bW0YA==", "oderwat.indent-rainbow@7.4.0:nth8lnJRnQu9NcWvNc9KPA==", "dsznajder.es7-react-js-snippets@2.6.0:NOQZR885dDDgg5u9iE3Cmg=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Main term", "init": "ddev start -y\nddev composer install\nddev exec \"cat .env.example | sed  -E 's/DB_(HOST|DATABASE|USERNAME|PASSWORD)=(.*)/DB_\\1=db/g' > .env\"\nddev exec \"php artisan key:generate && php artisan migrate --seed\"\nbash .gp/set-env.sh\n", "command": "ddev start -y\ngp sync-done start\n"}, {"name": "Mix", "init": "nvm install node --latest-npm && npm i\n", "command": "gp sync-await start && npx mix watch\n", "openMode": "split-right"}], "ports": [{"port": 3306, "onOpen": "ignore"}, {"port": 6942, "onOpen": "ignore"}, {"port": 8027, "onOpen": "ignore"}, {"port": 8036, "onOpen": "ignore"}, {"port": 8080, "onOpen": "ignore"}, {"port": 8443, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 9999, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}, "vscode": {"extensions": ["felixfbecker.php-debug", "bmewburn.vscode-intelephense-client", "bradlc.vscode-tailwindcss", "onecentlin.laravel-blade", "arcticicestudio.nord-visual-studio-code", "wongjn.php-sniffer", "neilbrayfield.php-docblocker", "pkief.material-icon-theme", "dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "npm i docsify-cli -g", "command": "docsify serve docs"}], "ports": [{"port": 3000, "onOpen": "open-preview", "visibility": "public"}]}
{"image": "ghcr.io/cpp-review-dune/introductory-review/dune-fem-jupyter", "tasks": [{"name": "Starting server", "command": "# jt -t grade3\nstartJupyter &\n"}, {"name": "Docs server", "command": "# https://bugs.python.org/issue43387\npython -m pydoc -p 35559\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}, {"port": 8888, "onOpen": "open-browser"}, {"port": 35559, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "vscode": {"extensions": ["ms-python.python", "tomoki1207.pdf"]}}
{"tasks": [{"init": "npm install -g ganache-cli hardhat truffle\nnpm install\nnpm run build\n", "command": "npm run dev"}]}
{"tasks": [{"command": "sh install.sh"}]}
{"tasks": [{"name": "Default one", "command": "zsh\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"github": {"prebuilds": {"pullRequestsFromForks": true, "addComment": true}}, "image": "ghcr.io/pahud/gitpod-workspace:latest", "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.1.5:9Wg0Glx/TwD8ElFBg+FKcQ=="]}}
{"tasks": [{"name": "Install dependencies", "init": "bash scripts/setup_workspace.sh"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}, "vscode": {"extensions": ["mhutchie.git-graph", "ms-python.python", "Gruntfuggly.todo-tree", "eamodio.gitlens", "donjayamanne.python-environment-manager"]}}
{"image": "ghcr.io/dbrennand/ansible-gitpod-workspace:latest", "vscode": {"extensions": ["redhat.ansible"]}}
{"tasks": [{"name": "aws-sam", "init": "cd /workspace\nwget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip\nunzip aws-sam-cli-linux-x86_64.zip -d sam-installation\nsudo ./sam-installation/install\ncd $THEIA_WORKSPACE_ROOT\n"}, {"name": "cfn", "before": "bundle update --bundler\npip install cfn-lint\ncargo install cfn-guard\ngem install cfn-toml\n"}, {"name": "aws-cli", "env": {"AWS_CLI_AUTO_PROMPT": "on-partial"}, "before": "cd /workspace\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\ncd $THEIA_WORKSPACE_ROOT\n"}, {"name": "react-js", "command": "ruby \"$THEIA_WORKSPACE_ROOT/bin/frontend/generate-env\"\ncd frontend-react-js\nnpm i\n"}, {"name": "flask", "command": "ruby \"$THEIA_WORKSPACE_ROOT/bin/backend/generate-env\"\ncd backend-flask\npip install -r requirements.txt\n"}, {"name": "fargate", "before": "cd /workspace\ncurl \"https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb\" -o \"session-manager-plugin.deb\"\nsudo dpkg -i session-manager-plugin.deb\ncd $THEIA_WORKSPACE_ROOT\ncd backend-flask\n"}, {"name": "cdk", "before": "npm install aws-cdk -g\ncd thumbing-serverless-cdk\ncp .env.example .env\nnpm i\n"}, {"name": "postgres", "before": "curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg\necho \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" |sudo tee  /etc/apt/sources.list.d/pgdg.list\nsudo apt update\nsudo apt install -y postgresql-client-13 libpq-dev\n", "command": "export GITPOD_IP=$(curl ifconfig.me)\nsource  \"$THEIA_WORKSPACE_ROOT/bin/rds/update-sg-rule\"\n"}], "vscode": {"extensions": ["42Crunch.vscode-openapi", "cweijan.vscode-postgresql-client2"]}, "ports": [{"name": "frontend", "port": 3000, "onOpen": "open-browser", "visibility": "public"}, {"name": "backend", "port": 4567, "visibility": "public"}, {"name": "xray-daemon", "port": 2000, "visibility": "public"}]}
{"tasks": [{"name": "npm", "init": "npm install", "command": "npm run start"}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"init": "pip3 install -r requirements.txt", "command": "python3 main.py"}]}
{"tasks": [{"before": "curl gitprompt.sh/install | sh", "init": "npm i", "command": "npm run dev:gitpod"}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "vscode": {"extensions": ["voorjaar.windicss-intellisense"]}}
{"tasks": [{"prebuild": "docker pull jemand771/latex-build && exit", "command": "docker pull jemand771/latex-build && exit"}], "vscode": {"extensions": ["anweber.statusbar-commands@1.6.0", "aaron-bond.better-comments", "CoenraadS.bracket-pair-colorizer", "James-Yu.latex-workshop"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 7700}], "tasks": [{"command": "meilisearch &"}]}
{"tasks": [{"before": "sudo apt-get update", "command": "sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libgtk-3-dev libnotify-dev libgconf-2-4 libnss3 libxss1"}, {"init": "npm install && npm run build", "command": "npm run start"}]}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "gunicorn main:app --log-file=-"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "ms-python.python"]}}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "python app.py"}]}
{"vscode": {"extensions": ["aaron-bond.better-comments", "adpyke.codesnap", "af4jm.vscode-m3u", "AnbuselvanRocky.bootstrap5-vscode", "bitwisecook.tcl", "cstrap.python-snippets", "DavidAnson.vscode-markdownlint", "DEVSENSE.phptools-vscode", "DEVSENSE.profiler-php-vscode", "dracula-theme.theme-dracula", "esbenp.prettier-vscode", "ex-codes.pine-script-syntax-highlighter", "formulahendry.auto-close-tag", "formulahendry.auto-rename-tag", "foxundermoon.shell-format", "GitHub.copilot", "GitHub.copilot-labs", "github.vscode-github-actions", "gitpod.gitpod-desktop", "Janne252.fontawesome-autocomplete", "jeff-hykin.better-shellscript-syntax", "kejun.devtoys", "KevinRose.vsc-python-indent", "laktak.hjson", "magicstack.MagicPython", "mechatroner.rainbow-csv", "mintlify.document", "mongodb.mongodb-vscode", "ms-azuretools.vscode-docker", "MS-CEINTL.vscode-language-pack-tr", "ms-python.isort", "ms-python.python", "ms-python.vscode-pylance", "ms-toolsai.jupyter-renderers", "ms-vscode-remote.remote-containers", "ms-vscode-remote.remote-ssh", "ms-vscode-remote.remote-ssh-edit", "ms-vscode-remote.remote-wsl", "ms-vscode-remote.vscode-remote-extensionpack", "ms-vscode.live-server", "ms-vscode.remote-explorer", "ms-vscode.remote-server", "ms-vsliveshare.vsliveshare", "nico-castell.linux-desktop-file", "njpwerner.autodocstring", "njqdev.vscode-python-typehint", "NoahSyn10.pydoctestbtn", "NomicFoundation.hardhat-solidity", "noxiz.jinja-snippets", "Okteto.remote-kubernetes", "PKief.material-icon-theme", "pranaygp.vscode-css-peek", "rangav.vscode-thunder-client", "rifi2k.format-html-in-php", "ritwickdey.LiveServer", "samuelcolvin.jinjahtml", "SonarSource.sonarlint-vscode", "sourcery.sourcery", "TabNine.tabnine-vscode", "VisualStudioExptTeam.intellicode-api-usage-examples", "VisualStudioExptTeam.vscodeintellicode", "Vue.volar", "wholroyd.jinja", "wingrunr21.vscode-ruby", "zhuangtongfa.material-theme"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install"}]}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"name": "quarto", "command": "quarto preview"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "vscode": {"extensions": ["Ikuyadeu.r@1.2.1:z5vr1v1bfS++U/aHLSXQ6Q=="]}}
{"tasks": [{"before": "wget -qOdatabase-setup.sh https://codejudge-starter-repo-artifacts.s3.ap-south-1.amazonaws.com/gitpod/backend/python/gitpod-setup.sh && chmod 0755 database-setup.sh && bash database-setup.sh 3.5.3\n", "init": "pip install --upgrade pip\npython -m pip install Django==2.1 pytz==2019.2\npip install -r requirements.txt\npython manage.py migrate\n", "command": "python manage.py runserver 0.0.0.0:8080"}], "ports": [{"port": 8080, "name": "Backend Server", "onOpen": "open-browser", "visibility": "public"}, {"port": 3306, "name": "MySQL Server", "onOpen": "ignore", "visibility": "public"}, {"port": 27017, "name": "MongoDB Server", "onOpen": "ignore", "visibility": "public"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": "vvakame/review:3.1", "tasks": [{"command": "./setup.sh"}]}
{"image": "jelaniwoods/appdev2021-vanilla-rails@sha256:9d0dc73205215b24c7e313fa8fbbe49c135f497fe9bcbb5eb98d3c9480e679c6", "tasks": [{"command": "bundle install"}, {"init": "bin/setup"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 5432, "onOpen": "ignore"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb@0.2.1:BzpDuNAqJwUkxqT2t1YIuQ==", "CraigMaslowski.erb@0.0.1:5znDha/nn0PphUrpB9a5Nw==", "wingrunr21.vscode-ruby@0.26.0:VakXVw0C77hAQ3U3AZTn1Q==", "aliariff.vscode-erb-beautify@0.2.0:JPBIiJcuf3dj5jx4nE7u8Q==", "mbessey.vscode-rufo@0.2.1:QlBwvnvHJPqtDjkgo7+OEQ=="]}}
{"ports": [{"port": 3000}]}
{"image": "jelaniwoods/appdev2020-base", "tasks": [{"init": "bin/setup"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "vscode": {"extensions": ["shd101wyy.markdown-preview-enhanced@0.5.1:s3vD5qiY6/HbtRrgDlbMiQ==", "vortizhe.simple-ruby-erb@0.2.1:BzpDuNAqJwUkxqT2t1YIuQ==", "CraigMaslowski.erb@0.0.1:5znDha/nn0PphUrpB9a5Nw==", "Vense.rails-snippets@0.5.0:w1Rd4bmOp7tM7xc3UJruRQ==", "wingrunr21.vscode-ruby@0.26.0:VakXVw0C77hAQ3U3AZTn1Q=="]}}
{"tasks": [{"name": "Install build dependencies", "command": "sudo apt-get install -qq -y dh-make devscripts build-essential dh-systemd\n"}]}
{"image": "jelaniwoods/appdev2021-vanilla-rails@sha256:43b44732485fb179806ee32b9e94bb42b72e874f66ceac4180e5f496e7186344", "tasks": [{"command": "git config --global push.default upstream && bundle install"}, {"init": "bin/setup"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 5432, "onOpen": "ignore"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb@0.2.1:BzpDuNAqJwUkxqT2t1YIuQ==", "CraigMaslowski.erb@0.0.1:5znDha/nn0PphUrpB9a5Nw==", "wingrunr21.vscode-ruby@0.26.0:VakXVw0C77hAQ3U3AZTn1Q==", "aliariff.vscode-erb-beautify@0.2.0:JPBIiJcuf3dj5jx4nE7u8Q==", "mbessey.vscode-rufo@0.2.1:QlBwvnvHJPqtDjkgo7+OEQ=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "sh recompile.sh"}], "vscode": {"extensions": ["thiagoabreu.vala@0.3.5:wpqKL9G/pGRsFlLDBLF2hA==", "asabil.meson@1.2.0:sYg01j3Mm+6RJtaIRwyR5A=="]}, "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-browser"}]}
{"tasks": [{"init": "curl -Lo /tmp/hugo.tar.gz https://github.com/gohugoio/hugo/releases/download/v0.78.2/hugo_extended_0.78.2_Linux-64bit.tar.gz && mkdir -p ~/bin || true; tar -xvf /tmp/hugo.tar.gz -C ~/bin; yarn\n", "command": "~/bin/hugo serve\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Docker Services", "init": "docker-compose -f docker/docker-compose.dev.yml pull", "command": "docker-compose -f docker/docker-compose.dev.yml up\n"}, {"name": "Dev", "init": "npm run bootstrap\ncd docs\nyarn\n", "command": "npm run watch\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}, {"port": 3001, "onOpen": "open-browser"}, {"port": 3002, "onOpen": "ignore"}, {"port": 3003, "onOpen": "ignore"}, {"port": 27017, "onOpen": "ignore"}, {"port": 6379, "onOpen": "ignore"}, {"port": 9125, "onOpen": "ignore"}], "vscode": {"extensions": ["octref.vetur", "orta.vscode-jest", "eamodio.gitlens"]}}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "nosetests lambdatest_test.py"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "source ~/.bashrc\n", "init": "flutter upgrade &&  flutter update-packages --force-upgrade && flutter run -d web-server --no-resident # prebuilds the app\n", "command": "flutter run -d web-server --web-port=8080 --web-hostname=0.0.0.0\n"}], "ports": [{"port": 8080, "onOpen": "open-preview"}], "vscode": {"extensions": ["Dart-Code.dart-code@3.5.1:W6zqgIED1gxtkBH/pbfGXA==", "Dart-Code.flutter@3.5.1:0FyuzXye7dV19PNst3+Llg=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "pyenv global 3.7.4 && chmod +x envconfig.sh"}]}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 8001, "onOpen": "ignore"}, {"port": 3306, "onOpen": "ignore"}], "tasks": [{"name": "Apache", "command": "mkdir /tmp/apache; touch /tmp/apache/error.log; touch /tmp/apache/access.log; export APACHE_PID_FILE=\"/tmp/apache/PID\" APACHE_RUN_USER=\"gitpod\" APACHE_RUN_GROUP=\"gitpod\" APACHE_SERVER_NAME=\"localhost\" APACHE_LOG_DIR=\"/tmp/apache\"; apache2; multitail /tmp/apache/error.log -I /tmp/apache/access.log;\n"}, {"name": "Allerta", "init": "cd frontend; npm install; npm run build; cd ../backend; composer install;\n"}], "vscode": {"extensions": ["gruntfuggly.todo-tree@0.0.205:sbsZJOTJzKZtMVHQuS2iPw==", "shelex.vscode-cy-helper@1.1.0:U9ok2y1bSmqn17OMuRMOfw=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "hugo server --baseUrl $(gp url 1313) --appendPort=false --disableLiveReload"}], "ports": [{"port": 1313, "onOpen": "ignore"}, {"port": 443, "onOpen": "ignore"}], "vscode": {"extensions": ["budparr.language-hugo-vscode", "davidanson.vscode-markdownlint", "syler.sass-indented"]}}
{"tasks": [{"init": "python3 -m pip install -r requirements.txt\n", "command": "export FLASK_APP=app.py && export FLASK_ENV=development && python3 -m flask run\n"}], "ports": [{"port": 5000, "onOpen": "open-browser"}]}
{"image": "corndeldevopscourse/devops-course-starter-gitpod", "vscode": {"extensions": ["ms-python.python"]}, "tasks": [{"command": "cp .env.template .env\npoetry install\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm ci", "command": "npm start"}], "ports": [{"port": 9000}, {"port": 9630}]}
{"image": {"file": ".gitpod.Dockerfile"}, "checkoutLocation": "starport", "workspaceLocation": "./starport/docs", "tasks": [{"name": "Install Starport", "init": "# Install Starport\nexport BIN_PATH=$GOPATH/bin\nexport VUE_APP_CUSTOM_URL=$(gp url)\nexport CHISEL_ADDR=$(gp url 7575)\nmkdir -p $BIN_PATH\n(cd /workspace/starport && ./scripts/install)\n\n# install rly\n(cd /tmp && git clone https://github.com/cosmos/relayer && cd relayer && git checkout ba17c4db185229d9354187a8b9723097ab527261 && make -C /tmp/relayer install)\n", "command": "export VUE_APP_CUSTOM_URL=$(gp url)\nexport CHISEL_ADDR=$(gp url 7575)\nexport RPC_ADDRESS=$(gp url 26657):443\nexport API_ADDRESS=$(gp url 1317)\ncd ./docs\n\nclear && printf '\\e[3J'\necho -e \"\n\nWelcome to Starport! \ud83d\udcab The friendly CLI that makes building blockchains easy.\n\nIn the sidebar you can see a list of guides that will help you get started.\n\nThis terminal has the \\033[1mstarport\\033[0m binary already installed and ready to go.\n\n\"\n"}], "ports": [{"port": 1317}, {"port": 26657}, {"port": 8080}, {"port": 7575}, {"port": 4500}]}
{"image": {"file": ".devcontainer/gitpod.Dockerfile"}, "tasks": [{"init": "npm install"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-browser", "visibility": "public"}, {"port": 5432, "onOpen": "ignore", "visibility": "public"}, {"port": 3001, "onOpen": "ignore", "visibility": "public"}, {"port": 5000, "onOpen": "ignore", "visibility": "public"}], "tasks": [{"before": "cd Server && npm install -g @nestjs/cli && npm install && createuser user && createdb mydb && npm start"}, {"command": "cd Web && npm install && npm run dev"}, {"command": "cd recommender_server && virtualenv .venv && source .venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt && cd fast_api && uvicorn main:app --reload"}], "vscode": {"extensions": ["usernamehw.errorlens", "dsznajder.es7-react-js-snippets", "GraphQL.vscode-graphql", "PKief.material-icon-theme", "Equinusocio.vsc-material-theme", "equinusocio.vsc-material-theme-icons", "esbenp.prettier-vscode", "humao.rest-client", "bradlc.vscode-tailwindcss", "Equinusocio.vsc-community-material-theme"]}}
{"tasks": [{"name": "Install dependencies", "command": "cd ..\ngit clone https://github.com/facebookresearch/ParlAI\nmv parlai-bots ParlAI/parlai_internal\ncd ParlAI\nvirtualenv env\nsource env/bin/activate\nexport PIP_USER=false\npip install -e .\ncd ./parlai_internal\npip install -r requirements-test.txt\n"}, {"name": "Generate service account", "command": "eval $(gp env -e)\necho \"$LANGAME_SVC_PROD\" > svc.prod.json\necho \"$LANGAME_SVC_DEV\" > svc.dev.json\npip3 install yq\necho \"$LANGAME_CONFIG\" | yq -y > config.yaml\n"}, {"name": "Auth gcloud", "command": "gcloud auth login --no-launch-browser\ngcloud projects list\necho \"gcloud config set project [PROJECT_ID]\"\n"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["aaron-bond.better-comments", "bungcip.better-toml", "GitHub.copilot", "gitpod.gitpod-desktop", "googlecloudtools.cloudcode", "hbenl.vscode-test-explorer", "k--kato.intellij-idea-keybindings", "littlefoxteam.vscode-python-test-adapter", "mechatroner.rainbow-csv", "ms-azuretools.vscode-docker", "ms-kubernetes-tools.vscode-kubernetes-tools", "ms-python.python", "ms-python.vscode-pylance", "ms-toolsai.jupyter", "ms-vscode-remote.remote-containers", "ms-vscode-remote.remote-ssh", "ms-vscode-remote.remote-ssh-edit", "ms-vscode.test-adapter-converter", "mushan.vscode-paste-image", "Perkovec.emoji", "RandomFractalsInc.vscode-data-preview", "redhat.vscode-yaml", "stylelint.vscode-stylelint", "toba.vsfire", "wix.vscode-import-cost", "zxh404.vscode-proto3"]}}
{"image": "jerrythomas/gitpod-workspace", "tasks": [{"init": "pnpm install", "command": "export CLIENT_URL=\"$(gp url 35729)/livereload.js?snipver=1&port=443\"\n{ gp await-port 5173 && sleep 5 && gp preview $(gp url 5173) & } &> /dev/null\ngp open src/App.svelte\npnpm dev\n"}], "ports": [{"port": 5173, "onOpen": "ignore"}, {"port": 5555, "onOpen": "ignore"}, {"port": 4000, "onOpen": "ignore"}, {"port": 35729, "onOpen": "ignore"}], "vscode": {"extensions": ["svelte.svelte-vscode", "antfu.iconify", "antfu.unocss", "antfu.vite", "lokalise.i18n-ally", "dbaeumer.vscode-eslint", "tabnine.tabnine-vscode", "esbenp.prettier-vscode", "usernamehw.errorlens", "Wattenberger.footsteps", "zhuangtongfa.material-theme", "mskelton.one-dark-theme"]}}
{"vscode": {"extensions": ["ms-python.python", "ms-python.vscode-pylance", "ms-python.isort", "ms-toolsai.jupyter"]}, "tasks": [{"init": "pip install -r requirements.txt"}]}
{"tasks": [{"init": "pip install poetry", "command": "poetry install"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "poetry install && [ -r .venv/pyvenv.cfg ] && sed -i \"/include-system-site-packages/d\" .venv/pyvenv.cfg && echo \"include-system-site-packages = true\" | tee -a .venv/pyvenv.cfg\n"}, {"command": "[ -r .venv/pyvenv.cfg ] && sed -i \"/include-system-site-packages/d\" .venv/pyvenv.cfg && echo \"include-system-site-packages = true\" | tee -a .venv/pyvenv.cfg\n"}], "ports": [{"port": "3000-10000", "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": true}}, "vscode": {"extensions": ["ms-python.python", "karyfoundation.comment", "bungcip.better-toml", "mutantdino.resourcemonitor", "redhat.vscode-yaml", "streetsidesoftware.code-spell-checker", "vscode-snippet.snippet", "wayou.vscode-todo-highlight", "wmaurer.change-case", "yzane.markdown-pdf", "yzhang.markdown-all-in-one", "aaron-bond.better-comments", "bungcip.better-toml", "EditorConfig.EditorConfig", "emeraldwalk.RunOnSave", "kevinkyang.auto-comment-blocks", "ms-azuretools.vscode-docker", "wholroyd.hcl", "skellock.just", "tomoyukim.vscode-mermaid-editor", "gruntfuggly.todo-tree"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "composer install"}, {"init": "sudo docker-up &"}, {"init": "brew upgrade ddev\nmkcert -install\n# Wait for docker to come up before doing gitpod setup (gitpod-setup requires docker)\nwhile ! docker ps 2>/dev/null; do\n  sleep 1\ndone\n.ddev/gitpod-setup-ddev.sh\n"}, {"name": "composer", "command": "composer install"}, {"name": "docker-up", "openMode": "split-right", "command": "sudo docker-up"}, {"name": "ddev_run", "openIn": "left", "command": "brew upgrade ddev\nmkcert -install\n# Wait for docker to come up before doing gitpod setup (gitpod-setup requires docker)\nwhile ! docker ps 2>/dev/null; do\n  sleep 1\ndone\n.ddev/gitpod-setup-ddev.sh\n"}], "ports": [{"port": 6942, "onOpen": "ignore"}, {"port": 8080}, {"port": 8025, "onOpen": "ignore"}, {"port": 8026, "onOpen": "ignore"}, {"port": 8036, "onOpen": "ignore"}, {"port": 8037, "onOpen": "ignore"}, {"port": 8443, "onOpen": "ignore"}, {"port": 9999}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": true, "addLabel": true}}}
{"github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "pwsh -command '../../home/Universal/Universal.Server'\n"}], "ports": [{"port": 5000, "visibility": "public", "onOpen": "open-browser"}]}
{"vscode": {"extensions": ["esbenp.prettier-vscode"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm ci", "command": "npm run e2e"}], "ports": [{"port": 6080, "onOpen": "open-preview"}]}
{"tasks": [{"name": "Dependency Installation", "init": "pip install -U pip wheel setuptools\npip install -r requirements/dev.txt\ngp sync-done pip-install\n"}, {"name": "Pre-commit Setup", "init": "eval $(gp env -e PRE_COMMIT_HOME=/workspace/pre-commit)\ngp sync-await pip-install\npre-commit install --install-hooks\ngp sync-done precommit-setup\n"}, {"name": "Django Setup", "init": "eval $(gp env -e DJANGO_SETTINGS_MODULE=cimto.settings.gitpod)\ngp sync-await pip-install\npython manage.py migrate\ngp sync-done django-setup\n"}, {"name": "Terminal", "init": "gp sync-await pip-install\ngp sync-await precommit-setup\ngp sync-await django-setup\n"}]}
{"tasks": [{"init": "pip install -r requirements.txt\n"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000}, {"port": 3030}, {"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "ignore"}, {"port": 9229, "onOpen": "ignore"}, {"port": 9339, "onOpen": "ignore"}], "tasks": [{"init": "yarn --network-timeout 100000", "command": "jwm & yarn --cwd development-workplace-extension/browser start ../.. --hostname=0.0.0.0\n"}], "github": {"prebuilds": {"pullRequestsFromForks": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.0.0:CwAMx4wYz1Kq39+1Aul4VQ=="]}}
{"tasks": [{"init": "echo 'TODO: build project'\n", "command": "npm install -g mongodb-realm-cli"}]}
{"tasks": [{"init": "npm install && ./mvnw install -DskipTests=false"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"image": "gitpod/workspace-full", "tasks": [{"name": "Dependencies & venv", "init": "mkdir backend\ncd backend\npython -m venv venv\nsource venv/bin/activate\npip install --upgrade pip wheel setuptools\npip install Django\npython manage.py migrate\n", "command": "source venv/bin/activate\npython manage.py runserver     \n"}], "ports": [{"port": 8000, "visibility": "private", "onOpen": "open-preview"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "", "command": "gp open demo.ts\n"}], "vscode": {"extensions": ["denoland.vscode-deno"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "flutter pub get echo \"Ready!\"\n"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 5037, "onOpen": "ignore"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "gradle run"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "pip install discord python-dotenv"}]}
{"tasks": [{"name": "Frontend", "init": "nvm install 18\nnpm install\n", "command": "echo \"PUBLIC_URL=$(gp url 3000)\" > .env.development.local\ncp .env.development.local .env.production.local\nnvm use 18\nnpm start\n", "openMode": "split-right"}], "ports": [{"port": 3000, "name": "Frontend", "description": "Access the React PWA app.", "visibility": "public", "onOpen": "open-browser"}]}
{"image": {"file": "Dockerfile"}, "tasks": [{"name": "Prepare workspace", "command": "pip install .[dev] && export PIP_USER=false && pre-commit install --install-hooks\n"}, {"name": "README server", "command": "grip"}], "ports": [{"port": 6419, "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true, "addComment": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "mkdir -p ../.R/library\nsudo Rscript requirements.r\npip3 install -r requirements.txt\nmake\n", "command": "echo 'eval \"$(starship init bash)\"' >> $HOME/.bashrc\nsource $HOME/.bashrc\nsudo bash -c \"echo R_LIBS_USER=$GITPOD_REPO_ROOT/../.R/library > /home/gitpod/.Renviron\"\nsudo bash -c \"echo 'setwd(\\\"$GITPOD_REPO_ROOT\\\")' > /home/gitpod/.Rprofile\"\nsudo usermod -a -G rstudio-users gitpod\nsudo usermod --password $(openssl passwd -1 $RSTUDIO_PASSWORD) gitpod\nsudo rstudio-server restart\n"}], "ports": [{"port": 8787, "onOpen": "open-browser"}, {"port": "3000-8786", "onOpen": "ignore"}, {"port": "8786-15000", "onOpen": "ignore"}], "vscode": {"extensions": ["eamodio.gitlens", "streetsidesoftware.code-spell-checker", "ms-python.python", "Ikuyadeu.r", "efoerster.texlab"]}}
{"image": "gitpod/workspace-postgres", "tasks": [{"name": "Script Task", "init": "npm i http-server -g\n", "command": "http-server\n"}], "ports": [{"name": "http-server", "port": 8080, "visibility": "public"}]}
{"tasks": [{"init": "npm install"}]}
{"image": "ghcr.io/ren15/folly-ci-dev-env:ubuntu20_v2021.05.03.00"}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": false, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"command": "mkdir -p /home/gitpod/.android\ntouch /home/gitpod/.android/repositories.cfg\nexport PATH=/usr/lib/dart/bin:$FLUTTER_HOME/bin:$ANDROID_HOME/bin:$PATH\n/home/gitpod/android-sdk/tools/bin/sdkmanager \"platform-tools\" \"platforms;android-28\" \"build-tools;28.0.3\"\n"}], "vscode": {"extensions": ["Dart-Code.flutter@3.5.1:0FyuzXye7dV19PNst3+Llg=="]}}
{"image": "jelaniwoods/appdev2023-vanilla-rails-6-hotfix", "tasks": [{"before": "source $(rvm 3.0.3 do rvm env --path)\nbin/setup\n.vscode/manage_extensions\n"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 5432, "onOpen": "ignore"}, {"port": "9500-9999", "onOpen": "ignore"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb", "aliariff.vscode-erb-beautify"]}}
{"tasks": [{"before": "git submodule update --init && bash mvnw clean package", "init": "cd target", "command": "java -jar powernukkit-*-shaded.jar"}], "ports": [{"port": 19132}]}
{"image": {"file": "Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": true, "addLabel": true}}, "tasks": [{"command": "/opt/android-studio/bin/studio.sh"}, {"command": "echo \"Hello\""}, {"command": "mkdir AndroidStudioProjects"}], "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "ignore"}, {"port": 35900, "onOpen": "ignore"}, {"port": 6942, "onOpen": "ignore"}], "vscode": {"extensions": ["adelphes.android-dev-ext@0.8.0:z3IVaDRzKS8IeFWrhyaPAA==", "mpotthoff.vscode-android-webview-debug@1.1.1:TY2OLKxxIJSs2lt3TgOpjw==", "DiemasMichiels.emulate@1.3.0:sXCoQONS3kXpSTBuMnxkyQ==", "fwcd.kotlin@0.2.10:kX3nrW3fv/LjU/QSQ41zYA=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "echo 'init script'", "command": ". /home/gitpod/.sdkman/bin/sdkman-init.sh && sdk env install && sdk use java 18.0.1-zulu"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "Database", "init": "docker pull postgres:14-alpine", "command": "docker run -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=p0stgr3s postgres:14-alpine"}, {"name": "Logto dev", "init": "pnpm i\npnpm prepack\ncd packages/core\npnpm build\ncd -\npnpm cli connector add --official -p .\n", "command": "gp ports await 5432\nsleep 3\nexport ENDPOINT=$(gp url 3001)\npnpm cli db seed\npnpm start:dev\n", "env": {"TRUST_PROXY_HEADER": 1, "DB_URL": "postgres://postgres:p0stgr3s@127.0.0.1:5432/logto"}}], "ports": [{"name": "Logto", "description": "The Logto core service", "port": 3001, "visibility": "public"}, {"name": "Postgres", "port": 5432, "visibility": "public", "onOpen": "ignore"}, {"port": 5001, "onOpen": "ignore"}, {"port": 5002, "onOpen": "ignore"}, {"port": 5003, "onOpen": "ignore"}, {"port": 6001, "onOpen": "ignore"}, {"port": 6002, "onOpen": "ignore"}, {"port": 6003, "onOpen": "ignore"}]}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "python app.py"}], "vscode": {"extensions": ["ms-python.python"]}}
{"tasks": [{"init": "sudo docker pull registry.jetbrains.team/p/prj/containers/projector-idea-c\n# sudo docker pull registry.jetbrains.team/p/prj/containers/projector-idea-u\n", "command": "sudo mkdir -p .jetbrains; sudo touch .jetbrains/.gitkeep; sudo chown -R 1000:1000 .jetbrains\n\n# Community Edition\nsudo docker run --rm -p 8887:8887 -v /workspace/template-jetbrains-intellij-idea/.jetbrains:/home/projector-user -it registry.jetbrains.team/p/prj/containers/projector-idea-c\n\n# Ultimate Edition\n#sudo docker run --rm -p 8887:8887 -v /workspace/template-jetbrains-intellij-idea/.jetbrains:/home/projector-user -it registry.jetbrains.team/p/prj/containers/projector-idea-u\n"}], "ports": [{"port": 8887, "visibility": "private", "onOpen": "open-browser"}]}
{"image": "aledbf/gitpod-stargz-test:85126193649049bfda6f1dc66c3de3f533466f5a-esgz", "tasks": [{"command": "echo \"Hola stargz\""}]}
{"tasks": [{"init": "pip3 install -r \"/workspace/machine-learning-prework/requirements.txt\"\n", "command": "echo 'start script'"}], "ports": [{"port": "9000-9099", "onOpen": "ignore"}], "image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["ms-toolsai.jupyter"]}}
{"tasks": [{"init": "sudo apt-get install libncurses5 libncursesw5 libtinfo5\nsudo apt-get install libcurl4-openssl-dev\n"}, {"command": "./gradlew assemble"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"init": "pnpm i", "command": "pnpm dev"}], "ports": [{"port": 5173, "onOpen": "open-preview"}]}
{"tasks": [{"name": "eslint", "init": "npm install eslint --save-dev"}, {"name": "servidor", "init": "npm install", "command": "npm start"}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i vercel -g && npm install && cp .env.example .env\n", "command": "npm i vercel -g && python docs/assets/greeting.py\n"}]}
{"image": "k33g/wasm-wasi-memory-nodejs:0.0.0", "tasks": [{"name": "initialize", "before": "\n# ------------------------------------\n# wasmer\n# ------------------------------------\nsource /home/gitpod/.wasmer/wasmer.sh\nwasmer --version\n# ------------------------------------\n# wasmtime\n# ------------------------------------\nwasmtime --version\n# ------------------------------------\n# wasmedge dependencies\n# ------------------------------------\nsource /home/gitpod/.wasmedge/env\nwasmedge --version\n", "init": "echo \"\ud83d\ude80 initialize\"\n#npm install\nclear\n"}], "ports": [{"port": 8080, "visibility": "public"}, {"port": 3000, "visibility": "public"}, {"port": 5000, "visibility": "public"}], "vscode": {"extensions": ["golang.go", "pkief.material-icon-theme", "aaron-bond.better-comments"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "docker compose up -d\nsleep 60\ndocker compose down\n"}, {"command": "echo \"done\"\n"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "pip install -r requirements.txt"}]}
{"tasks": [{"command": "pip3 install -U platformio && platformio run -e tasmota"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["Atishay-Jain.All-Autocomplete", "esbenp.prettier-vscode", "shardulm94.trailing-spaces"]}}
{"tasks": [{"command": "pip3 install -U platformio && platformio run -e tasmota"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["Atishay-Jain.All-Autocomplete", "esbenp.prettier-vscode", "shardulm94.trailing-spaces"]}}
{"tasks": [{"command": "pip3 install -U platformio && platformio run -e tasmota"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["Atishay-Jain.All-Autocomplete", "esbenp.prettier-vscode", "shardulm94.trailing-spaces"]}}
{"tasks": [{"command": "pip3 install -U platformio && platformio run -e tasmota"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["Atishay-Jain.All-Autocomplete", "esbenp.prettier-vscode", "shardulm94.trailing-spaces"]}}
{"tasks": [{"init": "make init"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run start"}], "ports": [{"port": 3001, "onOpen": "ignore"}, {"port": "4000-4999", "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run start"}], "ports": [{"port": 3001, "onOpen": "ignore"}, {"port": "4000-4999", "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": true}}}
{"tasks": [{"init": "pip install -r requirements.txt"}]}
{"image": "gitpod/workspace-full", "tasks": [{"init": "echo \"TODO: Replace with init/build command\"", "command": "echo \"TODO: Replace with command to start project\""}]}
{"image": "gitpod/workspace-full", "tasks": [{"init": "echo \"TODO: Replace with init/build command\"", "command": "echo \"TODO: Replace with command to start project\""}]}
{"image": "gitpod/workspace-full", "tasks": [{"init": "echo \"TODO: Replace with init/build command\"", "command": "echo \"TODO: Replace with command to start project\""}]}
{"image": "gitpod/workspace-full", "tasks": [{"init": "echo \"TODO: Replace with init/build command\"", "command": "echo \"TODO: Replace with command to start project\""}]}
{"tasks": [{"name": "App", "init": "npm install", "command": "npm run start", "openMode": "split-left"}, {"name": "Test", "command": "npm run test", "openMode": "split-right"}, {"name": "Set up email", "command": "clear\nprintf \"\\n\\n\\n\"\nprintf \"\\u001b[36;1mAutofilling Email\\u001b[0m\\n\"\nprintf \"\\u001b[2;1mEach exercise comes with a elaboration form to help your retention. Providing your email now will mean you don't have to provide it each time you fill out the form.\\u001b[0m\\n\"\nnpx \"https://gist.github.com/kentcdodds/2d44448a8997b9964b1be44cd294d1f5\" \\\n  && exit 0\n"}], "ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}], "vscode": {"extensions": ["VisualStudioExptTeam.vscodeintellicode", "dbaeumer.vscode-eslint", "formulahendry.auto-rename-tag", "esbenp.prettier-vscode", "ms-azuretools.vscode-docker"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false}}}
{"tasks": [{"name": "App", "init": "npm install", "command": "npm run start", "openMode": "split-left"}, {"name": "Test", "command": "npm run test", "openMode": "split-right"}, {"name": "Set up email", "command": "clear\nprintf \"\\n\\n\\n\"\nprintf \"\\u001b[36;1mAutofilling Email\\u001b[0m\\n\"\nprintf \"\\u001b[2;1mEach exercise comes with a elaboration form to help your retention. Providing your email now will mean you don't have to provide it each time you fill out the form.\\u001b[0m\\n\"\nnpx \"https://gist.github.com/kentcdodds/2d44448a8997b9964b1be44cd294d1f5\" \\\n  && exit 0\n"}], "ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}], "vscode": {"extensions": ["VisualStudioExptTeam.vscodeintellicode", "dbaeumer.vscode-eslint", "formulahendry.auto-rename-tag", "esbenp.prettier-vscode", "ms-azuretools.vscode-docker"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false}}}
{"tasks": [{"name": "App", "init": "npm install", "command": "npm run start", "openMode": "split-left"}, {"name": "Test", "command": "npm run test", "openMode": "split-right"}, {"name": "Set up email", "command": "clear\nprintf \"\\n\\n\\n\"\nprintf \"\\u001b[36;1mAutofilling Email\\u001b[0m\\n\"\nprintf \"\\u001b[2;1mEach exercise comes with a elaboration form to help your retention. Providing your email now will mean you don't have to provide it each time you fill out the form.\\u001b[0m\\n\"\nnpx \"https://gist.github.com/kentcdodds/2d44448a8997b9964b1be44cd294d1f5\" \\\n  && exit 0\n"}], "ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}], "vscode": {"extensions": ["VisualStudioExptTeam.vscodeintellicode", "dbaeumer.vscode-eslint", "formulahendry.auto-rename-tag", "esbenp.prettier-vscode", "ms-azuretools.vscode-docker"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false}}}
{"tasks": [{"name": "App", "init": "npm install", "command": "npm run start", "openMode": "split-left"}, {"name": "Test", "command": "npm run test", "openMode": "split-right"}, {"name": "Set up email", "command": "clear\nprintf \"\\n\\n\\n\"\nprintf \"\\u001b[36;1mAutofilling Email\\u001b[0m\\n\"\nprintf \"\\u001b[2;1mEach exercise comes with a elaboration form to help your retention. Providing your email now will mean you don't have to provide it each time you fill out the form.\\u001b[0m\\n\"\nnpx \"https://gist.github.com/kentcdodds/2d44448a8997b9964b1be44cd294d1f5\" \\\n  && exit 0\n"}], "ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}], "vscode": {"extensions": ["VisualStudioExptTeam.vscodeintellicode", "dbaeumer.vscode-eslint", "formulahendry.auto-rename-tag", "esbenp.prettier-vscode", "ms-azuretools.vscode-docker"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false}}}
{"tasks": [{"init": "yarn install\nyarn test\n", "command": "DANGEROUSLY_DISABLE_HOST_CHECK=true yarn start-with-mock-data"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 4000, "onOpen": "ignore"}]}
{"image": "ghcr.io/notional-labs/cosmos"}
{"image": "ghcr.io/notional-labs/cosmos"}
{"image": "ghcr.io/notional-labs/cosmos"}
{"image": "ghcr.io/notional-labs/cosmos"}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "set +x; clear", "command": "set +x;clear\njava -version\n"}]}
{"image": {"file": "docker/.gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": true, "addBadge": false, "addLabel": false}}}
{"image": {"file": "docker/.gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": true, "addBadge": false, "addLabel": false}}}
{"image": {"file": "docker/.gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": true, "addBadge": false, "addLabel": false}}}
{"tasks": [{"name": "Installing node packages", "init": "npm ci", "command": "npm run dev"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn dev"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn dev"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn dev"}]}
{"tasks": [{"init": "npm install", "command": "npm run start"}], "image": {"file": ".gitpod.Dockerfile"}}
{"tasks": [{"init": "npm install", "command": "npm run start"}], "image": {"file": ".gitpod.Dockerfile"}}
{"tasks": [{"init": "npm install", "command": "npm run start"}], "image": {"file": ".gitpod.Dockerfile"}}
{"image": "openjdk:8", "vscode": {"extensions": ["scala-lang.scala@0.3.9:kklqw+c/dNRmtTU8B5repw==", "scalameta.metals@1.9.0:PtE/gdeE1YPL6It4tEfqpg=="]}, "tasks": [{"init": "source ./gitpod_init.sh"}, {"command": "source ./gitpod_command.sh"}]}
{"vscode": {"extensions": ["streetsidesoftware.code-spell-checker", "anwar.papyrus-pdf", "eamodio.gitlens", "vscode-icons-team.vscode-icons", "esbenp.prettier-vscode", "redhat.vscode-yaml", "vscodevim.vim"]}}
{"image": "acgetchell/vcpkg-image", "tasks": [{"init": "vcpkg install --feature-flags=manifests\n"}]}
{"image": "acgetchell/vcpkg-image", "tasks": [{"init": "vcpkg install --feature-flags=manifests\n"}]}
{"image": "ghcr.io/graphprotocol/substreams-gitpod:latest", "tasks": [{"command": "# Authenticate with the substreams server\nexport SUBSTREAMS_API_TOKEN=$(curl https://auth.dfuse.io/v1/auth/issue -s --data-binary '{\"api_key\":\"'$STREAMINGFAST_KEY'\"}' | jq -r .token)\n"}], "ports": [{"port": 6060, "onOpen": "ignore"}, {"port": 1065, "onOpen": "ignore"}]}
{"image": "ghcr.io/graphprotocol/substreams-gitpod:latest", "tasks": [{"command": "# Authenticate with the substreams server\nexport SUBSTREAMS_API_TOKEN=$(curl https://auth.dfuse.io/v1/auth/issue -s --data-binary '{\"api_key\":\"'$STREAMINGFAST_KEY'\"}' | jq -r .token)\n"}], "ports": [{"port": 6060, "onOpen": "ignore"}, {"port": 1065, "onOpen": "ignore"}]}
{"image": "ghcr.io/graphprotocol/substreams-gitpod:latest", "tasks": [{"command": "# Authenticate with the substreams server\nexport SUBSTREAMS_API_TOKEN=$(curl https://auth.dfuse.io/v1/auth/issue -s --data-binary '{\"api_key\":\"'$STREAMINGFAST_KEY'\"}' | jq -r .token)\n"}], "ports": [{"port": 6060, "onOpen": "ignore"}, {"port": 1065, "onOpen": "ignore"}]}
{"image": "ghcr.io/graphprotocol/substreams-gitpod:latest", "tasks": [{"command": "# Authenticate with the substreams server\nexport SUBSTREAMS_API_TOKEN=$(curl https://auth.dfuse.io/v1/auth/issue -s --data-binary '{\"api_key\":\"'$STREAMINGFAST_KEY'\"}' | jq -r .token)\n"}], "ports": [{"port": 6060, "onOpen": "ignore"}, {"port": 1065, "onOpen": "ignore"}]}
{"tasks": [{"init": "yarn install", "command": "yarn run start"}]}
{"tasks": [{"init": "yarn install", "command": "yarn run start"}]}
{"tasks": [{"init": "yarn install", "command": "yarn run start"}]}
{"tasks": [{"init": "yarn install", "command": "yarn run start"}]}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz -O - | tar -xz -C .\nsudo cp binaryen-version_110/bin/wasm-opt /usr/bin/\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz -O - | tar -xz -C .\nsudo cp binaryen-version_110/bin/wasm-opt /usr/bin/\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz -O - | tar -xz -C .\nsudo cp binaryen-version_110/bin/wasm-opt /usr/bin/\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo wget -c https://github.com/WebAssembly/binaryen/releases/download/version_110/binaryen-version_110-x86_64-linux.tar.gz -O - | tar -xz -C .\nsudo cp binaryen-version_110/bin/wasm-opt /usr/bin/\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}], "vscode": {"extensions": ["betterthantomorrow.calva"]}, "tasks": [{"name": "Prepare deps", "init": "clojure -P -Sdeps '{:deps {nrepl/nrepl {:mvn/version,\"0.8.3\"},cider/cider-nrepl {:mvn/version,\"0.26.0\"}}}'"}, {"name": "Open README", "command": "open -g README.md"}]}
{"tasks": [{"init": "yarn", "command": "yarn start"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust-analyzer@0.3.1348"]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust-analyzer@0.3.1348"]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust-analyzer@0.3.1348"]}}
{"tasks": [{"init": "/workspace/rustlings/install.sh", "command": "/workspace/.cargo/bin/rustlings watch"}], "vscode": {"extensions": ["rust-lang.rust-analyzer@0.3.1348"]}}
{"tasks": [{"command": "npx browser-sync start -s -w", "name": "Server"}]}
{"tasks": [{"command": "npx browser-sync start -s -w", "name": "Server"}]}
{"image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["learn-pack.learnpack-vscode"]}, "ports": [{"port": 3000, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["learn-pack.learnpack-vscode"]}, "ports": [{"port": 3000, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["learn-pack.learnpack-vscode"]}, "ports": [{"port": 3000, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 22}]}
{"image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "cp .env.example .env; pipenv install; mysql -u root -e \"CREATE DATABASE example\"; pipenv run init; pipenv run migrate; pipenv run upgrade; pipenv run start;\n"}, {"command": "python3 welcome.py"}]}
{"github": {"prebuilds": {"main": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}, "tasks": [{"init": "npm install", "command": "gp open readme.md .\nnpm run edit\n"}, {"name": "Dev Server", "command": "npx browser-sync start --server \"docs\" --files \"docs\" --no-ui"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "echo \"sdkman_auto_answer=true\" >> $HOME/.sdkman/etc/config\nsdk install java 17.0.8-tem\nsdk install sbt\nsbt \"Test / compile\"\n"}]}
{"tasks": [{"init": "echo \"sdkman_auto_answer=true\" >> $HOME/.sdkman/etc/config\nsdk install java 17.0.8-tem\nsdk install sbt\nsbt \"Test / compile\"\n"}]}
{"tasks": [{"init": "echo \"sdkman_auto_answer=true\" >> $HOME/.sdkman/etc/config\nsdk install java 17.0.8-tem\nsdk install sbt\nsbt \"Test / compile\"\n"}]}
{"tasks": [{"init": "echo \"sdkman_auto_answer=true\" >> $HOME/.sdkman/etc/config\nsdk install java 17.0.8-tem\nsdk install sbt\nsbt \"Test / compile\"\n"}]}
{"tasks": [{"name": "Install", "init": "npm install && gp sync-done install\n"}, {"name": "Run Webpack", "init": "gp sync-await install", "command": "npm start"}, {"name": "Editor server", "init": "gp sync-await install", "command": "npm run editor-remote"}], "ports": [{"port": 1959, "onOpen": "open-preview"}]}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo apt install cmake -y\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo apt install cmake -y\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"tasks": [{"before": "rm -rf $HOME/.cargo\nunset CARGO_HOME\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource $HOME/.cargo/env\necho 'export CARGO_HOME=\"$HOME/.cargo\"' >> ~/.bashrc\nsource ~/.bashrc\nsudo apt install cmake -y\n", "init": "gp open src/lib.rs\nclear && printf '\\e[3J' && history -c\n"}], "vscode": {"extensions": ["matklad.rust-analyzer"]}}
{"image": {"file": "Dockerfile"}, "ports": [{"port": 4444, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}, {"port": 5900, "onOpen": "ignore"}], "tasks": [{"command": "npm install"}]}
{"image": {"file": "Dockerfile"}, "ports": [{"port": 4444, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}, {"port": 5900, "onOpen": "ignore"}], "tasks": [{"command": "npm install"}]}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"name": "Flutter env prep", "before": "flutter pub get\n"}], "ports": [{"port": 5900, "onOpen": "ignore", "name": "VNC Server"}, {"port": 6080, "onOpen": "ignore", "name": "VNC Client", "description": "noVNC web client"}, {"port": 8080, "onOpen": "ignore", "name": "Flutter Web", "visibility": "public"}, {"port": "9100-9199", "name": "Flutter DevTools", "onOpen": "ignore"}, {"port": "40000-50000", "onOpen": "ignore", "name": "Flutter Internals"}, {"port": 5037, "onOpen": "ignore", "name": "ADB"}, {"port": 6000, "onOpen": "ignore", "name": "Appetize SSH Tunnel"}], "vscode": {"extensions": ["dart-code.flutter", "dart-code.dart-code", "editorconfig.editorconfig", "ms-azuretools.vscode-docker"]}}
{"image": "corise/dbt-course-gitpod", "tasks": [{"command": "sudo /etc/init.d/postgresql start && mkdir -p /workspace/.dbt && ln -snf /workspace/.dbt ~/.dbt && export PGPASSWORD=corise PGUSER=corise PGDATABASE=dbt"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"image": "corise/dbt-course-gitpod", "tasks": [{"command": "sudo /etc/init.d/postgresql start && mkdir -p /workspace/.dbt && ln -snf /workspace/.dbt ~/.dbt && export PGPASSWORD=corise PGUSER=corise PGDATABASE=dbt"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"image": "corise/dbt-course-gitpod", "tasks": [{"command": "sudo /etc/init.d/postgresql start && mkdir -p /workspace/.dbt && ln -snf /workspace/.dbt ~/.dbt && export PGPASSWORD=corise PGUSER=corise PGDATABASE=dbt"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"image": "corise/dbt-course-gitpod", "tasks": [{"command": "sudo /etc/init.d/postgresql start && mkdir -p /workspace/.dbt && ln -snf /workspace/.dbt ~/.dbt && export PGPASSWORD=corise PGUSER=corise PGDATABASE=dbt"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 10000, "onOpen": "ignore"}], "tasks": [{"init": "npm install", "command": "echo \"Applying a temporary workaround until https://github.com/vitejs/vite/pull/1992 is fixed\"\n(\n  cd ./node_modules/vite/dist/node/chunks/ &&\n  sed -i 's/JSON.stringify(port)/JSON.stringify(443)/g' * &&\n  export WSS_HOST=`gp url 24678 | sed 's#https://##g'` &&\n  sed -i \"s#JSON.stringify(host)#JSON.stringify(\\\"$WSS_HOST\\\")#g\" *\n)\nnpm run dev\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "vscode": {"extensions": ["svelte.svelte-vscode", "bradlc.vscode-tailwindcss"]}}
{"ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 10000, "onOpen": "ignore"}], "tasks": [{"init": "npm install", "command": "echo \"Applying a temporary workaround until https://github.com/vitejs/vite/pull/1992 is fixed\"\n(\n  cd ./node_modules/vite/dist/node/chunks/ &&\n  sed -i 's/JSON.stringify(port)/JSON.stringify(443)/g' * &&\n  export WSS_HOST=`gp url 24678 | sed 's#https://##g'` &&\n  sed -i \"s#JSON.stringify(host)#JSON.stringify(\\\"$WSS_HOST\\\")#g\" *\n)\nnpm run dev\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "vscode": {"extensions": ["svelte.svelte-vscode", "bradlc.vscode-tailwindcss"]}}
{"tasks": [{"init": "npm install -g lambdatest-cypress-cli", "command": "lambdatest-cypress run"}]}
{"tasks": [{"init": "npm install -g lambdatest-cypress-cli", "command": "lambdatest-cypress run"}]}
{"github": {"prebuilds": {"pullRequestsFromForks": true, "addComment": true}}, "image": "ghcr.io/pahud/gitpod-workspace:latest", "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.1.5:9Wg0Glx/TwD8ElFBg+FKcQ=="]}}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "python app.py"}]}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "python app.py"}]}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "python app.py"}]}
{"tasks": [{"init": "pip install -r requirements.txt", "command": "python app.py"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install"}]}
{"image": "vvakame/review:3.1", "tasks": [{"command": "./setup.sh"}]}
{"image": "vvakame/review:3.1", "tasks": [{"command": "./setup.sh"}]}
{"image": "vvakame/review:3.1", "tasks": [{"command": "./setup.sh"}]}
{"image": "vvakame/review:3.1", "tasks": [{"command": "./setup.sh"}]}
{"image": "jelaniwoods/appdev2021-vanilla-rails@sha256:9d0dc73205215b24c7e313fa8fbbe49c135f497fe9bcbb5eb98d3c9480e679c6", "tasks": [{"command": "bundle install"}, {"init": "bin/setup"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 5432, "onOpen": "ignore"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb@0.2.1:BzpDuNAqJwUkxqT2t1YIuQ==", "CraigMaslowski.erb@0.0.1:5znDha/nn0PphUrpB9a5Nw==", "wingrunr21.vscode-ruby@0.26.0:VakXVw0C77hAQ3U3AZTn1Q==", "aliariff.vscode-erb-beautify@0.2.0:JPBIiJcuf3dj5jx4nE7u8Q==", "mbessey.vscode-rufo@0.2.1:QlBwvnvHJPqtDjkgo7+OEQ=="]}}
{"ports": [{"port": 3000}]}
{"image": "jelaniwoods/appdev2020-base", "tasks": [{"init": "bin/setup"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "vscode": {"extensions": ["shd101wyy.markdown-preview-enhanced@0.5.1:s3vD5qiY6/HbtRrgDlbMiQ==", "vortizhe.simple-ruby-erb@0.2.1:BzpDuNAqJwUkxqT2t1YIuQ==", "CraigMaslowski.erb@0.0.1:5znDha/nn0PphUrpB9a5Nw==", "Vense.rails-snippets@0.5.0:w1Rd4bmOp7tM7xc3UJruRQ==", "wingrunr21.vscode-ruby@0.26.0:VakXVw0C77hAQ3U3AZTn1Q=="]}}
{"vscode": {"extensions": ["esbenp.prettier-vscode"]}}
{"tasks": [{"init": "npm install"}]}
{"tasks": [{"init": "npm install"}]}
{"tasks": [{"init": "npm install"}]}
{"tasks": [{"init": "npm install"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i vercel -g && npm install && cp .env.example .env\n", "command": "npm i vercel -g && python docs/assets/greeting.py\n"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i vercel -g && npm install && cp .env.example .env\n", "command": "npm i vercel -g && python docs/assets/greeting.py\n"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i vercel -g && npm install && cp .env.example .env\n", "command": "npm i vercel -g && python docs/assets/greeting.py\n"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i vercel -g && npm install && cp .env.example .env\n", "command": "npm i vercel -g && python docs/assets/greeting.py\n"}]}
{"image": "gitpod/workspace-node-lts", "ports": [{"port": 1200, "onOpen": "notify", "visibility": "public"}, {"port": 3000, "onOpen": "notify", "visibility": "public"}], "tasks": [{"name": "deps", "before": "sudo apt update\nsudo apt install -y ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 wget xdg-util\nsudo apt install -y redis-server\n", "init": "pnpm i && pnpm i -C website && pnpm rb"}, {"name": "app", "command": "pnpm run dev", "openMode": "tab-after"}], "vscode": {"extensions": ["cweijan.vscode-database-client2", "dbaeumer.vscode-eslint", "eamodio.gitlens", "EditorConfig.EditorConfig", "esbenp.prettier-vscode", "deepscan.vscode-deepscan", "rangav.vscode-thunder-client", "sonarsource.sonarlint-vscode"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false}}}
{"image": "gitpod/workspace-full", "ports": [{"port": 4001, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install && bundle install", "command": "env PORT=4001 yarn run dev"}], "github": {"prebuilds": {"master": true}}}
{"image": "condaforge/mambaforge:latest", "tasks": [{"name": "Create snakemake env", "command": "mamba create -n snakemake -c bioconda -c conda-forge snakemake=7.18.2 -y"}]}
{"github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "addComment": true, "addCheck": true}}, "tasks": [{"name": "cp-demo", "before": "curl -L --http1.1 https://cnfl.io/cli | sudo sh -s -- -b /usr/local/bin\nif [[ \"$AUTOSTART\" =~ \"false\" ]]; then\n  echo \"\u2139\ufe0f AUTOSTART environment variable is set to false, so use ./scripts/start.sh to start cp-demo\"\nelse\n  echo \"\ud83d\ude80 Starting up cp-demo (you can disable autostart by exporting environment variable AUTOSTART=false, see https://www.gitpod.io/docs/environment-variables)\"\n  CLEAN=false VIZ=false ./scripts/start.sh || CLEAN=true VIZ=false ./scripts/start.sh || exit 1\n  echo \"\ud83d\ude80 You can now follow steps in https://docs.confluent.io/platform/current/tutorials/cp-demo/docs/on-prem.html#guided-tutorial\"\nfi\n"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}, "ports": [{"port": 2181, "onOpen": "ignore"}, {"port": 2182, "onOpen": "ignore"}, {"port": 8091, "onOpen": "ignore"}, {"port": 9091, "onOpen": "ignore"}, {"port": 10091, "onOpen": "ignore"}, {"port": 11091, "onOpen": "ignore"}, {"port": 12091, "onOpen": "ignore"}, {"port": 8092, "onOpen": "ignore"}, {"port": 9092, "onOpen": "ignore"}, {"port": 10092, "onOpen": "ignore"}, {"port": 11092, "onOpen": "ignore"}, {"port": 12092, "onOpen": "ignore"}, {"port": 8083, "onOpen": "ignore"}, {"port": 9200, "onOpen": "ignore"}, {"port": 9300, "onOpen": "ignore"}, {"port": 5601, "onOpen": "notify"}, {"port": 9021, "onOpen": "notify", "visibility": "public"}, {"port": 9022, "onOpen": "ignore"}, {"port": 8085, "onOpen": "ignore"}, {"port": 8088, "onOpen": "ignore", "visibility": "public"}, {"port": 8089, "onOpen": "ignore"}, {"port": 8086, "onOpen": "ignore"}]}
{"ports": [{"port": 1234, "onOpen": "open-preview"}, {"port": 3000, "onOpen": "ignore"}], "tasks": [{"init": "npm install", "command": "AWS_EXECUTION_ENV=true npm run sb"}, {"openMode": "split-right", "command": "LAMBDA_URL=`gp url 3000` npm run sf"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3306, "onOpen": "ignore"}, {"port": 8000, "onOpen": "ignore"}, {"port": 8002, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore", "visibility": "private"}, {"port": 9009, "onOpen": "ignore", "visibility": "private"}], "tasks": [{"before": "bash .gp/bash/before-tasks.sh", "init": "bash .gp/bash/init-gitpod.sh\nbash .gp/bash/init-project.sh\nbash .gp/bash/init-complete.sh\n", "name": "Main Terminal"}, {"openMode": "split-right", "command": "bash .gp/bash/start-server.sh\n", "name": "Web Server"}, {"openMode": "split-right", "command": "if bash .gp/bash/open-preview.sh; then exit; else bash .gp/bash/patch-preview.sh; fi\n", "name": "Extra Terminal"}], "vscode": {"extensions": ["felixfbecker.php-debug"]}}
{"tasks": [{"name": "Setup & start", "before": "sudo sh -c \"cat etc/hosts.txt >> /etc/hosts && mkdir -p /etc/routr/certs && cp etc/certs/signaling.p12 /etc/routr/certs/signaling.p12\"", "init": "npm run make", "command": "npm start"}], "ports": [{"port": "51901-51904", "onOpen": "ignore"}, {"port": "5060-5063", "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"vscode": {"extensions": ["vscjava.vscode-maven@0.21.0:37ZOg7jK2M04yXsE+ItbZg=="]}, "tasks": [{"init": "mvn clean install -DskipTests"}], "ports": [{"port": 8080, "onOpen": "open-browser"}, {"port": 8101, "onOpen": "ignore"}, {"port": 1099, "onOpen": "ignore"}, {"port": 5005, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Pip installs", "init": "pip install .[tests]"}], "github": {"prebuilds": {"master": false, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": false, "addBadge": false, "addLabel": false}}, "vscode": {"extensions": ["mhutchie.git-graph", "eamodio.gitlens", "littlefoxteam.vscode-python-test-adapter", "ms-python.python"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Payment API", "before": "cd src/backend/services/payment-api\n", "init": "go mod tidy\n", "command": ""}, {"name": "Basket API", "before": "cd src/backend/services/basket.api\n", "init": "go mod tidy\n"}, {"name": "Order API", "before": "cd src/backend/services/order-api\n", "init": "mvn package\n"}], "vscode": {"extensions": ["golang.go", "vscjava.vscode-java-pack"]}}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run watch"}], "ports": [{"port": "6000-6999", "onOpen": "ignore"}], "vscode": {"extensions": ["langium.langium-vscode", "dbaeumer.vscode-eslint"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pdk bundle install"}], "vscode": {"extensions": ["puppet.puppet-vscode@1.0.0:oSzfTkDf6Cmc1jOjgW33VA=="]}}
{"tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "effect.effect-debugger"]}}
{"checkoutLocation": "leeway", "workspaceLocation": "leeway", "image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000}], "tasks": [{"init": "git config core.hooksPath .githooks;\ngo generate -v ./...\n"}], "vscode": {"extensions": ["golang.go", "eamodio.gitlens"]}}
{"tasks": [{"name": "Docker", "command": "docker-compose up -d"}, {"name": "Dev", "init": "bash setup-dev-environment", "command": "npm install && npx prisma db push"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"name": "setup", "init": "nvm install 14\nnvm use 14\nyarn\ncp .env.example .env\nyarn l10n:generate\n", "command": "yarn start"}], "ports": [{"port": 4200, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "redis-server"}, {"before": "cp ./init-localstack.sh /docker-entrypoint-initaws.d/init-localstack.sh", "init": "pip install --quiet localstack[full]", "command": "/workspace/.pip-modules/bin/localstack start --host"}, {"before": "npm install maildev -g", "command": "echo \"maildev.on('new', ({ html }) => console.log('The login OTP is ' + html.match(/\\d{6}/)[0]))\" >> $(which maildev) && maildev --verbose"}, {"before": "export ACCESS_ENDPOINT=`gp url 4566`", "init": "npm install", "command": "/tmp/wait-for-it.sh localhost:4566 -t 0 -- ./init-localstack.sh && echo \"Run npm run docker-dev to begin\""}], "ports": [{"port": 5432, "onOpen": "ignore"}, {"port": 6379, "onOpen": "ignore"}, {"port": 4566, "onOpen": "ignore"}, {"port": 4572, "onOpen": "ignore"}, {"port": 9229, "onOpen": "ignore"}, {"port": 8080, "onOpen": "ignore"}, {"port": 1025, "onOpen": "ignore"}, {"port": 1080, "onOpen": "ignore"}]}
{"tasks": [{"name": "Setup Dev Environment", "before": "npm i -g @aeternity/aeproject@^4.6.0\nnpm i\n", "init": "aeproject env\n", "command": "aeproject -V\naeproject --help\n"}], "vscode": {"extensions": ["hackbg.sophia"]}}
{"tasks": [{"init": "pnpm install && pnpm run build", "command": "pnpm dev"}, {"name": "Generate config", "command": "eval $(gp env -e)\necho \"$EMBEDBASE_DOCS\" | tr ' ' '\\n' > .env\n"}], "vscode": {"extensions": ["github.copilot", "toba.vsfire", "wix.vscode-import-cost", "aaron-bond.better-comments", "perkovec.emoji", "k--kato.intellij-idea-keybindings", "christian-kohler.npm-intellisense", "dbaeumer.vscode-eslint", "unifiedjs.vscode-mdx"]}, "ports": [{"port": 3000, "visibility": "public"}]}
{"tasks": [{"before": "export GHCUP_INSTALL_BASE_PREFIX=/workspace/.ghcup\nexport CABAL_DIR=/workspace/.cabal\nsource \"$GHCUP_INSTALL_BASE_PREFIX/.ghcup/env\" || true\n", "init": "curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_MINIMAL=1 sh\nsource \"$GHCUP_INSTALL_BASE_PREFIX/.ghcup/env\"\nghcup install ghc 9.4.4\nghcup set ghc 9.4.4\nghcup install cabal\ncabal update\n./dev/build.sh\n", "command": "./_build/elm-format"}], "vscode": {"extensions": ["haskell.haskell"]}}
{"tasks": [{"before": "cd ui", "init": "npm install", "command": "npm start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "IEx Shell", "init": "mix deps.get\nmix compile\n", "command": "iex -S mix"}], "vscode": {"extensions": ["bradlc.vscode-tailwindcss", "benvp.vscode-hex-pm-intellisense", "victorbjorklund.phoenix"]}}
{"tasks": [{"init": "nvm install && npm install && npm run build"}]}
{"tasks": [{"init": "pnpm install", "command": "pnpm dev"}]}
{"tasks": [{"init": "./gradlew node-scripts:build"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn && gp sync-done boot"}, {"before": "cd gulp", "init": "gp sync-await boot && yarn", "command": "yarn gulp"}], "ports": [{"port": 3005, "onOpen": "open-preview"}]}
{"tasks": [{"init": "yarn install", "command": "yarn develop"}], "ports": [{"port": 8080, "onOpen": "open-preview"}, {"port": 63100}]}
{"tasks": [{"init": "make bootstrap && make dev"}], "vscode": {"extensions": ["golang.go"]}}
{"tasks": [{"name": "Setup", "init": "python -m pip install --upgrade pip\npython -m pip install -r requirements.txt\n", "command": "clear\necho \"==============\"\necho \"    Welcome   \"\necho \"==============\"\npyenv versions\necho \"\"\n"}], "ports": [{"port": 8888, "onOpen": "ignore"}, {"port": 5000, "onOpen": "ignore"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker", "ms-python.python"]}}
{"tasks": [{"init": "bundle install"}], "gitConfig": {"user.email": "iavael@users.noreply.github.com"}}
{"tasks": [{"command": "cd /workspace && git clone https://github.com/tree-sitter/tree-sitter && cd tree-sitter/cli && cargo install --path ."}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "mvn -B -f pom.xml clean install verify\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}}
{"image": "bubbler9903/dyalog-apl-gitpod:latest", "ports": [{"port": 4502, "protocol": "http"}], "tasks": [{"command": "RIDE_INIT=HTTP:*:4502 dyalog"}]}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"before": "sudo mount -t tmpfs shm -osize=4096m /dev/shm"}, {"name": "Flutter env prep", "before": "flutter pub get\n"}], "ports": [{"port": 5900, "onOpen": "ignore", "visibility": "public", "name": "VNC Server"}, {"port": 6080, "onOpen": "ignore", "visibility": "public", "name": "VNC Client", "description": "noVNC web client"}, {"port": 8080, "onOpen": "ignore", "name": "Flutter Web", "visibility": "public"}, {"port": "9100-9199", "name": "Flutter DevTools", "onOpen": "ignore"}, {"port": "40000-50000", "onOpen": "ignore", "name": "Flutter Internals", "visibility": "public"}, {"port": 5037, "onOpen": "ignore", "name": "ADB"}, {"port": 6000, "onOpen": "ignore", "name": "Appetize SSH Tunnel"}], "vscode": {"extensions": ["dart-code.flutter", "dart-code.dart-code", "editorconfig.editorconfig", "ms-azuretools.vscode-docker"]}}
{"tasks": [{"command": "npm install -g browser-sync && browser-sync start -s -f . --no-notify --host $(gp url|sed 's/https\\?:\\/\\///') --port 9000\n"}], "ports": [{"port": 9000, "onOpen": "open-browser"}, {"port": 3001, "onOpen": "ignore"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npx elm-tooling install && npm run dev"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "nvm use default && npm install near-cli -g --no-optional", "init": "yarn && brew install tree", "command": "clear && echo Explore non-fungible tokens on NEAR Protocol"}]}
{"tasks": [{"init": "npm install \\\n&& npm run langium:generate \\\n&& npm run build \\\n&& echo \"Hit F5 to try the language in a new Gitpod tab\"\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "DDEV Initialization", "init": "export DDEV_NONINTERACTIVE=true\nddev init\nddev stop -O\n", "command": "export DDEV_NONINTERACTIVE=true\nddev start\nddev list-site-links\n"}], "jetbrains": {"phpstorm": {"prebuilds": {"version": "stable"}, "plugins": ["ru.adelf.idea.dotenv", "de.espend.idea.php.annotation", "fr.adrienbrault.idea.symfony2plugin", "name.kropp.intellij.makefile", "mobi.hsz.idea.gitignore", "de.espend.idea.php.drupal", "org.jetbrains.plugins.node-remote-interpreter", "mdx.js"]}}, "github": {"prebuilds": {"master": true, "pullRequests": true}}, "ports": [{"port": 2222, "onOpen": "ignore"}, {"port": 3306, "onOpen": "ignore"}, {"port": 6942, "onOpen": "ignore"}, {"port": 8080, "onOpen": "ignore"}, {"port": 8081, "onOpen": "ignore"}, {"port": 8025, "onOpen": "ignore"}, {"port": 8026, "onOpen": "ignore"}, {"port": 8036, "onOpen": "ignore"}, {"port": 8037, "onOpen": "ignore"}, {"port": 8888, "onOpen": "ignore"}, {"port": 8889, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 9999}]}
{"tasks": [{"init": "go get && go build .", "command": "go run main.go"}]}
{"tasks": [{"init": "install libpcap", "command": "brew install libpcap && eval $(gp env -e LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/linuxbrew/.linuxbrew/lib/)"}], "vscode": {"extensions": ["serayuzgur.crates@0.4.7:HMkoguLcXp9M3ud7ac3eIw==", "belfz.search-crates-io@1.2.1:kSLnyrOhXtYPjQpKnMr4eQ=="]}}
{"image": "mcr.microsoft.com/devcontainers/go:1.20", "tasks": [{"name": "Init", "init": "go get && go mod download && go install github.com/onsi/ginkgo/v2/ginkgo"}], "vscode": {"extensions": ["golang.Go", "MS-vsliveshare.vsliveshare"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "frontend", "init": "cd frontend && npm install && npm run dev"}, {"name": "server", "init": "cd server && vr watch", "openMode": "split-right"}], "ports": [{"port": 8000, "onOpen": "ignore"}, {"port": 4000, "onOpen": "ignore"}], "vscode": {"extensions": ["voorjaar.windicss-intellisense", "k--kato.intellij-idea-keybindings", "svelte.svelte-vscode", "github.vscode-pull-request-github", "denoland.vscode-deno", "akamud.vscode-theme-onedark"]}}
{"image": "leanprovercommunity/mathlib:gitpod", "vscode": {"extensions": ["jroesch.lean"]}, "tasks": [{"command": ". /home/gitpod/.profile && leanpkg configure && leanproject get-mathlib-cache"}]}
{"image": {"file": ".devcontainer/Dockerfile", "context": ".devcontainer"}, "vscode": {"extensions": ["golang.Go"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "echo \"export PUPPETEER_CACHE_DIR=/workspace/base-config-docker/node_modules/.cache/puppeteer\" >> /home/gitpod/.bashrc\ngitpod-env-per-project >> /home/gitpod/.bashrc && source /home/gitpod/.bashrc", "init": "git config --global user.name \"Sebastian Landwehr\"\ngit lfs pull && yarn --frozen-lockfile"}], "vscode": {"extensions": ["https://sebastianlandwehr.com/vscode-extensions/karlito40.fix-irregular-whitespace-0.1.1.vsix", "https://sebastianlandwehr.com/vscode-extensions/adrianwilczynski.toggle-hidden-1.0.2.vsix", "octref.vetur@0.33.1"]}}
{"tasks": [{"init": "mvn install -DskipTests=false"}]}
{"tasks": [{"name": "read", "command": "gp ports await 23000 && gp open README.md"}, {"name": ".env-restore", "command": "if [ -f .env ]; then\n  # If this workspace already has a .env, don't override it\n  # Local changes survive a workspace being opened and closed\n  # but they will not persist between separate workspaces for the same repo\n  echo \"Found .env in workspace\"\nelse\n  if [ -z \"${DOTENV}\" ]; then\n    # There is no $DOTENV from a previous workspace\n    # Default to the example .env\n    echo \"Setting example .env\"\n    cp .env.example .env \n  else\n    # After making changes to .env, run this line to persist it to $DOTENV\n    #   gp env DOTENV=\"$(base64 .env | tr -d '\\n')\"\n    # \n    # Environment variables set this way are shared between all your workspaces for this repo\n    # The lines below will read $DOTENV and print a .env file\n    echo \"Restoring .env from Gitpod\"\n    echo \"${DOTENV}\" | base64 -d > .env\n  fi\nfi\ngp sync-done .env-restore\n"}, {"name": "plantuml-server", "before": "docker run -d -p 8080:8080 plantuml/plantuml-server:tomcat"}, {"name": "mongodb", "before": "docker run --name mongodb -d -p 27017:27017 -v /workspace/data:/data/db mongo", "command": "gp sync-done mongodb"}, {"name": "dependencies", "init": "npm install --location=global npm@latest\nnpm install -g nodemon\nnpm install\n", "command": "gp sync-done dependencies"}, {"name": "start", "init": "gp sync-await .env-restore\ngp sync-await mongodb\ngp sync-await dependencies\n", "command": "docker-compose up frontend backend --build\n"}], "ports": [{"port": 27017, "name": "mongodb-local", "onOpen": "ignore", "visibility": "private"}, {"port": 3000, "name": "default-express", "onOpen": "ignore", "visibility": "private"}, {"port": 4000, "name": "default-from-env-file", "onOpen": "ignore", "visibility": "private"}, {"port": 5500, "name": "liveserver", "onOpen": "ignore", "visibility": "private"}, {"port": 8080, "name": "plantuml-server", "onOpen": "ignore", "visibility": "private"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker", "IronGeek.vscode-env", "dbaeumer.vscode-eslint", "eamodio.gitlens", "xabikos.JavaScriptSnippets", "ritwickdey.liveserver", "mongodb.mongodb-vscode", "christian-kohler.npm-intellisense", "christian-kohler.path-intellisense", "jebbs.plantuml", "esbenp.prettier-vscode", "humao.rest-client", "octref.vetur", "vscode-icons-team.vscode-icons"]}, "github": {"prebuilds": {"addCheck": "prevent-merge-on-error"}}}
{"image": {"file": ".gitpod.dockerfile", "context": "apache"}, "ports": [{"port": 8080, "onOpen": "open-preview"}], "tasks": [{"name": "Terminal", "command": "echo \"\"; echo \"Commands you can try:\"; echo \" * apachectl stop\"; echo \" * apachectl start\"; echo \" * gp open /var/log/apache2/access.log\"; echo \" * gp open /var/log/apache2/error.log\";\n"}, {"name": "Apache", "command": "apachectl start && multitail /var/log/apache2/access.log -I /var/log/apache2/error.log\n"}]}
{"tasks": [{"command": "npm install && sdk install java"}]}
{"tasks": [{"init": "bundle config set --local path '/workspace/.rvm' && bundle install", "command": "bundle exec jekyll serve"}], "ports": [{"port": 4000, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": true}}}
{"tasks": [{"before": "wget -qOdatabase-setup.sh https://codejudge-starter-repo-artifacts.s3.ap-south-1.amazonaws.com/gitpod/backend/python/gitpod-setup.sh && chmod 0755 database-setup.sh && bash database-setup.sh 2.7.17\n", "init": "pip install --upgrade pip\npython -m pip install Flask==1.0.4\npip install -r requirements.txt\n", "command": "python restapi.py"}], "ports": [{"port": 8080, "name": "Backend Server", "onOpen": "open-browser", "visibility": "public"}, {"port": 3306, "name": "MySQL Server", "onOpen": "ignore", "visibility": "public"}, {"port": 27017, "name": "MongoDB Server", "onOpen": "ignore", "visibility": "public"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "pip install -r \"requirements.txt\";\n", "command": "pip install -r \"requirements.txt\";\n"}], "ports": [{"port": "9000-9099", "onOpen": "ignore"}], "vscode": {"extensions": ["ms-toolsai.jupyter", "vscode.python"]}}
{"tasks": [{"init": "sh -ci \"$(curl -fsSL https://smartcontracts.org/install.sh)\"\necho 'export PATH=$PATH:/home/gitpod/bin' >> ~/.bash_profile\nsource ~/.bash_profile\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\nsource /workspace/.cargo/env\ncargo install --git https://github.com/dfinity/experimental-minting-tool\ncargo install ic-cdk-optimizer\n", "command": "cd /workspace/nft-links/blockchain/icp/dip721-nft-container\nsed -i \"s/0.10.0/$(dfx --version | awk '{ print $2 }')/g\" dfx.json\ndfx start --background --clean\ndfx deploy --no-wallet --argument \\\n\"(record {\n    name = \\\"NFT Links\\\";\n    symbol = \\\"NFTL\\\";\n    logo = opt record {\n        data = \\\"$(base64 -i ./logo.png)\\\";\n        logo_type = \\\"image/png\\\";\n    };\n    custodians = opt vec { principal \\\"$(dfx identity get-principal)\\\" };\n})\"\nminting-tool local \"$(dfx canister id dip721_nft_container)\" --owner \"$(dfx identity get-principal)\" --file ./logo.png --sha2-auto\n"}, {"init": "echo 'place .env from discord chat!'\n", "command": "npm i -g vercel \ncd frontend\nyarn install\nvercel dev\n"}, {"init": "echo 'test api'\n", "command": "curl 'http://localhost:3000/api/icp/mint?nftId=123123&userAddress=abcqwe'\n"}]}
{"tasks": [{"init": "wget -qOdatabase-setup.sh https://codejudge-starter-repo-artifacts.s3.ap-south-1.amazonaws.com/backend-project/gitpod/node/db-gitpod-setup.sh && chmod 0755 database-setup.sh && chmod 0755 ./chrome-test-setup.sh && bash database-setup.sh && sh ./chrome-test-setup.sh\n"}], "ports": [{"port": 8080, "onOpen": "ignore", "visibility": "public"}, {"port": 9515, "onOpen": "ignore", "visibility": "public"}]}
{"tasks": [{"init": "echo \"Replace me with a build script for the project.\"", "command": "echo \"Replace me with something that should run on every start, or just remove me entirely.\""}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["axetroy.vscode-deno@3.7.0:YlA2jgY/k6sHhu6khQB+gw=="]}}
{"tasks": [{"init": "yarn install", "command": "yarn prev"}], "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"command": "gp env NEXT_PUBLIC_SERVER_ID=$(gp url 3000) > ~/.env"}, {"command": "gp env NEXT_PUBLIC_SERVER_ID=$(gp url 3000) > /workspace/python-challenge-server/.env"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "Front End Dev Server", "before": "npm install -g @angular/cli", "init": "cd src/DateNightRandomizerWeb;\nnpm install;", "command": "cd src/DateNightRandomizerWeb;\nng serve --public-host \"$(gp url 4200 | sed 's+http://++')\""}, {"name": "App Server", "init": "echo 'init script'; # runs during prebuild\ncd src/DateNightRandomizerConsole;\nnpm install;\nnpm run build;", "command": "echo 'start script'\ncd src/DateNightRandomizerConsole;\nnpm run start"}, {"name": "Terminal", "command": "./.gitpod/setup.sh;\ncd src/"}], "ports": [{"port": 4200, "onOpen": "open-browser"}, {"port": 3000, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": false, "addComment": false, "addBadge": true}}, "vscode": {"extensions": ["bradlc.vscode-tailwindcss"]}}
{"tasks": [{"init": "pip install -r requirements.txt\npython init_env.py\n", "command": "python app.py"}], "vscode": {"extensions": ["ms-python.python"]}}
{"tasks": [{"init": "go build web.go\n./web &\nsleep 10\ngp ports await 8080 && gp preview $(gp url 8080)/edit/a1\n"}], "ports": [{"port": 8080, "visibility": "private"}]}
{"image": {"file": "gitpod-config/.gitpod.Dockerfile", "context": "gitpod-config/docker-content"}, "tasks": [{"name": "Install dependencies", "init": "npm i"}, {"name": "Get a cluster + Seed it with test data + Create Atlas Search Index", "command": "MONGODB_CONNECTION_STRING=$(atlas_up)\nsleep 5\nmongosh $MONGODB_CONNECTION_STRING patterns/_load.js\npatterns/_create-search-index.sh\n"}, {"name": "Cleanup Atlas Cluster", "command": "atlas_cleanup_when_done\n"}], "vscode": {"extensions": ["mongodb.mongodb-vscode", "standard.vscode-standard"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "start stress test", "command": "stress-test.sh"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "bundle install"}]}
{"image": "jelaniwoods/base-stata14"}
{"image": {"file": ".gitpod/Dockerfile", "context": ".gitpod"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn", "env": {"NUXT_TELEMETRY_DISABLED": 1}, "command": "yarn dev"}], "vscode": {"extensions": ["EditorConfig.EditorConfig", "donjayamanne.githistory", "octref.vetur", "ms-vscode.makefile-tools"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "experimentalNetwork": true, "vscode": {"extensions": ["platformio.platformio-ide"]}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"before": "export PATH=$FLUTTER_HOME/bin:$ANDROID_HOME/bin:$ANDROID_HOME/platform-tools:$PATH\nmkdir -p /home/gitpod/.android\ntouch /home/gitpod/.android/repositories.cfg\n", "init": "echo \"Installing Flutter SDK...\"\ncd /workspace && wget -qO flutter_sdk.tar.xz https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_v1.9.1+hotfix.4-stable.tar.xz && tar -xf flutter_sdk.tar.xz && rm -f flutter_sdk.tar.xz\necho \"Installing Android SDK...\"\nmkdir -p /workspace/android-sdk && cd /workspace/android-sdk && wget https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip && unzip -qq sdk-tools-linux-4333796.zip && rm -f sdk-tools-linux-4333796.zip\necho y | /workspace/android-sdk/tools/bin/sdkmanager \"platform-tools\" \"platforms;android-28\" \"build-tools;28.0.3\"\necho \"Init Flutter...\"\nflutter channel master\nflutter upgrade\nyes | flutter doctor --android-licenses\ncd /workspace/gitpod-flutter\nflutter pub get\nflutter config --enable-web\nflutter doctor\n", "command": "echo \"Ready to go!\"\n"}], "vscode": {"extensions": ["Dart-Code.dart-code@3.5.0-beta.1:Wg2nTABftVR/Dry4tqeY1w==", "Dart-Code.flutter@3.5.0:/kOacEWdiDRLyN/idUiM4A=="]}}
{"github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}, "tasks": [{"name": "setup", "init": "pushd /workspace\nmkdir /workspace/.micromamba\nwget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\npopd\n# bootstrap activation commands for other tasks to reuse\ncat <<EOT > /workspace/bin/activate-env.sh\nexport MAMBA_ROOT_PREFIX=/workspace/.micromamba\nexport MAMBA_EXE=/workspace/bin/micromamba\n$(/workspace/bin/micromamba shell hook --shell=bash)\nexport JUPYTER_PREFER_ENV_PATH=1\nmicromamba activate\nEOT\nsource /workspace/bin/activate-env.sh\nmicromamba config append channels conda-forge\nmicromamba install -n base -y -f .binder/environment.yml\nsource /workspace/bin/activate-env.sh\ndoit build\n", "command": "gp sync-done setup\nsource /workspace/bin/activate-env.sh\ndoit watch\n"}, {"name": "watch", "command": "gp sync-await setup\nsource /workspace/bin/activate-env.sh\ndoit serve\n"}, {"name": "docs", "command": "gp sync-await setup\nsource /workspace/bin/activate-env.sh\ndoit watch:docs\n"}, {"name": "auto-activate", "command": "gp sync-await setup\necho \"source /workspace/bin/activate-env.sh\" >> ~/.bashrc\nsource /workspace/bin/activate-env.sh\n"}], "ports": [{"port": 5000}, {"port": 8000}, {"port": 8888}]}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"command": "bc run;\n"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"tasks": [{"name": "Server", "env": {"WOODPECKER_OPEN": true, "WOODPECKER_ADMIN": "woodpecker", "WOODPECKER_HOST": "http://host.docker.internal:8000", "WOODPECKER_SECRET": "1234", "WOODPECKER_GITEA": true, "WOODPECKER_DEV_WWW_PROXY": "http://localhost:8010", "WOODPECKER_BACKEND_DOCKER_NETWORK": "ci_default"}, "init": "go mod tidy\nmkdir -p web/dist\ntouch web/dist/index.html\nmake build-server\n", "command": "echo WOODPECKER_GITEA_URL=https://3000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST} >> .env\necho WOODPECKER_DEV_OAUTH_HOST=https://8000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST} >> .env\ngp sync-await gitea\ngp sync-done woodpecker-server\ngo run github.com/woodpecker-ci/woodpecker/cmd/server\n"}, {"name": "Agent", "env": {"WOODPECKER_SERVER": "localhost:9000", "WOODPECKER_SECRET": "1234", "WOODPECKER_MAX_PROCS": 1, "WOODPECKER_HEALTHCHECK": false}, "command": "gp sync-await woodpecker-server\ngo run github.com/woodpecker-ci/woodpecker/cmd/agent\n"}, {"name": "Gitea", "command": "export DOCKER_COMPOSE_CMD=\"docker-compose -f docker-compose.gitpod.yml -p woodpecker\"\nexport GITEA_CLI_CMD=\"$DOCKER_COMPOSE_CMD exec -u git gitea gitea\"\n$DOCKER_COMPOSE_CMD up -d\nsleep 10s\n$GITEA_CLI_CMD admin user create --username woodpecker --password password --email woodpecker@localhost --admin\nexport GITEA_TOKEN=$($GITEA_CLI_CMD admin user generate-access-token -u woodpecker --raw)\nGITEA_OAUTH_APP=$(curl -X 'POST' 'http://localhost:3000/api/v1/user/applications/oauth2' \\\n  -H 'accept: application/json' -H 'Content-Type: application/json' -H \"Authorization: token ${GITEA_TOKEN}\" \\\n  -d \"{ \\\"name\\\": \\\"Woodpecker CI\\\", \\\"redirect_uris\\\": [ \\\"https://8000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}/authorize\\\" ] }\")\necho WOODPECKER_GITEA_CLIENT=$(echo $GITEA_OAUTH_APP | jq -r .client_id) >> .env\necho WOODPECKER_GITEA_SECRET=$(echo $GITEA_OAUTH_APP | jq -r .client_secret) >> .env\ncurl -X 'POST' \\\n  'http://localhost:3000/api/v1/user/repos' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: token ${GITEA_TOKEN}\" \\\n  -d '{ \"auto_init\": false, \"name\": \"woodpecker-test\", \"private\": true, \"template\": false, \"trust_model\": \"default\" }'\ncd contrib/woodpecker-test-repo\ngit init\ngit checkout -b main\ngit remote add origin http://woodpecker:${GITEA_TOKEN}@localhost:3000/woodpecker/woodpecker-test.git\ngit add .\ngit commit -m \":tada: Initial commit\"\ngit push -u origin main\ngp sync-done gitea\n$DOCKER_COMPOSE_CMD logs -f\n"}, {"name": "App", "before": "cd web/\n", "init": "pnpm install\n", "command": "pnpm start\n"}, {"name": "Docs", "before": "cd docs/\n", "init": "pnpm install\npnpm build:woodpecker-plugins\n", "command": "pnpm start --port 4000\n"}], "ports": [{"port": 3000, "onOpen": "ignore", "visibility": "public"}, {"port": 8000, "onOpen": "notify", "visibility": "public"}, {"port": 9000, "onOpen": "ignore"}, {"port": 8010, "onOpen": "ignore"}, {"port": 4000, "onOpen": "notify"}], "vscode": {"extensions": ["golang.go", "EditorConfig.EditorConfig", "dbaeumer.vscode-eslint", "esbenp.prettier-vscode", "voorjaar.windicss-intellisense", "johnsoncodehk.volar", "redhat.vscode-yaml", "davidanson.vscode-markdownlint", "streetsidesoftware.code-spell-checker"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Configure Mirage", "init": "eval $(opam env)\nmake configure\n"}, {"name": "Compile unikernel", "init": "eval $(opam env)\nmake build\n"}, {"name": "Shell", "command": "eval $(opam env)"}], "vscode": {"extensions": ["ocamllabs.ocaml-platform"]}}
{"tasks": [{"init": "echo 'init script' # runs during prebuild\npython -m venv .venv\nsource .venv/bin/activate\npip install robotframework==6.0.2\npip install -r requirements.txt\nrfbrowser init\n", "command": "echo 'start script'\n"}], "image": "gitpod/workspace-full-vnc", "ports": [{"port": 6080, "onOpen": "open-preview"}], "vscode": {"extensions": ["ms-python.python", "d-biehl.robotcode"]}}
{"image": "gitpod/workspace-python", "tasks": [{"init": "pip install -r sphinx/requirements.txt\n"}], "vscode": {"extensions": ["ritwickdey.LiveServer", "trond-snekvik.simple-rst"]}}
{"tasks": [{"init": "echo \"Replace me with a build script for the project.\"", "command": "set -o vi"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["vscjava.vscode-java-debug", "Pivotal.vscode-boot-dev-pack"]}}
{"image": {"file": "gitpod.Dockerfile"}, "tasks": [{"name": "tailscaled", "command": "sudo tailscaled\n"}, {"name": "tailscale", "command": "sudo -E tailscale up --hostname \"gitpod-${GITPOD_WORKSPACE_ID}\" \\\n                     --authkey \"${TAILSCALE_AUTHKEY}\"\n"}, {"init": "./gradlew build"}], "experimentalNetwork": true}
{"tasks": [{"name": "amazon-ecs-cli", "init": "brew install amazon-ecs-cli\n"}, {"name": "aws-cli", "env": {"AWS_CLI_AUTO_PROMPT": "on-partial"}, "init": "cd /workspace\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\ncd $THEIA_WORKSPACE_ROOT\n"}], "vscode": {"extensions": ["amazonwebservices.aws-toolkit-vscode"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000}, {"port": 3306}], "tasks": [{"init": "echo 'init script'", "command": "echo 'start script'"}], "vscode": {"extensions": ["formulahendry.vscode-mysql@0.4.0:ozffYq4AkDKzFalv61HFIw==", "Oracle.oracledevtools@19.3.2:kGCpjj0SbFUu66290YMnRA=="]}}
{"ports": [{"port": 8080}], "checkoutLocation": "src/github.com/demo-apps/go-gin-app", "workspaceLocation": ".", "tasks": [{"init": "cd /workspace/src/github.com/demo-apps/go-gin-app && go get -v ./... && go build -o app\n", "command": "cd /workspace/src/github.com/demo-apps/go-gin-app && ./app\n"}]}
{"tasks": [{"init": "npm install", "command": "npm start"}], "ports": [{"port": 3200, "onOpen": "open-preview"}]}
{"image": "ghcr.io/lichess-org/lila-gitpod:main", "tasks": [{"name": "ui", "command": "gp sync-await setup\n## Compile js + css\ncd /workspace/lila\n./ui/build -w\n"}, {"name": "lila", "command": "gp sync-await setup\ncd /workspace/lila\nexport COURSIER_CACHE=/workspace/coursier-cache\nsbt bloopInstall\nmkdir ~/.bloop && echo '{\"javaOptions\": [ \"-Dfile.encoding=UTF-8\" ]}' > ~/.bloop/bloop.json\ngp sync-done lila-sbt\nbloop compile lila\nbloop run lila -m lila.app.Lila\n"}, {"name": "lila-ws", "command": "gp sync-await lila-sbt\ncd /workspace/lila-ws\nexport COURSIER_CACHE=/workspace/coursier-cache\nsbt compile\nsbt -Dconfig.file=/workspace/lila-ws-gitpod-application.conf run\n"}, {"name": "setup", "command": "gp open /workspace/lila-gitpod/gitpod/Welcome.md\nsudo service nginx restart\ncd /workspace\ngit clone https://github.com/lichess-org/lila.git\ngit clone https://github.com/lichess-org/lila-ws.git\ngit clone https://github.com/lichess-org/lila-db-seed.git\ngit clone https://github.com/lichess-org/fishnet.git --recursive\ngit clone https://github.com/lichess-org/lila-fishnet.git\n## Create config for lila\ncp /workspace/lila/conf/application.conf.default /workspace/lila/conf/application.conf\ntee -a /workspace/lila/conf/application.conf <<EOF\nnet.site.name = \"lila-gitpod\"\nnet.domain = \"$(gp url 8080 | cut -c9-)\"\nnet.socket.domains = [ \"$(gp url 8080 | cut -c9-)\" ]\nnet.base_url = \"$(gp url 8080)\"\nnet.asset.base_url = \"$(gp url 8080)\"\nexternalEngine.endpoint = \"$(gp url 9666)\"\nswiss.bbpairing = \"/opt/bbpPairings/bbpPairings.exe\"\ngame.gifUrl = \"http://localhost:6175\"\nEOF\n## Create config for lila-ws (websockets)\ntee /workspace/lila-ws-gitpod-application.conf <<EOF\ninclude \"application\"\ncsrf.origin = \"$(gp url 8080)\"\nEOF\n## Create config for fishnet clients\ntee /workspace/fishnet/fishnet.ini <<EOF\n[fishnet]\ncores=auto\nsystembacklog=long\nuserbacklog=short\nEOF\n## Setup initial database and seed test data (users, games, puzzles, etc)\nmkdir -p /workspace/mongodb-data\nsudo mongod --fork --dbpath /workspace/mongodb-data --logpath /var/log/mongod.log\nmongo lichess /workspace/lila/bin/mongodb/indexes.js\npython3.9 /workspace/lila-db-seed/spamdb/spamdb.py\nmongosh lichess --quiet --file /workspace/lila-gitpod/scripts/mongodb/users.js\nredis-server --daemonize yes\ngp sync-done setup\n## Switch editor to lila workspace\nopen --reuse-window /workspace/lila\n"}], "ports": [{"port": 8080, "name": "lichess", "description": "Your Lichess development site"}, {"port": 9663, "name": "lila", "onOpen": "ignore"}, {"port": 9664, "name": "lila-ws", "onOpen": "ignore"}, {"port": 9665, "name": "lila-fishnet"}, {"port": 9666, "name": "lila-engine", "visibility": "public"}, {"port": 9673, "name": "lila-search"}, {"port": 6175, "name": "lila-gif"}, {"port": 6379, "name": "redis", "onOpen": "ignore"}, {"port": 8212, "name": "bloop", "onOpen": "ignore"}, {"port": 9200, "name": "elasticsearch"}, {"port": 9300, "name": "elasticsearch-cluster"}, {"port": 27017, "name": "mongodb", "onOpen": "ignore"}, {"port": 3001, "name": "picfit"}, {"port": 8000, "name": "docs"}, {"port": 587, "name": "smtp", "onOpen": "ignore"}, {"port": 8025, "name": "mailhog"}], "vscode": {"extensions": ["scala-lang.scala"]}}
{"image": "gitpod/workspace-java-17", "tasks": [{"name": "Build and test", "init": "mvn test"}, {"name": "Start Postgresql", "command": "docker run --name postgres-jtaf -d -p5432:5432 -e POSTGRES_DB=jtaf4 -e POSTGRES_USER=jtaf4 -e POSTGRES_PASSWORD=jtaf420 -d postgres:15.2"}], "ports": [{"port": 8484, "onOpen": "open-browser"}]}
{"tasks": [{"before": "echo \"before-------------------------\"\nsudo apt install pgcli -y\ndocker-compose -f docker-compose-dev.yml pull\necho '-----------------------------'\ngo get\necho '-----------------------------'\ndocker network create auth_proxy_network\necho '-----------------------------'\nalias d='docker'\nalias dc='docker-compose'\nprintf \"alias d='docker'\\n\" >> ~/.bashrc\nprintf \"alias dc='docker-compose'\\n\" >> ~/.bashrc\necho '-----------------------------'\nmkdir -p ~/.config/fish/functions\nprintf \"function d\\n  docker \\$argv;\\nend\\n\" > ~/.config/fish/functions/d.fish\nprintf \"function dc\\n  docker-compose \\$argv;\\nend\\n\" > ~/.config/fish/functions/dc.fish\necho \"end before-------------------------\"\n"}, {"init": "echo \"init-------------------------\"\n"}], "ports": [{"port": 4400, "visibility": "public", "onOpen": "ignore"}, {"port": 5432, "visibility": "public", "onOpen": "ignore"}, {"port": 1025, "visibility": "public", "onOpen": "ignore"}, {"port": 8025, "visibility": "public", "onOpen": "ignore"}, {"port": 8000, "visibility": "public", "onOpen": "ignore"}], "vscode": {"extensions": ["mikestead.dotenv", "streetsidesoftware.code-spell-checker", "streetsidesoftware.code-spell-checker-russian"]}}
{"tasks": [{"init": "gradlew build"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": ". ${GITPOD_REPO_ROOT}/.vscode/init_tasks.sh", "command": "/home/gitpod/.pg_ctl/bin/pg_start > /dev/null"}, {"command": ". ${GITPOD_REPO_ROOT}/.vscode/uptime.sh &"}], "vscode": {"extensions": ["ms-python.python", "formulahendry.auto-close-tag", "eventyret.bootstrap-4-cdn-snippet", "hookyqr.beautify", "matt-rudge.auto-open-preview-panel", "ms-toolsai.jupyter"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm ci", "command": "npm test"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 1313, "onOpen": "open-browser"}], "tasks": [{"init": "yarn install"}], "github": {"prebuilds": {"branches": true, "pullRequests": true}}}
{"tasks": [{"init": "sudo apt-get install apt-transport-https ca-certificates gnupg echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - sudo apt-get update && sudo apt-get install google-cloud-cli go get && go build ./... && go test ./...", "command": "go run ."}], "vscode": {"extensions": ["GitHub.copilot", "golang.go"]}}
{"tasks": [{"init": "./gradlew build\n", "command": "./gradlew run"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "sdk use java 16.0.1.hs-adpt", "command": "cd timetable; mvn compile"}], "ports": [{"port": 6080}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": ". ${GITPOD_REPO_ROOT}/.vscode/init_tasks.sh", "command": "/home/gitpod/.pg_ctl/bin/pg_start > /dev/null"}, {"command": ". ${GITPOD_REPO_ROOT}/.vscode/uptime.sh &"}], "vscode": {"extensions": ["ms-python.python", "formulahendry.auto-close-tag", "eventyret.bootstrap-4-cdn-snippet", "matt-rudge.auto-open-preview-panel", "ms-toolsai.jupyter", "ms-toolsai.jupyter-keymap", "ms-toolsai.jupyter-renderers", "esbenp.prettier-vscode"]}}
{"tasks": [{"init": "npm install", "command": "npm run dev"}, {"init": "echo \"Git config\"", "command": "git config --global user.email 1085655+zx8086@users.noreply.github.com"}]}
{"tasks": [{"init": "docker run -d -p 8443:8443 -v /workspace:/config/workspace ghcr.io/lescai-teaching/vscode-docker-amd64:latest\n"}], "ports": [{"port": 8443, "onOpen": "open-browser"}]}
{"image": "gitpod/workspace-node", "tasks": [{"init": "npm install && npm run compile", "command": "npm run watch"}], "vscode": {"extensions": ["timkmecl.chatgpt"]}}
{"image": {"file": ".devcontainer/Dockerfile"}, "tasks": [{"init": "bash .devcontainer/onCreateCommand.sh", "command": "bash .devcontainer/postStartCommand.sh && bash && exit"}], "vscode": {"extensions": ["ms-python.python"]}}
{"tasks": [{"name": "install-dependencies", "init": "docker pull cassandra:4.0\npip install -U cqlsh\n", "command": "docker run -p 9042:9042 -d \\\n           --name Cassandra-1 \\\n           -e CASSANDRA_CLUSTER_NAME='Cassandra Cluster' \\\n           -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch \\\n           -e CASSANDRA_DC=DC-London \\\n           -e CASSANDRA_RACK=rack1 \\\n           cassandra:4.0\ntimeout 60 bash -c 'until cqlsh localhost 9042 -e \"describe cluster\" >/dev/null 2>&1; do sleep 1; done'\nINSTANCE1=$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' Cassandra-1)\ndocker run -p 9043:9042 -d \\\n           --name Cassandra-2 \\\n           -e CASSANDRA_CLUSTER_NAME='Cassandra Cluster' \\\n           -e CASSANDRA_SEEDS=$INSTANCE1 \\\n           -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch \\\n           -e CASSANDRA_DC=DC-Paris \\\n           -e CASSANDRA_RACK=rack1 \\\n           cassandra:4.0\nINSTANCE2=$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' Cassandra-2)\n"}], "ports": [{"port": 9042, "onOpen": "ignore"}, {"port": 9043, "onOpen": "ignore"}], "github": {"prebuilds": {"main": true}}, "vscode": {"extensions": ["https://github.com/HadesArchitect/katapod/releases/download/0.3.6/katapod-0.3.6.vsix"]}}
{"image": {"file": "gitpod/.gitpod.dockerfile"}, "ports": [{"port": 4000, "onOpen": "open-preview"}], "tasks": [{"name": "Phx", "init": "gitpod/init.sh", "command": "chmod +x gitpod/start.sh && gitpod/start.sh"}], "vscode": {"extensions": ["jakebecker.elixir-ls"]}}
{"tasks": [{"init": "npm install && npm run build", "command": "export HMR_HOST=`gp url 3000`\nnpm run dev\n"}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "vscode": {"extensions": ["svelte.svelte-vscode"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true}}}
{"image": "gitpod/workspace-postgres", "tasks": [{"init": "yarn install\n", "command": "yarn rw dev\""}], "ports": [{"port": 5432, "name": "PostgreSQL database", "onOpen": "ignore"}, {"port": 8910, "name": "RedwoodJS web application", "onOpen": "open-browser"}, {"port": 8911, "name": "Serverless functions", "onOpen": "ignore"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "eamodio.gitlens", "mgmcdermott.vscode-language-babel", "wix.vscode-import-cost", "pflannery.vscode-versionlens", "editorconfig.editorconfig", "prisma.prisma", "graphql.vscode-graphql"]}}
{"tasks": [{"init": "yarn", "command": "yarn dev"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "vscode": {"extensions": ["esbenp.prettier-vscode", "dbaeumer.vscode-eslint"]}}
{"tasks": [{"name": "Init Laravel", "init": "cd monolith\ncp .env.example .env\ndocker run --rm -u \"$(id -u):$(id -g)\" -v $(pwd):/opt -w /opt laravelsail/php82-composer:latest composer install --ignore-platform-reqs\n", "command": "cd monolith\nalias sail='[ -f sail ] && sh sail || sh vendor/bin/sail'\nsail up\n"}, {"name": "Init VueJS", "init": "echo Booting VueJS...\n", "command": "echo 'start script'\n"}], "ports": [{"name": "Application", "description": "Port 80 for the application", "port": 80, "onOpen": "open-preview"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker", "bmewburn.vscode-intelephense-client", "zobo.php-intellisense"]}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"name": "Set solana wallet", "command": "echo $SOLANA_KEY | base64 -d  > /home/gitpod/.config/solana/id.json && solana airdrop 2 && exit"}, {"name": "golang live", "env": {"PASETO_PRIVATE_KEY": "abckey", "PASETO_EXPIRATION": "24h", "APP_PORT": 3000, "AUTH_EULA": "Signing means you agree to T&C listed here", "GIN_MODE": "debug", "DB_HOST": "localhost", "DB_USERNAME": "airex_gateway", "DB_PASSWORD": "airex_gateway", "DB_NAME": "airex_gateway", "DB_PORT": 5432, "ALLOWED_ORIGIN": "*", "SIGNED_BY": "MyriadFlow", "COLLECTION_PATH": "generated_collections"}, "init": "go install gotest.tools/gotestsum@latest\ngo get && go build -o build/solana-gateway\n", "command": "docker run --name=\"airex_gateway\" --rm -d -p 5432:5432 \\\n-e POSTGRES_PASSWORD=airex_gateway \\\n-e POSTGRES_USER=airex_gateway \\\n-e POSTGRES_DB=airex_gateway \\\npostgres -c log_statement=all\nsleep 12\ngp sync-done db\ncp .env-sample .env\nmkdir generated_collections\nair\n"}, {"name": "postgres shell", "command": "gp sync-await db\ndocker exec -it airex_gateway psql -U airex_gateway\n   \n"}], "vscode": {"extensions": ["golang.go"]}}
{"tasks": [{"before": "pip3 install -U platformio", "command": "platformio run -e heltec_wifi_lora_32_V2"}], "vscode": {"extensions": ["platformio.platformio-ide@1.10.0:aIt2v3YhW3veGlO/Uthh3Q==", "ms-vscode.cpptools@0.28.0:3bMoEAAzdrP+gtq/4qm44Q=="]}}
{"vscode": {"extensions": ["buianhthang.gitflow", "vivaxy.vscode-conventional-commits"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "export GRADLE_USER_HOME=\"/workspace/.gradle\"; export M2_HOME=\"/workspace/.m2\"; export KONAN_DATA_DIR=\"/workspace/.konan\""}, {"init": "git fetch --tags && ./gradlew runUnitTests :lce:assemble :welcome:assemble"}], "jetbrains": {"intellij": {"prebuilds": {"version": "stable"}}}}
{"tasks": [{"name": "npm", "init": "npm install", "command": "npm run start"}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"init": "npm install", "command": "npm run watch"}]}
{"tasks": [{"init": "npm install"}], "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}}
{"tasks": [{"init": "npm install -g expo-cli && npm ci", "command": "expo web"}]}
{"image": "dduportal/cicd-gitpod", "workspaceLocation": "."}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "echo \"export PUPPETEER_CACHE_DIR=/workspace/nuxt-content-body-html/node_modules/.cache/puppeteer\" >> /home/gitpod/.bashrc\ngitpod-env-per-project >> /home/gitpod/.bashrc && source /home/gitpod/.bashrc", "init": "git config --global user.name \"Sebastian Landwehr\"\ngit config diff.lfs.textconv cat\ngit lfs pull\nyarn --frozen-lockfile"}], "vscode": {"extensions": ["https://sebastianlandwehr.com/vscode-extensions/karlito40.fix-irregular-whitespace-0.1.1.vsix", "https://sebastianlandwehr.com/vscode-extensions/adrianwilczynski.toggle-hidden-1.0.2.vsix", "octref.vetur@0.33.1", "Tobermory.es6-string-html", "zjcompt.es6-string-javascript"]}}
{"tasks": [{"name": "Application", "init": "npm install && npm run build", "command": "npm run dev", "env": {"NODE_ENV": "development"}}], "ports": [{"port": 3000, "onOpen": "open-browser"}], "vscode": {"extensions": ["bungcip.better-toml", "prisma.prisma", "mongodb.mongodb-vscode", "ms-azuretools.vscode-docker", "esbenp.prettier-vscode", "dbaeumer.vscode-eslint", "sleistner.vscode-fileutils", "eamodio.gitlens", "heybourn.headwind", "bradlc.vscode-tailwindcss", "oderwat.indent-rainbow", "wix.vscode-import-cost", "christian-kohler.npm-intellisense", "christian-kohler.path-intellisense", "csstools.postcss"]}}
{"tasks": [{"name": "Preview", "command": "gp ports await 8080 && gp url 8080 && gp preview $(gp url 8080)/jenkins/"}, {"name": "Run Jenkins", "init": "# Download and Install Java 17.0.6-tem\nyes Y | sdk install java 17.0.6-tem\n", "command": "mvn hpi:run -Dhost=0.0.0.0      \n"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-debug", "vscjava.vscode-java-test", "vscjava.vscode-maven", "vscjava.vscode-java-dependency"]}}
{"additionalRepositories": [{"url": "https://github.com/mattermost/mattermost"}], "ports": [{"port": 8065, "description": "for Mattermost instance", "onOpen": "open-browser", "visibility": "public"}, {"port": 6080, "description": "for noVNC instance (Cypress)", "onOpen": "notify"}, {"port": 5432, "onOpen": "ignore"}, {"port": 5900, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}], "image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "addCheck": false}}, "vscode": {"extensions": ["golang.go"]}, "workspaceLocation": "mattermost-gitpod-config/mattermost.code-workspace", "tasks": [{"name": "Server", "before": "cd ../mattermost/server\nexport MM_SERVICESETTINGS_SITEURL=$(gp url 8065)\n", "init": "go run ./build/docker-compose-generator/main.go postgres minio | docker-compose -f docker-compose.makefile.yml pull\nmake run-server\ngp ports await 8065\nmake stop-server\nmake test-data\necho \"Server built\"\n", "command": "make run-server\n", "env": {"ENABLED_DOCKER_SERVICES": "postgres minio", "MM_SERVICESETTINGS_ENABLELOCALMODE": true, "MM_SERVICESETTINGS_ENABLEBOTACCOUNTCREATION": true, "MM_SERVICESETTINGS_ENABLEOAUTHSERVICEPROVIDER": true, "MM_SERVICESETTINGS_ENABLEDEVELOPER": true, "MM_SERVICESETTINGS_ENABLETESTING": true, "MM_TEAMSETTINGS_ENABLEOPENSERVER": true, "MM_PLUGINSETTINGS_AUTOMATICPREPACKAGEDPLUGINS": true, "MM_PLUGINSETTINGS_ENABLEUPLOADS": true, "MM_EXPERIMENTALSETTINGS_ENABLEAPPBAR": true, "MM_FEATUREFLAGS_AppsEnabled": true, "MM_LOGSETTINGS_CONSOLELEVEL": "DEBUG", "MM_LOGSETTINGS_FILELEVEL": "DEBUG"}}, {"name": "Webapp", "before": "cd ../mattermost/webapp\nexport MM_SERVICESETTINGS_SITEURL=$(gp url 8065)\nnvm install\nnvm alias default $(cat .nvmrc)\necho \"nvm use default\" >> ~/.bashrc\n", "init": "mkdir -p channels/dist\ncd ../server\nln -nfs ../webapp/channels/dist client\ncd ../webapp\nnpm i\necho \"Webapp built\"\n", "command": "npm i\nmake run\n", "openMode": "split-right"}, {"name": "Cypress", "init": "cd ../mattermost/e2e-tests/cypress\nnpm i\n"}, {"name": "Playwright", "init": "cd ../mattermost/e2e-tests/playwright\nnpm i\nnpx playwright install\n"}, {"name": "Plugin", "before": "nvm install || nvm install v13.14\n", "init": "source /workspace/mattermost-gitpod-config/scripts/plugin/init-plugin-project.sh\necho \"Plugin built\"\n", "command": "gp ports await 8065\necho \"Server is running at $(gp url 8065)\"\nsource /workspace/mattermost-gitpod-config/scripts/plugin/run-plugin-project.sh\n", "env": {"MM_SERVICESETTINGS_ENABLEDEVELOPER": true}}, {"name": "Project", "init": "source /workspace/mattermost-gitpod-config/scripts/app/init-app-project.sh\necho \"Project built\"\n", "command": "source /workspace/mattermost-gitpod-config/scripts/app/run-app-project.sh\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "echo 'init script'", "command": "learnpack start"}]}
{"image": {"file": ".docker/gitpod/Dockerfile"}, "vscode": {"extensions": ["leanprover.lean4"]}, "tasks": [{"init": "lake exe cache get\n"}, {"command": "sudo apt-get --assume-yes install gcc\n"}]}
{"tasks": [{"init": "./gradlew build"}]}
{"image": "node:14", "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "npm install\n"}]}
{"tasks": [{"command": "for i in {1..3}; do code --uninstall-extension vscjava.vscode-java-test; sleep 15; done"}, {"command": "for i in {1..6}; do chmod 600 ~/.ssh/id_rsa && chmod 644 ~/.ssh/id_rsa.pub && ssh-keyscan github.com >> ~/.ssh/known_hosts; sleep 20; done"}, {"command": "git remote set-url origin git@github.com:Mayfieldmel/Mayfieldmel-PigLatin.git && sed \"s/\\r$//\" commit-command.sh | bash"}], "vscode": {"extensions": ["revaturePro.revature-labs"]}}
{"tasks": [{"init": "npm i -g xslt3"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "sudo apt install neofetch\necho 'TODO: College Stuff'\n", "command": "echo 'TODO: Do ADA or DBMS'\n"}]}
{"tasks": [{"command": "code --install-extension redhat.java && code --install-extension vscjava.vscode-java-debug sleep 40 && code --install-extension revaturePro.revature-labs"}, {"command": "for i in {1..3}; do code --uninstall-extension vscjava.vscode-java-test; sleep 15; done"}, {"command": "for i in {1..6}; do chmod 600 ~/.ssh/id_rsa && chmod 644 ~/.ssh/id_rsa.pub && ssh-keyscan github.com >> ~/.ssh/known_hosts; sleep 20; done"}, {"command": "git remote set-url origin git@github.com:Mayfieldmel/Mayfieldmel-WordCountMap.git && sed \"s/\\r$//\" commit-command.sh | bash"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 5555}, {"port": 4700}, {"port": 5556}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Postinstall .NET 7.0 and dev certificates", "init": "mkdir -p $DOTNET_ROOT && curl -fsSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel $DOTNET_VERSION --install-dir $DOTNET_ROOT \ndotnet dev-certs https"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn\nmake\n", "command": "node app"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"init": "pip install -c .constraints/py3.8.txt -e .[dev]"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": true, "addComment": false, "addBadge": false, "addLabel": false}}, "vscode": {"extensions": ["charliermarsh.ruff", "christian-kohler.path-intellisense", "eamodio.gitlens", "editorconfig.editorconfig", "esbenp.prettier-vscode", "executablebookproject.myst-highlight", "garaioag.garaio-vscode-unwanted-recommendations", "github.vscode-github-actions", "github.vscode-pull-request-github", "julialang.language-julia", "ms-python.black-formatter", "ms-python.python", "ms-python.vscode-pylance", "ms-toolsai.vscode-jupyter-cell-tags", "ms-vscode.live-server", "ms-vsliveshare.vsliveshare", "redhat.vscode-yaml", "stkb.rewrap", "streetsidesoftware.code-spell-checker", "tamasfe.even-better-toml", "tyriar.sort-lines", "yzhang.markdown-all-in-one"]}}
{"ports": [{"port": 1234, "onOpen": "open-preview"}], "vscode": {"extensions": ["elmTooling.elm-ls-vscode@0.7.2:HwtXl318PaIRA5nM5MEykA=="]}}
{"tasks": [{"init": "npm install"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "pip install ."}]}
{"tasks": [{"name": "Start web server", "init": "python -m http.server 8000"}], "ports": [{"port": 8000, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install", "command": "npm run server"}]}
{"tasks": [{"init": "pnpm install", "command": "pnpm run dev"}], "ports": [{"port": 8976, "name": "Wrangler Authorization", "onOpen": "ignore"}, {"port": 8787, "name": "Wrangler Dev"}]}
{"tasks": [{"command": "gp open \"$GITPOD_REPO_ROOT/cmake.toml\""}, {"command": "gp open \"$GITPOD_REPO_ROOT/src/main.cpp\""}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addComment": false, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "vscode": {"extensions": ["ms-vscode.cmake-tools", "bungcip.better-toml", "llvm-vs-code-extensions.vscode-clangd"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "echo \"export PUPPETEER_CACHE_DIR=/workspace/puppeteer-wait-for-transition/node_modules/.cache/puppeteer\" >> /home/gitpod/.bashrc\ngitpod-env-per-project >> /home/gitpod/.bashrc && source /home/gitpod/.bashrc", "init": "git config --global user.name \"Sebastian Landwehr\"\ngit config diff.lfs.textconv cat\ngit lfs pull\nyarn --frozen-lockfile"}], "vscode": {"extensions": ["https://sebastianlandwehr.com/vscode-extensions/karlito40.fix-irregular-whitespace-0.1.1.vsix", "https://sebastianlandwehr.com/vscode-extensions/adrianwilczynski.toggle-hidden-1.0.2.vsix", "octref.vetur@0.33.1", "Tobermory.es6-string-html", "zjcompt.es6-string-javascript"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "open terminial"}, {"name": "install & run dev server", "openMode": "split-right", "init": "npm install", "command": "npm start"}], "vscode": {"extensions": ["angular.ng-template", "ecmel.vscode-html-css", "eamodio.gitlens"]}, "ports": [{"port": 4200, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true}}}
{"github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}, "image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["nimsaem.nimvscode"]}}
{"image": "gitpod/workspace-dotnet", "tasks": [{"init": "dotnet build", "command": "dotnet start"}]}
{"tasks": [{"init": "yarn && yarn build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install\nsbt compile\n"}], "jetbrains": {"intellij": {"plugins": ["zielu.gittoolbox", "com.github.lppedd.idea-conventional-commit", "org.intellij.scala"], "prebuilds": {"version": "stable"}}}}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"before": "echo \"nvm use default\" >> ~/.bashrc && nvm use default", "command": "source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev"}], "ports": [{"port": 1234, "onOpen": "open-browser"}]}
{"tasks": [{"init": "pnpm i && pnpm build", "command": "pnpm start"}], "vscode": {"extensions": ["esbenp.prettier-vscode"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["grain-lang.vscode-grain"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Build & Test", "init": "cargo build && cargo test\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": false, "addComment": false, "addBadge": false}}, "vscode": {"extensions": ["matklad.rust-analyzer", "serayuzgur.crates"]}}
{"image": "gitpod/workspace-node-lts", "tasks": [{"init": "npm install", "command": "npm run dev"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"tasks": [{"name": "ruby", "init": "bundle install\ncd examples\nbundle install\n"}, {"name": "aws-cli", "init": "cd /workspace\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\ncd $THEIA_WORKSPACE_ROOT\n"}], "vscode": {"extensions": ["amazonwebservices.aws-toolkit-vscode", "wingrunr21.vscode-ruby", "rebornix.ruby"]}}
{"tasks": [{"name": "Install dependencies and start dev server", "init": "curl -L https://github.com/getzola/zola/releases/download/v0.14.1/zola-v0.14.1-x86_64-unknown-linux-gnu.tar.gz \\\n  > test.tar.gz\ntar -xzf test.tar.gz\nrm test.tar.gz\nmkdir /workspace/bin\nsudo mv zola /workspace/bin\nPATH=/workspace/bin:$PATH\nnpm install\nmake public\n", "command": "zola serve"}], "ports": [{"port": 1111, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"onOpen": "open-preview", "port": 8080, "visibility": "public"}], "tasks": [{"init": "pip install -r requirements.txt", "command": "flask init & flask run"}, {"init": "npm install"}], "vscode": {"extensions": ["ms-python.python", "alexcvzz.vscode-sqlite"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}}
{"vscode": {"extensions": ["esbenp.prettier-vscode@3.20.0:37/f4uBlE287wUjENFq1aA==", "redhat.vscode-yaml@0.7.2:bHhi0sG8mPlN+HpfBDsjQw=="]}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": ". ${GITPOD_REPO_ROOT}/.theia/init_tasks.sh"}], "vscode": {"extensions": ["ms-python.python@2019.8.30787:TnGEOx35GXMhyKLjDGz9Aw==", "mkaufman.HTMLHint@0.10.0:xevX4CvYOkKd8xjvtJQiGQ==", "eventyret.bootstrap-4-cdn-snippet@1.9.0:I8wcXFcKWQIROg7J0SLLqg==", "esbenp.prettier-vscode@5.7.1:4Zx39KyQMoIz7x94PSmDmQ==", "kevinglasson.cornflakes-linter@0.5.1:KAaMshgHOKan8eojXQ53OQ==", "formulahendry.auto-close-tag@0.5.10:192223009a396fc39e5b915d5920c0f0"]}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "pnpm install", "command": "cd viewer && pnpm serve"}], "ports": [{"port": 8080, "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "vscode": {"extensions": ["octref.vetur@0.32.0:03mwRhlVpWDul4qBChcVUA==", "vtrois.gitmoji-vscode@1.0.5:iedq1JRjfM74CfhCoy3gJQ=="]}}
{"image": "marcopeg/gitpod-workspace-hasura:1.1.0", "tasks": [{"name": "Hasura", "command": "hasura_start"}], "ports": [{"port": 5432, "onOpen": "ignore"}, {"port": 8080, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 3001, "onOpen": "ignore"}], "tasks": [{"init": "pnpm install", "command": "pnpm dev"}, {"command": "echo split", "openMode": "split-right", "name": "split terminal"}], "vscode": {"extensions": ["octref.vetur@0.23.0:TEzauMObB6f3i2JqlvrOpA==", "esbenp.prettier-vscode@4.6.0:3ul2z2dsx8yqcbS8VovpnQ==", "dbaeumer.vscode-eslint@2.1.5:9Wg0Glx/TwD8ElFBg+FKcQ==", "EditorConfig.EditorConfig@0.14.5:DTIJHHNrM36zsvYRBOY3ow=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "set -x\n\nflutter channel stable\nflutter upgrade\n\nflutter config --enable-web\nflutter config --android-sdk /home/gitpod/androidsdk\necho y | flutter doctor --android-licenses\n\nflutter doctor\n\nflutter pub get\n\n# flutter build -v bundle\nflutter build -v web\n# flutter build -v appbundle\n# flutter build -v apk\n"}, {"command": "# Gitpod is not able to run emulators within a worspace at this\n# stage as Google Kubernetes Engine does not support Nested\n# Virtualization.\n#\n# If running Gitpod on your own infrastructure or via the\n# Dockerfile locally on infrastructure that exposes vmx or svm\n# then this command will launch the emulator.\n#\n# $ emulator -avd avd28 -no-audio -no-window\n#\n# Until this restriction is mitigated you can run native mobile\n# apps in your browser via https://appetize.io/\n\nif [[ -z \"$APPETIZE_API_TOKEN\" ]]; then\n    echo \"Appetize API token not set. Run:\"\n    echo \"\"\n    echo \"    gp env APPETIZE_API_TOKEN=your_token\"\n    echo \"\"\n    echo \"and restart this workspace in order to get an app preview.\"\n    echo \"\"\n    echo \"Request your token here: https://appetize.io/docs#request-api-token\"\nelse\n    curl -sS --http1.1 \"https://$APPETIZE_API_TOKEN@api.appetize.io/v1/apps/$APPETIZE_PUBLICKEY\" \\\n        -F \"file=@/workspace/template-flutter/build/app/outputs/flutter-apk/app.apk\" \\\n        -F platform=android \\\n        -F \"buttonText=Start App\" \\\n        -F \"postSessionButtonText=Start App\" \\\n        > .appetize.json\n\n    APPETIZE_PUBLICKEY=$(jq -r .publicKey .appetize.json)\n    gp env \"APPETIZE_PUBLICKEY=$APPETIZE_PUBLICKEY\"\n    export APPETIZE_PUBLICKEY\n\n    python -m webbrowser \"https://appetize.io/embed/$APPETIZE_PUBLICKEY?device=pixel4&autoplay=true\"\nfi\n\nflutter devices\n\n# flutter run --web-port 8080\n"}], "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}, {"port": 8080, "onOpen": "open-preview"}], "vscode": {"extensions": ["aaron-bond.better-comments", "dart-code.dart-code", "dart-code.flutter", "davidanson.vscode-markdownlint", "eamodio.gitlens", "editorconfig.editorconfig", "gruntfuggly.todo-tree", "jeroen-meijer.pubspec-assist", "kisstkondoros.vscode-gutter-preview", "mhutchie.git-graph", "naumovs.color-highlight", "usernamehw.errorlens"]}, "github": {"prebuilds": {"addComment": true, "addBadge": true}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "install staticcheck", "init": "go install honnef.co/go/tools/cmd/staticcheck@latest"}, {"name": "install go-task", "init": "go install github.com/go-task/task/v3/cmd/task@latest"}, {"name": "install goimport", "init": "go install golang.org/x/tools/cmd/goimports@latest"}, {"name": "install revive", "init": "go install github.com/mgechev/revive@latest"}, {"name": "install python dependencies", "init": "poetry install"}, {"name": "rewrite poetry.lock file", "command": "poetry lock"}], "vscode": {"extensions": ["ms-python.python", "ms-toolsai.jupyter", "ms-toolsai.jupyter-keymap", "ms-toolsai.jupyter-renderers"]}}
{"tasks": [{"init": "pip install -c .constraints/py3.8.txt -e .[dev]"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": true, "addComment": false, "addBadge": false, "addLabel": false}}, "vscode": {"extensions": ["charliermarsh.ruff", "christian-kohler.path-intellisense", "davidanson.vscode-markdownlint", "eamodio.gitlens", "editorconfig.editorconfig", "esbenp.prettier-vscode", "executablebookproject.myst-highlight", "garaioag.garaio-vscode-unwanted-recommendations", "github.vscode-github-actions", "github.vscode-pull-request-github", "ms-python.mypy-type-checker", "ms-python.python", "ms-python.vscode-pylance", "ms-vscode.live-server", "ms-vsliveshare.vsliveshare", "redhat.vscode-yaml", "ryanluker.vscode-coverage-gutters", "stkb.rewrap", "streetsidesoftware.code-spell-checker", "tamasfe.even-better-toml", "tyriar.sort-lines", "yzhang.markdown-all-in-one"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 7474, "onOpen": "open-browser"}, {"port": 7687}], "tasks": [{"before": "yes | sdk install java 8.0.265.hs-adpt", "init": "mvn clean verify -DskipTests"}], "vscode": {"extensions": ["asciidoctor.asciidoctor-vscode", "jebbs.plantuml", "redhat.java", "ms-azuretools.vscode-docker", "contextmapper.context-mapper-vscode-extension", "ms-vscode.live-server"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000}], "tasks": [{"init": "EXTDIR=/workspace/.vscode-remote/extensions\n[[ -z $EXTDIR/cuelang.org.cue.0.0.1 ]] && git clone https://github.com/cue-sh/vscode-cue $EXTDIR/cuelang.org.cue.0.0.1\n[[ -z $EXTDIR/johnallen3d.cue-fmt.0.0.1 ]] && git clone https://github.com/johnallen3d/vscode-cue-fmt.git $EXTDIR/johnallen3d.cue-fmt.0.0.1\ngo install -mod=readonly cuelang.org/go/cmd/cue\nmake install\n"}], "vscode": {"extensions": ["golang.go", "yzhang.markdown-all-in-one"]}, "gitConfig": {"alias.st": "status", "alias.ci": "commit -s", "alias.co": "checkout"}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addBadge": true}}}
{"tasks": [{"name": "startup", "init": "echo 'init script' # runs during prebuild\ncp .env.example .env # pre-copy the .env\n", "command": "open .env # open .env ready for editing\n"}]}
{"tasks": [{"name": "App", "init": "# bring in secret access tokens from gitpod user dashboard\neval $(gp env -e)\n# OlmypusDAO front end contributors with access permissions to the main repo\n# should set GITHUB_OHM_PERSONAL_ACCESS_TOKEN in their gitpod UI Settings panel\nif [ -z ${GITHUB_OHM_PERSONAL_ACCESS_TOKEN+x} ];\nthen\n  echo \"var is unset\";\nelse\n  echo \"Setting git origin push URL for OlympusDAO/olympus-frontend\";\n  git remote set-url --push origin https://${GITHUB_OHM_PERSONAL_ACCESS_TOKEN}@github.com/OlympusDAO/olympus-frontend.git;\nfi\n#  create a default .env file if none present\nif [ ! -f .env ]; then cp \".env.test\" \".env\"; fi\nyarn && \\\ngp sync-done install\n", "command": "REACT_APP_PROVIDER=$(gp url 8545) yarn start"}, {"name": "Test", "init": "gp sync-await install", "command": "yarn test --clearCache\nyarn test:unit\n", "openMode": "split-right"}, {"name": "Shell", "before": "echo \"Setting up SSH environment\"\nrm -rf ~/.ssh\nmkdir -p /workspace/.ssh\nln -sf /workspace/.ssh ~/.ssh\n", "command": "eval $(ssh-agent -s)", "openMode": "tab-after"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 8545, "onOpen": "ignore"}], "github": {"prebuilds": {"pullRequestsFromForks": true, "addComment": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "esbenp.prettier-vscode", "mhutchie.git-graph", "bmuskalla.vscode-tldr"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn\nyarn build\nmkdir -p lib/vscode/out\nsed -i 's/The Web Worker Extension Host did not start in 10s/The Web Worker Extension Host did not start in 60s/g' ./lib/vscode/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts\nsed -i 's/}, 10000);/}, 60000);/g' ./lib/vscode/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts\n", "command": "echo \"=======================\"\necho \"Please run 'yarn watch'\"\necho \"=======================\"\n"}, {"command": "echo \"===========================================================================\"\necho \"Please wait for 'yarn watch' to complete compilation, then run 'yarn serve'\"\necho \"===========================================================================\"\n"}], "ports": [{"port": 5000, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "vscode": {"extensions": ["betterthantomorrow.calva"]}, "tasks": [{"name": "Start REPL", "init": "clojure -A:dev:build -P && (cd example && clj -A:test -P)", "command": "clojure -A:test"}, {"name": "See Changes", "command": "code CHANGELOG.md"}], "github": {"prebuilds": {"main": true}}}
{"ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "java -version"}], "vscode": {"extensions": ["GabrielBB.vscode-lombok@0.9.9:crmJ0s9mO0sdhxHl4cZaMw=="]}}
{"image": {"file": "Dockerfile"}, "ports": [{"port": 3000, "onOpen": "ignore"}, {"port": 8080, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "rm -Rf dist; yarn generate; (cd dist && npx http-server -p 8080)\n"}]}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"name": "phx", "init": "mix deps.get && mix compile", "command": "mix ecto.migrate && iex -S mix phx.server"}], "ports": [{"port": 4000, "onOpen": "open-preview"}, {"port": 5432, "onOpen": "ignore"}], "vscode": {"extensions": ["elixir-lsp.elixir-ls", "bradlc.vscode-tailwindcss", "victorbjorklund.phoenix"]}}
{"image": {"file": ".gitpod/Dockerfile"}, "tasks": [{"command": "bash .gitpod/init.sh && go mod download && . ~/.bashrc"}], "vscode": {"extensions": ["EditorConfig.EditorConfig", "esbenp.prettier-vscode", "golang.go", "ms-vscode.makefile-tools", "redhat.vscode-yaml"]}}
{"tasks": [{"init": "clear && echo Installing Tabris, please stand by... && npm install tabris-cli -g", "command": "npm install && clear && npm run gitpod"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"before": "php -r \"file_exists('.env') || copy('.env.example', '.env');\"\nurl=$(gp url 8000); sed -i'' \"s#^APP_URL=http://localhost*#APP_URL=$url\\nASSET_URL=$url#g\" .env  #change APP_URL and ASSET_URL to 8080 URL\n", "init": "composer install\n", "command": "php artisan key:generate --ansi\nphp artisan serve\n"}]}
{"image": "jelaniwoods/ad2-2022-base-jekyll", "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 4000, "onOpen": "open-preview"}, {"port": "9500-9999", "onOpen": "ignore"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb", "mbessey.vscode-rufo", "aliariff.vscode-erb-beautify"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["haskell.haskell", "justusadam.language-haskell", "tomoki1207.pdf"]}, "tasks": [{"name": "Build and run in GHCI", "init": "stack build", "command": "stack ghci"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 6080, "onOpen": "notify"}, {"port": "10000-20000", "onOpen": "ignore"}], "workspaceLocation": ".", "tasks": [{"command": "start-vnc-session.sh"}, {"command": "gp ports await 6080 && gp preview $(gp url 6080)"}, {"command": "cd ${HOME} && wget -O .bashrc_iCub https://raw.githubusercontent.com/icub-tech-iit/icub-os-files/master/user-environment/bashrc_iCub_superbuild"}, {"command": "cd ~ && printf \"if [ -f ~/.bashrc_iCub ]; then\\n . ~/.bashrc_iCub\\nfi\" | cat - ~/.bashrc > temp && mv temp ~/.bashrc && source ~/.bashrc && cd -"}, {"command": "cd ~ && printf \"export OBJ_SUBDIR=build\\n\" | cat - ~/.bashrc > temp && mv temp ~/.bashrc && source ~/.bashrc && cd -"}]}
{"image": "gitpod/workspace-full", "tasks": [{"init": "npm install\nnpm run dev\n"}], "vscode": {"extensions": ["EditorConfig.EditorConfig"]}}
{"tasks": [{"name": "Prepare Environment", "init": "pip install --upgrade pip && make install && gp sync-done install\n", "command": "project_name create-user admin admin --superuser || exit 0"}, {"name": "Run server", "init": "gp sync-await install", "command": "project_name run --port 8000"}, {"name": "Open the Shell", "init": "gp sync-await install", "command": "project_name --help", "openMode": "tab-after"}], "ports": [{"port": 8000, "onOpen": "open-preview", "visibility": "public"}], "vscode": {"extensions": ["ms-python.python@2021.9.1218897484", "redhat.vscode-yaml", "tamasfe.even-better-toml", "alexcvzz.vscode-sqlite", "jdinhlife.gruvbox"]}}
{"tasks": [{"init": "npm install --ignore-scripts", "command": "npm run dev-backend"}, {"init": "npm install --prefix frontend", "command": "npm run dev-frontend", "openMode": "split-right"}], "ports": [{"port": 3000}, {"port": 3001, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": false, "pullRequestsFromForks": false, "addComment": false, "addBadge": false, "addLabel": false}}}
{"tasks": [{"init": "npm install && bin/setup", "command": "bin/rails server"}]}
{"tasks": [{"name": "Setup git", "command": "~/gitconfig-provider apply"}, {"init": "npm install && npm run build"}], "vscode": {"extensions": ["ritwickdey.LiveServer"]}}
{"tasks": [{"init": "yarn install && yarn build && yarn link && echo \"export PATH=$PATH:$(yarn global bin)\" >> ~/.bashrc", "command": "yarn dev"}], "vscode": {"extensions": ["esbenp.prettier-vscode", "dbaeumer.vscode-eslint", "WakaTime.vscode-wakatime", "streetsidesoftware.code-spell-checker", "eamodio.gitlens", "mushan.vscode-paste-image", "lukashass.volar", "wayou.vscode-todo-highlight", "nicoespeon.abracadabra", "https://marketplace.visualstudio.com/_apis/public/gallery/publishers/nick-lvov-dev/vsextensions/typescript-explicit-types/0.0.9/vspackage"]}}
{"tasks": [{"init": "echo \"Replace me with a build script for the project.\"", "command": "echo \"hello world.\""}], "image": "gitpod/workspace-full"}
{"image": "node:14.4-alpine"}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"prebuild": "./gradlew build"}], "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}, {"port": 8599, "onOpen": "ignore"}, {"port": 6942, "onOpen": "ignore"}, {"port": 6943, "onOpen": "ignore"}, {"port": 5037, "onOpen": "ignore"}], "github": {"prebuilds": {"branches": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": true, "addLabel": true}}, "vscode": {"extensions": ["codezombiech.gitignore@0.6.0:oJP0UqwrXt2Qgt5QRm1BIQ==", "maddog986.autodocblocker@1.0.2:ey8TGFw83C4aegTkW13AGA==", "guillaumeisabelle.gixdeko-comments@1.0.115:9iBdt1vwBj1/tP0ccsdtvw==", "owenfarrell.vscode-microtask@1.0.3:HKM415Hmq45XFIL1HeIdbQ==", "naturalclar.workspace-settings-json@0.0.10:dO7CSbCBQvxSAZIgNH/jUQ==", "vikas.code-navigation@0.2.0:1hbbiHl71QiJoOjQyzbewQ==", "haugerbr.project-tasks@1.0.0:z8G8HNMDr3s2qYGsbM5MrQ==", "mhutchie.git-graph@1.28.0:8NH1WgOknx0p2byYkmBcrQ==", "reduckted.vscode-gitweblinks@2.3.0:3DLrLpucmTzBIefwl1BMuQ==", "adelphes.android-dev-ext@1.3.2:Corsm6bGBL7RCzNWjvZqZw==", "vscode.java@1.55.0:631fc4d56e614d7dd957052a72746766"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["bungcip.better-toml", "serayuzgur.crates", "matklad.rust-analyzer"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true, "addComment": true}}}
{"tasks": [{"command": "pyenv virtualenv honeypot && pyenv activate honeypot\npip install -U pip && pip install -r requirements.dev.in\ngit clone https://github.com/nickmoreton/wagtail-honeypot.git\ncd wagtail-honeypot && git checkout wagtail-3.0 && cd ..\ncp app/settings/local.example.py app/settings/local.py\necho \"CSRF_TRUSTED_ORIGINS = ['https://*.gitpod.io']\">> app/settings/local.py\n"}]}
{"tasks": [{"before": "platformio upgrade"}, {"command": "platformio run -e tasmota"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["ms-vscode.cpptools@0.26.3:u3GsZ5PK12Ddr79vh4TWgQ==", "eamodio.gitlens@10.2.1:e0IYyp0efFqVsrZwsIe8CA==", "LaurentTreguier.uncrustify@2.18.0:/k8Osjj/XSuz09F+pEu7wg==", "Atishay-Jain.All-Autocomplete@0.0.23:fbZNfSpnd8XkAHGfAPS2rA==", "2gua.rainbow-brackets@0.0.6:Tbu8dTz0i+/bgcKQTQ5b8g=="]}}
{"tasks": [{"name": "Install", "init": "npm install -g @angular/cli && npm install -g @ionic/cli && ionic start mobdev_ca3 blank --type=angular && gp sync-done bundle\n", "command": "cd mobdev_ca3"}, {"name": "IonicProject", "init": "gp sync-await bundle &&\ncd mobdev_ca3 &&\ngp sync-done startIonic\n", "command": "ionic serve"}, {"name": "capacitor", "init": "gp sync-await startIonic && cd mobdev_ca3 && npm i @capacitor/core && npm i -D @capacitor/cli && gp sync-done capa\n", "command": "npm i @capacitor/android"}, {"name": "building", "init": "gp sync-await capa && cd mobdev_ca3 && npm run build && gp sync-done build\n", "command": "npx cap sync"}, {"name": "initapp", "init": "gp sync-await build &&\ncd mobdev_ca3 &&\nnpx cap init\ngp sync-done appinit\n", "command": "npx cap add android"}, {"name": "Sync", "init": "gp sync-await appinit && cd mobdev_ca3 && npm run build\n", "command": "npx cap run android"}], "ports": [{"port": 4200, "onOpen": "open-browser"}]}
{"ports": [{"port": 8080, "onOpen": "open-preview"}], "tasks": [{"init": "./gradlew -Pvaadin.productionMode", "command": "./gradlew clean build run"}], "github": {"prebuilds": {"master": true, "branches": true}}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run dev"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "pip3 install -r requirements.txt", "command": "pytest -v"}], "vscode": {"extensions": ["almenon.arepl", "littlefoxteam.vscode-python-test-adapter", "hbenl.vscode-test-explorer", "hbenl.test-adapter-converter"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Jupyter Notebook", "command": "jupyter notebook"}, {"name": "Salute!", "command": "echo hello world!"}], "ports": [{"port": 5000}, {"port": 8080}, {"port": 8888}], "vscode": {"extensions": ["vscjava.vscode-java-pack", "vscjava.vscode-java-debug", "vscjava.vscode-java-dependency", "vscjava.vscode-java-test", "vscjava.vscode-maven", "redhat.java", "redhat.fabric8-analytics", "ms-azuretools.vscode-docker", "esbenp.prettier-vscode"]}}
{"image": "quadeare/gitpod-kubectl:latest", "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}}
{"tasks": [{"before": "cd www/xelement", "init": "yarn && yarn start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "bash -c 'cd /var/tmp && curl -sSL https://downloads.yugabyte.com/get_clients.sh | bash | grep -- \"sudo ln -s\" | bash'", "command": "bash -c 'cd docker/yb-lab && sh gen-yb-docker-compose.sh rf3'"}], "ports": [{"name": "SQLPad", "description": "SQLPad (web app for writing and running SQL queries and visualizing the results)", "port": 3000, "onOpen": "open-browser"}, {"name": "UI yb-master-1", "description": "YugabyteDB Master UI", "port": 7000, "onOpen": "open-browser"}, {"name": "UI yb-master-2", "description": "YugabyteDB Master UI", "port": 7001, "onOpen": "open-browser"}, {"name": "UI yb-master-3", "description": "YugabyteDB Master UI", "port": 7002, "onOpen": "open-browser"}, {"name": "UI yb-tserver-1", "description": "YugabyteDB TServer UI", "port": 9000, "onOpen": "open-browser"}, {"name": "UI yb-tserver-2", "description": "YugabyteDB TServer UI", "port": 9001, "onOpen": "open-browser"}, {"name": "UI yb-tserver-3", "description": "YugabyteDB TServer UI", "port": 9002, "onOpen": "open-browser"}, {"name": "YSQL yb-tserver-1", "description": "PostgreSQL API", "port": 5433, "onOpen": "ignore"}, {"name": "YSQL yb-tserver-2", "description": "PostgreSQL API", "port": 5434, "onOpen": "ignore"}, {"name": "YSQL yb-tserver-3", "description": "PostgreSQL API", "port": 5435, "onOpen": "ignore"}], "vscode": {"extensions": ["mtxr.sqltools", "mtxr.sqltools-driver-pg"]}}
{"tasks": [{"init": "echo 'init script' \necho 'deb http://mirror.arizona.edu/ubuntu/ focal main' | sudo tee -a /etc/apt/sources.list\nsudo apt update && sudo apt install rsync lcov --assume-yes\nnvm install 14\nmkdir ~/.lnstx-aggregator\ncp boltz.conf ~/.lnstx-aggregator/boltz.conf\necho \"bronze large spike canoe youth crucial seminar awkward allow frozen client math\" > ~/.lnstx-aggregator/seed.dat\necho \"http://localhost:9008\" > /home/gitpod/.lnstx-aggregator/accesslist.txt\nnpm i\nnpm run docker:regtest\nsleep 150\n", "command": "npm run dev\n"}, {"init": "docker ps\n", "command": "alias lnclibtc2='docker exec -it regtest lncli --rpcserver=127.0.0.1:10011 --tlscertpath=/root/.lnd-btc2/tls.cert --macaroonpath=/root/.lnd-btc2/data/chain/bitcoin/regtest/admin.macaroon' alias lnclibtc1='docker exec -it regtest lncli --rpcserver=127.0.0.1:10009 --tlscertpath=/root/.lnd-btc/tls.cert --macaroonpath=/root/.lnd-btc/data/chain/bitcoin/regtest/admin.macaroon' alias btccli='docker exec -it regtest sh -c \"/usr/bin/bitcon-cli\"' echo 'lnclibtc2 newaddress p2wkh' echo \"bitcoin-cli send '{\\\"bcrt1q93rsj05zw3pvf8pa4gpjaypy5x5mqws49as43t\\\":10}'\" echo 'bitcoin-cli -regtest -generate 1' echo 'bitcoin-cli gettxout a15863a0b1bbce4d35bbf6d4933564d52720b7c364665cc627c82679bfe29455 0 ' echo 'watch -n10 -x bitcoin-cli -regtest -generate 1'\n"}, {"init": "npm i -g shx rimraf postgresql-client @stacks/cli\nsleep 60\nnpm run stacks:mocknet:old\nsleep 60\n", "command": "echo 'clarinet integrate started!'\n"}, {"init": "echo 'wait until clarinet integrate full starts up'\nsleep 270\n", "command": "npm run stacks:fund\nSIGNER=ST27SD3H5TTZXPBFXHN1ZNMFJ3HNE2070QX7ZN4FF NONCE=1 npm run stacks:fund:signer\nsleep 1\nSIGNER=ST1N28QCRR03EW37S470PND4SPECCXQ22ZZHF97GP NONCE=2 npm run stacks:fund:signer\nsleep 1\nSIGNER=ST3RXC1Q8MXYKPWRNQ6ZFAWSRY8PKRK8H4BW2F8F NONCE=3 npm run stacks:fund:signer\nsleep 1\nSIGNER=STJ4J7FPHJRJ4Y91650TG58K136JH64VFK6V6DD3 NONCE=4 npm run stacks:fund:signer\nsleep 1\nSIGNER=STN1P6FRK2E2DJPDZN90AVWCSW7MHZWG3V5HS0XC NONCE=5 npm run stacks:fund:signer\nsleep 15\nsed -i 's/.stxswap/.stxswap_v10/g' contracts/triggerswap*.clar\nsed -i 's/.sip10swap/.sip10swap_v3/g' contracts/triggerswap*.clar\nsed -i 's/SP000000000000000000002Q6VF78/ST000000000000000000002AMW42H/g' contracts/triggerswap*.clar\nnpm run stacks:deploy\ngit stash\n"}, {"init": "git clone https://github.com/pseudozach/lnstxbridge-frontend.git /workspace/lnstxbridge-frontend\nexport REACT_APP_BOLTZ_API=https://9007-${GITPOD_WORKSPACE_URL:8}\nexport REACT_APP_STACKS_API=https://3999-${GITPOD_WORKSPACE_URL:8}\nexport REACT_APP_STACKS_NETWORK_TYPE=mocknet\ngp env REACT_APP_BOLTZ_API=$REACT_APP_BOLTZ_API\ncd /workspace/lnstxbridge-frontend\nsed -i 's/HTTPS=true/HTTPS=false/g' .env\nsed -i 's/PORT=443/PORT=8888/g' .env\nsed -i 's/REACT_APP_STACKS_NETWORK_TYPE=mainnet/REACT_APP_STACKS_NETWORK_TYPE=mocknet/g' .env\nsed -i 's#REACT_APP_BOLTZ_API=https://api.lnswap.org:9002#REACT_APP_BOLTZ_API=${REACT_APP_BOLTZ_API}#g' .env\nnpm i    \n", "command": "npm run start"}, {"init": "brew install clarinet\n", "command": "sed -i 's/.stxswap_v10/.stxswap/g' contracts/triggerswap_v*.clar\nclarinet test\n"}, {"init": "echo 'npm run compile:watch'\n", "command": "xxd -p -c2000 docker/regtest/data/lnd/macaroons/admin.macaroon\necho 'npm run compile:watch'\n"}, {"init": "git clone https://github.com/pseudozach/lnswap-widget /workspace/lnswap-widget\ncd /workspace/lnswap-widget\nnpm i\nexport GITPOD_CORE_URL=${GITPOD_WORKSPACE_URL:8}\nsed -i 's#apiUrl: \"https://api.lnswap#// apiUrl: \"https://api.lnswap#g' /workspace/lnswap-widget/src/config.js\nsed -i 's#// apiUrl: \"http://localhost#apiUrl: \"http://localhost#g' /workspace/lnswap-widget/src/config.js\nsed -i 's#/createswap#/zcreateswap#g' /workspace/lnswap-widget/src/components/Widget/Widget.js\n", "command": "npm run start"}, {"init": "git clone https://github.com/pseudozach/lnstxbridge-dashboard /workspace/lnstxbridge-dashboard\ncd /workspace/lnstxbridge-dashboard\nnpm i\nexport NEXT_PUBLIC_BACKEND_URL=\"http://localhost:9008\"\n", "command": "npm run dev\n"}, {"init": "git clone https://github.com/pseudozach/umbrel /workspace/umbrel\ncd /workspace/umbrel\n", "command": "echo \"umbrel fork is cloned\"\n"}, {"init": "git clone https://github.com/pseudozach/lnstxbridge-client /workspace/lnstxbridge-client\ncd /workspace/lnstxbridge-client\nsleep 150\nnvm use 14\nnpm i\nsed -i 's/sslEnabled: true/sslEnabled: false/g' lib/Config.ts\nmkdir ~/.lnstx-client\ncp boltz.conf ~/.lnstx-client/boltz.conf\necho \"diamond harbor game bird when board caution improve sight scorpion inform income\" > ~/.lnstx-client/seed.dat\nmkdir ~/.lnstx-client/lnd\ndocker cp regtest:/root/.lnd-btc2/tls.cert ~/.lnstx-client/lnd/tls.cert\ndocker cp regtest:/root/.lnd-btc2/data/chain/bitcoin/regtest/admin.macaroon ~/.lnstx-client/lnd/admin.macaroon\nnvm use 14\nnpm run docker:regtest:fund\n", "command": "npm run dev\n"}], "ports": [{"port": 3000, "onOpen": "ignore"}, {"port": 3999, "onOpen": "open-browser", "visibility": "public"}, {"port": 9007, "onOpen": "ignore", "visibility": "public"}, {"port": 8888, "onOpen": "open-browser", "visibility": "public"}, {"port": 8080, "onOpen": "ignore", "visibility": "public"}, {"port": 8000, "onOpen": "ignore", "visibility": "public"}]}
{"image": "maven:3.6.3-jdk-8", "tasks": [{"name": "Script Task", "init": "mvn dependency:resolve\nmvn test-compile\ncd gitpod\n", "command": "$MVN_COMMAND"}]}
{"tasks": [{"init": "mvn verify"}]}
{"tasks": [{"name": "Prepare Environment", "init": "pip install --upgrade pip && pip install --upgrade setuptools && pip install --upgrade wheel && pip install --upgrade -r requirements.txt && clear\n", "command": "echo 'VAIIIIIIIIIII!!!!!!'"}], "vscode": {"extensions": ["ms-python.python@2021.9.1218897484", "redhat.vscode-yaml", "tamasfe.even-better-toml", "alexcvzz.vscode-sqlite", "jdinhlife.gruvbox"]}}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn develop"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i now -g && npm install && cp .env.example .env\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}}
{"image": "gitpod/workspace-node-lts", "ports": [{"port": 1200, "onOpen": "notify", "visibility": "public"}, {"port": 3000, "onOpen": "notify", "visibility": "public"}], "tasks": [{"name": "deps", "before": "sudo apt update\nsudo apt install -y ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 wget xdg-util\nsudo apt install -y redis-server\n", "init": "pnpm i && pnpm i -C website && pnpm rb"}, {"name": "app", "command": "pnpm run dev", "openMode": "tab-after"}], "vscode": {"extensions": ["cweijan.vscode-database-client2", "dbaeumer.vscode-eslint", "eamodio.gitlens", "EditorConfig.EditorConfig", "esbenp.prettier-vscode", "deepscan.vscode-deepscan", "rangav.vscode-thunder-client", "sonarsource.sonarlint-vscode"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false}}}
{"image": "gitpod/workspace-node-lts", "ports": [{"port": 1200, "onOpen": "notify", "visibility": "public"}, {"port": 3000, "onOpen": "notify", "visibility": "public"}], "tasks": [{"name": "deps", "before": "sudo apt update\nsudo apt install -y ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 wget xdg-util\nsudo apt install -y redis-server\n", "init": "pnpm i && pnpm i -C website && pnpm rb"}, {"name": "app", "command": "pnpm run dev", "openMode": "tab-after"}], "vscode": {"extensions": ["cweijan.vscode-database-client2", "dbaeumer.vscode-eslint", "eamodio.gitlens", "EditorConfig.EditorConfig", "esbenp.prettier-vscode", "deepscan.vscode-deepscan", "rangav.vscode-thunder-client", "sonarsource.sonarlint-vscode"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false}}}
{"image": "gitpod/workspace-node-lts", "ports": [{"port": 1200, "onOpen": "notify", "visibility": "public"}, {"port": 3000, "onOpen": "notify", "visibility": "public"}], "tasks": [{"name": "deps", "before": "sudo apt update\nsudo apt install -y ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libatspi2.0-0 libcairo2 libcups2 libdbus-1-3 libexpat1 libgbm1 libglib2.0-0 libnspr4 libnss3 libpango-1.0-0 libx11-6 libxcb1 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxkbcommon0 libxrandr2 wget xdg-util\nsudo apt install -y redis-server\n", "init": "pnpm i && pnpm i -C website && pnpm rb"}, {"name": "app", "command": "pnpm run dev", "openMode": "tab-after"}], "vscode": {"extensions": ["cweijan.vscode-database-client2", "dbaeumer.vscode-eslint", "eamodio.gitlens", "EditorConfig.EditorConfig", "esbenp.prettier-vscode", "deepscan.vscode-deepscan", "rangav.vscode-thunder-client", "sonarsource.sonarlint-vscode"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addCheck": false, "addComment": false}}}
{"image": "condaforge/mambaforge:latest", "tasks": [{"name": "Create snakemake env", "command": "mamba create -n snakemake -c bioconda -c conda-forge snakemake=7.18.2 -y"}]}
{"github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "addComment": true, "addCheck": true}}, "tasks": [{"name": "cp-demo", "before": "curl -L --http1.1 https://cnfl.io/cli | sudo sh -s -- -b /usr/local/bin\nif [[ \"$AUTOSTART\" =~ \"false\" ]]; then\n  echo \"\u2139\ufe0f AUTOSTART environment variable is set to false, so use ./scripts/start.sh to start cp-demo\"\nelse\n  echo \"\ud83d\ude80 Starting up cp-demo (you can disable autostart by exporting environment variable AUTOSTART=false, see https://www.gitpod.io/docs/environment-variables)\"\n  CLEAN=false VIZ=false ./scripts/start.sh || CLEAN=true VIZ=false ./scripts/start.sh || exit 1\n  echo \"\ud83d\ude80 You can now follow steps in https://docs.confluent.io/platform/current/tutorials/cp-demo/docs/on-prem.html#guided-tutorial\"\nfi\n"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}, "ports": [{"port": 2181, "onOpen": "ignore"}, {"port": 2182, "onOpen": "ignore"}, {"port": 8091, "onOpen": "ignore"}, {"port": 9091, "onOpen": "ignore"}, {"port": 10091, "onOpen": "ignore"}, {"port": 11091, "onOpen": "ignore"}, {"port": 12091, "onOpen": "ignore"}, {"port": 8092, "onOpen": "ignore"}, {"port": 9092, "onOpen": "ignore"}, {"port": 10092, "onOpen": "ignore"}, {"port": 11092, "onOpen": "ignore"}, {"port": 12092, "onOpen": "ignore"}, {"port": 8083, "onOpen": "ignore"}, {"port": 9200, "onOpen": "ignore"}, {"port": 9300, "onOpen": "ignore"}, {"port": 5601, "onOpen": "notify"}, {"port": 9021, "onOpen": "notify", "visibility": "public"}, {"port": 9022, "onOpen": "ignore"}, {"port": 8085, "onOpen": "ignore"}, {"port": 8088, "onOpen": "ignore", "visibility": "public"}, {"port": 8089, "onOpen": "ignore"}, {"port": 8086, "onOpen": "ignore"}]}
{"github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "addComment": true, "addCheck": true}}, "tasks": [{"name": "cp-demo", "before": "curl -L --http1.1 https://cnfl.io/cli | sudo sh -s -- -b /usr/local/bin\nif [[ \"$AUTOSTART\" =~ \"false\" ]]; then\n  echo \"\u2139\ufe0f AUTOSTART environment variable is set to false, so use ./scripts/start.sh to start cp-demo\"\nelse\n  echo \"\ud83d\ude80 Starting up cp-demo (you can disable autostart by exporting environment variable AUTOSTART=false, see https://www.gitpod.io/docs/environment-variables)\"\n  CLEAN=false VIZ=false ./scripts/start.sh || CLEAN=true VIZ=false ./scripts/start.sh || exit 1\n  echo \"\ud83d\ude80 You can now follow steps in https://docs.confluent.io/platform/current/tutorials/cp-demo/docs/on-prem.html#guided-tutorial\"\nfi\n"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}, "ports": [{"port": 2181, "onOpen": "ignore"}, {"port": 2182, "onOpen": "ignore"}, {"port": 8091, "onOpen": "ignore"}, {"port": 9091, "onOpen": "ignore"}, {"port": 10091, "onOpen": "ignore"}, {"port": 11091, "onOpen": "ignore"}, {"port": 12091, "onOpen": "ignore"}, {"port": 8092, "onOpen": "ignore"}, {"port": 9092, "onOpen": "ignore"}, {"port": 10092, "onOpen": "ignore"}, {"port": 11092, "onOpen": "ignore"}, {"port": 12092, "onOpen": "ignore"}, {"port": 8083, "onOpen": "ignore"}, {"port": 9200, "onOpen": "ignore"}, {"port": 9300, "onOpen": "ignore"}, {"port": 5601, "onOpen": "notify"}, {"port": 9021, "onOpen": "notify", "visibility": "public"}, {"port": 9022, "onOpen": "ignore"}, {"port": 8085, "onOpen": "ignore"}, {"port": 8088, "onOpen": "ignore", "visibility": "public"}, {"port": 8089, "onOpen": "ignore"}, {"port": 8086, "onOpen": "ignore"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pdk bundle install"}], "vscode": {"extensions": ["puppet.puppet-vscode@1.0.0:oSzfTkDf6Cmc1jOjgW33VA=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pdk bundle install"}], "vscode": {"extensions": ["puppet.puppet-vscode@1.0.0:oSzfTkDf6Cmc1jOjgW33VA=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pdk bundle install"}], "vscode": {"extensions": ["puppet.puppet-vscode@1.0.0:oSzfTkDf6Cmc1jOjgW33VA=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pdk bundle install"}], "vscode": {"extensions": ["puppet.puppet-vscode@1.0.0:oSzfTkDf6Cmc1jOjgW33VA=="]}}
{"tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "effect.effect-debugger"]}}
{"tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "effect.effect-debugger"]}}
{"tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "effect.effect-debugger"]}}
{"tasks": [{"init": "npm install -g pnpm && pnpm install && pnpm build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "effect.effect-debugger"]}}
{"tasks": [{"name": "Setup Dev Environment", "before": "npm i -g @aeternity/aeproject@^4.6.0\nnpm i\n", "init": "aeproject env\n", "command": "aeproject -V\naeproject --help\n"}], "vscode": {"extensions": ["hackbg.sophia"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn && gp sync-done boot"}, {"before": "cd gulp", "init": "gp sync-await boot && yarn", "command": "yarn gulp"}], "ports": [{"port": 3005, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn && gp sync-done boot"}, {"before": "cd gulp", "init": "gp sync-await boot && yarn", "command": "yarn gulp"}], "ports": [{"port": 3005, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn && gp sync-done boot"}, {"before": "cd gulp", "init": "gp sync-await boot && yarn", "command": "yarn gulp"}], "ports": [{"port": 3005, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "yarn && gp sync-done boot"}, {"before": "cd gulp", "init": "gp sync-await boot && yarn", "command": "yarn gulp"}], "ports": [{"port": 3005, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npx elm-tooling install && npm run dev"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npx elm-tooling install && npm run dev"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npx elm-tooling install && npm run dev"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npx elm-tooling install && npm run dev"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "nvm use default && npm install near-cli -g --no-optional", "init": "yarn && brew install tree", "command": "clear && echo Explore non-fungible tokens on NEAR Protocol"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "nvm use default && npm install near-cli -g --no-optional", "init": "yarn && brew install tree", "command": "clear && echo Explore non-fungible tokens on NEAR Protocol"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "nvm use default && npm install near-cli -g --no-optional", "init": "yarn && brew install tree", "command": "clear && echo Explore non-fungible tokens on NEAR Protocol"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "nvm use default && npm install near-cli -g --no-optional", "init": "yarn && brew install tree", "command": "clear && echo Explore non-fungible tokens on NEAR Protocol"}]}
{"image": "leanprovercommunity/mathlib:gitpod", "vscode": {"extensions": ["jroesch.lean"]}, "tasks": [{"command": ". /home/gitpod/.profile && leanpkg configure && leanproject get-mathlib-cache"}]}
{"image": "leanprovercommunity/mathlib:gitpod", "vscode": {"extensions": ["jroesch.lean"]}, "tasks": [{"command": ". /home/gitpod/.profile && leanpkg configure && leanproject get-mathlib-cache"}]}
{"image": "leanprovercommunity/mathlib:gitpod", "vscode": {"extensions": ["jroesch.lean"]}, "tasks": [{"command": ". /home/gitpod/.profile && leanpkg configure && leanproject get-mathlib-cache"}]}
{"image": "leanprovercommunity/mathlib:gitpod", "vscode": {"extensions": ["jroesch.lean"]}, "tasks": [{"command": ". /home/gitpod/.profile && leanpkg configure && leanproject get-mathlib-cache"}]}
{"image": "jelaniwoods/base-stata14"}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"command": "bc run;\n"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"command": "bc run;\n"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"command": "bc run;\n"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"command": "bc run;\n"}], "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"image": {"file": ".devcontainer/Dockerfile"}, "tasks": [{"init": "bash .devcontainer/onCreateCommand.sh", "command": "bash .devcontainer/postStartCommand.sh && bash && exit"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".devcontainer/Dockerfile"}, "tasks": [{"init": "bash .devcontainer/onCreateCommand.sh", "command": "bash .devcontainer/postStartCommand.sh && bash && exit"}], "vscode": {"extensions": ["ms-python.python"]}}
{"additionalRepositories": [{"url": "https://github.com/mattermost/mattermost"}], "ports": [{"port": 8065, "description": "for Mattermost instance", "onOpen": "open-browser", "visibility": "public"}, {"port": 6080, "description": "for noVNC instance (Cypress)", "onOpen": "notify"}, {"port": 5432, "onOpen": "ignore"}, {"port": 5900, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}], "image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "addCheck": false}}, "vscode": {"extensions": ["golang.go"]}, "workspaceLocation": "mattermost-gitpod-config/mattermost.code-workspace", "tasks": [{"name": "Server", "before": "cd ../mattermost/server\nexport MM_SERVICESETTINGS_SITEURL=$(gp url 8065)\n", "init": "go run ./build/docker-compose-generator/main.go postgres minio | docker-compose -f docker-compose.makefile.yml pull\nmake run-server\ngp ports await 8065\nmake stop-server\nmake test-data\necho \"Server built\"\n", "command": "make run-server\n", "env": {"ENABLED_DOCKER_SERVICES": "postgres minio", "MM_SERVICESETTINGS_ENABLELOCALMODE": true, "MM_SERVICESETTINGS_ENABLEBOTACCOUNTCREATION": true, "MM_SERVICESETTINGS_ENABLEOAUTHSERVICEPROVIDER": true, "MM_SERVICESETTINGS_ENABLEDEVELOPER": true, "MM_SERVICESETTINGS_ENABLETESTING": true, "MM_TEAMSETTINGS_ENABLEOPENSERVER": true, "MM_PLUGINSETTINGS_AUTOMATICPREPACKAGEDPLUGINS": true, "MM_PLUGINSETTINGS_ENABLEUPLOADS": true, "MM_EXPERIMENTALSETTINGS_ENABLEAPPBAR": true, "MM_FEATUREFLAGS_AppsEnabled": true, "MM_LOGSETTINGS_CONSOLELEVEL": "DEBUG", "MM_LOGSETTINGS_FILELEVEL": "DEBUG"}}, {"name": "Webapp", "before": "cd ../mattermost/webapp\nexport MM_SERVICESETTINGS_SITEURL=$(gp url 8065)\nnvm install\nnvm alias default $(cat .nvmrc)\necho \"nvm use default\" >> ~/.bashrc\n", "init": "mkdir -p channels/dist\ncd ../server\nln -nfs ../webapp/channels/dist client\ncd ../webapp\nnpm i\necho \"Webapp built\"\n", "command": "npm i\nmake run\n", "openMode": "split-right"}, {"name": "Cypress", "init": "cd ../mattermost/e2e-tests/cypress\nnpm i\n"}, {"name": "Playwright", "init": "cd ../mattermost/e2e-tests/playwright\nnpm i\nnpx playwright install\n"}, {"name": "Plugin", "before": "nvm install || nvm install v13.14\n", "init": "source /workspace/mattermost-gitpod-config/scripts/plugin/init-plugin-project.sh\necho \"Plugin built\"\n", "command": "gp ports await 8065\necho \"Server is running at $(gp url 8065)\"\nsource /workspace/mattermost-gitpod-config/scripts/plugin/run-plugin-project.sh\n", "env": {"MM_SERVICESETTINGS_ENABLEDEVELOPER": true}}, {"name": "Project", "init": "source /workspace/mattermost-gitpod-config/scripts/app/init-app-project.sh\necho \"Project built\"\n", "command": "source /workspace/mattermost-gitpod-config/scripts/app/run-app-project.sh\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "echo 'init script'", "command": "learnpack start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "echo 'init script'", "command": "learnpack start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "echo 'init script'", "command": "learnpack start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "echo 'init script'", "command": "learnpack start"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "npm install"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "npm install"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "npm install"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "npm install"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "pip install ."}]}
{"tasks": [{"init": "pip install ."}]}
{"tasks": [{"init": "pip install ."}]}
{"tasks": [{"init": "pip install ."}]}
{"tasks": [{"name": "Start web server", "init": "python -m http.server 8000"}], "ports": [{"port": 8000, "onOpen": "open-browser"}]}
{"tasks": [{"command": "gp open \"$GITPOD_REPO_ROOT/cmake.toml\""}, {"command": "gp open \"$GITPOD_REPO_ROOT/src/main.cpp\""}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addComment": false, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "vscode": {"extensions": ["ms-vscode.cmake-tools", "bungcip.better-toml", "llvm-vs-code-extensions.vscode-clangd"]}}
{"tasks": [{"command": "gp open \"$GITPOD_REPO_ROOT/cmake.toml\""}, {"command": "gp open \"$GITPOD_REPO_ROOT/src/main.cpp\""}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": false, "pullRequestsFromForks": false, "addComment": false, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "vscode": {"extensions": ["ms-vscode.cmake-tools", "bungcip.better-toml", "llvm-vs-code-extensions.vscode-clangd"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "open terminial"}, {"name": "install & run dev server", "openMode": "split-right", "init": "npm install", "command": "npm start"}], "vscode": {"extensions": ["angular.ng-template", "ecmel.vscode-html-css", "eamodio.gitlens"]}, "ports": [{"port": 4200, "onOpen": "open-browser"}], "github": {"prebuilds": {"master": true}}}
{"tasks": [{"init": "yarn && yarn build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn && yarn build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn && yarn build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"tasks": [{"init": "yarn && yarn build"}], "github": {"prebuilds": {"addCheck": true}}, "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"before": "echo \"nvm use default\" >> ~/.bashrc && nvm use default", "command": "source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev"}], "ports": [{"port": 1234, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"before": "echo \"nvm use default\" >> ~/.bashrc && nvm use default", "command": "source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev"}], "ports": [{"port": 1234, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"before": "echo \"nvm use default\" >> ~/.bashrc && nvm use default", "command": "source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev"}], "ports": [{"port": 1234, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"before": "echo \"nvm use default\" >> ~/.bashrc && nvm use default", "command": "source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev"}], "ports": [{"port": 1234, "onOpen": "open-browser"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": "pnpm install", "command": "cd viewer && pnpm serve"}], "ports": [{"port": 8080, "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}, "vscode": {"extensions": ["octref.vetur@0.32.0:03mwRhlVpWDul4qBChcVUA==", "vtrois.gitmoji-vscode@1.0.5:iedq1JRjfM74CfhCoy3gJQ=="]}}
{"ports": [{"port": 3000, "visibility": "private", "onOpen": "open-browser"}]}
{"tasks": [{"init": "npm install && bin/setup", "command": "bin/rails server"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["bungcip.better-toml", "serayuzgur.crates", "matklad.rust-analyzer"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true, "addComment": true}}}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run dev"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"image": "quadeare/gitpod-kubectl:latest", "vscode": {"extensions": ["ms-azuretools.vscode-docker"]}}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn develop"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn develop"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn develop"}]}
{"ports": [{"port": 8000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn develop"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i now -g && npm install && cp .env.example .env\n"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i now -g && npm install && cp .env.example .env\n"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i now -g && npm install && cp .env.example .env\n"}]}
{"ports": [{"port": 3000, "onOpen": "open-browser"}], "tasks": [{"init": "npm i now -g && npm install && cp .env.example .env\n"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}}
{"tasks": [{"init": "yarn install && yarn run build"}], "vscode": {"extensions": ["octref.vetur@0.23.0:TEzauMObB6f3i2JqlvrOpA=="]}}
{"image": {"file": ".Dockerfile"}, "tasks": [{"before": "# Get latest pnpm version, in case the custom docker image was not updated\n# Until this issue gets resolved - https://github.com/gitpod-io/gitpod/issues/12551\ncurl -fsSL https://get.pnpm.io/install.sh | SHELL=`which bash` bash -\n", "init": "pnpm install\npnpm run build\n", "command": ".gitpod/gitpod-setup.sh\n"}], "vscode": {"extensions": ["astro-build.astro-vscode", "esbenp.prettier-vscode", "dbaeumer.vscode-eslint"]}, "ports": [{"port": 4321, "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}}
{"github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": false, "addComment": false, "addBadge": false, "addLabel": false}}, "tasks": [{"name": "setup", "init": "pushd /workspace\nwget -qO- https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba\npopd\n# bootstrap activation commands for other tasks to reuse\ncat <<EOT > /workspace/bin/activate-env.sh\nexport MAMBA_ROOT_PREFIX=/workspace/.micromamba\nexport MAMBA_EXE=/workspace/bin/micromamba\n$(/workspace/bin/micromamba shell hook --shell=bash)\nexport JUPYTER_PREFER_ENV_PATH=1\nexport TZ=UTC\nmicromamba activate\nEOT\nsource /workspace/bin/activate-env.sh\nmicromamba config append channels conda-forge\nmicromamba install -n base -y python=3.10 nodejs=18 yarn\nsource /workspace/bin/activate-env.sh\npython -m pip install -e \".[dev,docs,test]\" && jlpm install && jlpm run build\ngp sync-done setup\n", "command": "gp sync-done setup\nsource /workspace/bin/activate-env.sh\n# Set no token and allow any origin, so that you can open it in a new tab\n# Disable iframe security so can load in the editor as well\njupyter lab --dev-mode --watch --extensions-in-dev-mode --ServerApp.IdentityProvider.token='' --ServerApp.allow_remote_access=True\n"}, {"name": "auto-activate", "command": "gp sync-await setup\necho \"source /workspace/bin/activate-env.sh\" >> ~/.bashrc\nsource /workspace/bin/activate-env.sh\n"}, {"name": "documentation", "command": "gp sync-await setup\nsource /workspace/bin/activate-env.sh\ncd docs\nmake html\ncd build/html\npython -m http.server 8000\n"}], "ports": [{"port": 8888}, {"port": 8000}], "vscode": {"extensions": ["esbenp.prettier-vscode"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "chmod 777 set_env_vars.sh && ./set_env_vars.sh && cd backend && pip install -r requirements/dev.txt && flask db init && flask db migrate && flask db upgrade && cd ../frontend && yarn", "command": "cd backend && flask run --with-threads"}]}
{"tasks": [{"name": "aws-cli", "env": {"AWS_CLI_AUTO_PROMPT": "on-partial"}, "init": "cd /workspace\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\ncd $THEIA_WORKSPACE_ROOT\n"}, {"name": "postgres", "init": "curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg\necho \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" |sudo tee  /etc/apt/sources.list.d/pgdg.list\nsudo apt update\nsudo apt install -y postgresql-client-13 libpq-dev\n"}], "vscode": {"extensions": ["42Crunch.vscode-openapi"]}}
{"tasks": [{"init": "# runs during prebuild\n(\n  set -e\n\n  # install `deno` for bootstrap into workspace dir\n  # https://www.gitpod.io/docs/configure/projects/prebuilds#workspace-directory-only\n  curl -fsSL https://deno.land/install.sh | DENO_INSTALL=.deno sh\n)\n", "command": "# runs during startup\n(\n  set -e\n  .deno/bin/deno task compile\n  echo \"./tea is hot\"\n)\n"}]}
{"tasks": [{"name": "dependencies", "init": "# Set up rig\ncurl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-latest.tar.gz | sudo tar xz -C /usr/local\n\n# Set up R\nrig install\nrig system add-pak\nrig system make-links\nrig system setup-user-lib\n\n# Deps\nsudo apt install -y ccache cmake\n\n# Scriptlets, with custom Git config\nmv ~/.gitconfig ~/.gitconfig.gitpod\ncurl -s https://raw.githubusercontent.com/krlmlr/scriptlets/master/bootstrap | sh\n\n## .editorconfig\nln -s ~/.editorconfig ..\n\n## Set up ccache\nln -s /usr/lib/ccache/* ~/bin/\n\n## Work around glitch with non-systemd systems\nln -s $(which true) ~/bin/timedatectl\n\n## Define PATH\n# FIXME: Why is this necessary? This doesn't work in Radian.\necho 'export PATH='${HOME}'/bin:${PATH}' >> ~/.bashrc\n\n# Set up Makevars\nmkdir -p ~/.R\necho -e \"MAKEFLAGS = -j8\\nCXXFLAGS = -O0 -g\" > ~/.R/Makevars\n\n# Install R packages\necho 'options(repos = \"https://packagemanager.rstudio.com/all/__linux__/'$(cat /etc/lsb-release | sed  -n '/DISTRIB_CODENAME=/ {s///;p}')'/latest\")' >> ~/.Rprofile\n\n## Install devtools and R dependencies\nR -q -e 'pak::pak(c(\"devtools\", \"languageserver\", \"styler\")); pak::pak(\"deps::.\", dependencies = TRUE)'\n\n# Install radian\nsudo pip install radian\n"}], "vscode": {"extensions": ["ms-vscode.cpptools", "go2sh.cmake-integration-vscode", "EditorConfig.EditorConfig", "REditorSupport.r"]}}
{"tasks": [{"init": "npm install && npm run check"}]}
{"image": "nfcore/gitpod:latest", "tasks": [{"name": "Update Nextflow and setup pre-commit", "command": "pre-commit install --install-hooks\nnextflow self-update\n"}], "vscode": {"extensions": ["codezombiech.gitignore", "esbenp.prettier-vscode", "eamodio.gitlens", "EditorConfig.EditorConfig", "Gruntfuggly.todo-tree", "mechatroner.rainbow-csv", "oderwat.indent-rainbow", "streetsidesoftware.code-spell-checker"]}}
{"image": {"file": ".devcontainer/Dockerfile"}, "tasks": [{"init": "dotnet tool restore && dotnet restore"}], "vscode": {"extensions": ["Ionide.Ionide-fsharp"]}}
{"github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}, "tasks": [{"before": "echo y | sdk install java 17.0.1-oracle", "init": "mvn clean install -DskipTests"}]}
{"tasks": [{"init": "docker-compose pull --include-deps appwrite telegraf influxdb traefik", "command": "[ ! -f ./env ] && cp .gitpod/.env.example ./.env\ndocker-compose up\n"}, {"init": "npm install", "command": "export HMR_HOST=`gp url 3000`\nnpm run dev\n"}], "ports": [{"port": 443, "onOpen": "ignore"}, {"port": 3000, "onOpen": "open-browser", "visibility": "public"}, {"port": 8080, "onOpen": "open-browser", "visibility": "public"}], "vscode": {"extensions": ["bradlc.vscode-tailwindcss", "ms-azuretools.vscode-docker", "svelte.svelte-vscode"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Setup environment variables for ESP-IDF", "command": "source /home/gitpod/.espressif/frameworks/esp-idf/export.sh > /dev/null 2>&1\n"}], "vscode": {"extensions": ["espressif.esp-idf-extension", "anwar.resourcemonitor", "yzhang.markdown-all-in-one"]}}
{"tasks": [{"init": "export NG_CLI_ANALYTICS=ci && export SKIP_POST_INSTALL=true && npm ci", "command": "npm run wc:serve"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm install infoooze -g", "command": "infoooze"}]}
{"image": "condaforge/mambaforge:23.1.0-1", "tasks": [{"name": "Initialize", "init": ". /opt/conda/etc/profile.d/conda.sh\nconda activate base\nsleep 5\nmamba env create --name fastq-dl --file /workspace/fastq-dl/environment.yml\nconda activate fastq-dl\nmamba install -y -c conda-forge -c bioconda just pre-commit\nmkdir -p .vscode\necho '{\"python.pythonPath\": \"/home/gitpod/.conda/envs/fastq-dl/bin/python\"}' > .vscode/settings.json\npre-commit install --install-hooks\njust install\n", "command": ""}], "vscode": {"extensions": ["codezombiech.gitignore", "davidanson.vscode-markdownlint", "eamodio.gitlens", "EditorConfig.EditorConfig", "Gruntfuggly.todo-tree", "mechatroner.rainbow-csv", "oderwat.indent-rainbow", "streetsidesoftware.code-spell-checker", "ms-python.black-formatter", "njpwerner.autodocstring", "ms-python.python"]}}
{"tasks": [{"name": "Setup environment variables", "command": "source ./setup-env-variables.sh\ngp sync-done env-setup\n"}, {"name": "Install AWS CLI", "command": "gp sync-await env-setup\n./install-aws-cli.sh\ngp sync-done aws-cli\n"}, {"name": "Setup default aws-vault & Open Dashboards", "command": "gp sync-await aws-cli\n./collect-credentials.sh\n./open-cloud-dashboards.sh\n"}, {"name": "Install kubectl", "command": "source ./install-kubectl.sh"}, {"name": "Install Terraform", "command": "source ./install-terraform.sh"}, {"name": "Install Dynamodb", "command": "source ./install-dynamodb-local.sh"}, {"name": "Install Visual Studio Code extensions", "command": "source ./install-vsextensions.sh"}, {"name": "Install PostgreSQL", "command": "source ./install-postgres.sh"}, {"name": "Install Google Cloud SDK", "command": "source ./install-gcloud.sh"}], "vscode": {"extensions": ["ms-python.python", "aws-toolkit-vscode.aws-toolkit-vscode", "ms-mssql.mssql", "amazon-dynamodb.aws-dynamodb-toolkit"]}, "github": {"prebuilds": {"master": true}}}
{"image": "gitpod/workspace-full:latest", "tasks": [{"init": "npm install --location=global opcua-commander && \\\nsudo apt update && sudo apt -yy install yamllint && pip install cmakelang\n", "command": "bash ./initialbuild.sh"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install && npm run build\n", "command": "npm run test"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true}}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "ignore"}], "vscode": {"extensions": ["learn-pack.learnpack-vscode"]}, "github": {"prebuilds": {"master": true, "pullRequests": false, "addComment": false}}}
{"tasks": [{"name": "Web Server", "command": "python -m http.server 8080 --bind 127.0.0.1 --directory=docs"}], "ports": [{"port": 8080, "name": "Web Server", "onOpen": "open-preview", "visibility": "public"}]}
{"tasks": [{"name": "Database", "command": "mkdir -p /workspace/data && mongod --dbpath /workspace/data\n"}, {"name": "Server", "init": "npm ci\nnpm run env\n", "command": "npm run dev"}], "image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"name": "Script Task", "init": "echo 'init script'", "command": "bash ./gitpod.sh"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "just install"}]}
{"image": {"file": "Dockerfile.gitpod"}, "ports": [{"port": 8080}], "tasks": [{"init": "./manage.sh build", "command": "./manage.sh run"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": true}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "sudo docker-up"}, {"command": "make test"}], "ports": [{"port": 8080, "onOpen": "open-browser", "visibility": "private"}, {"port": 7687, "onOpen": "ignore", "visibility": "private"}, {"port": 7473, "onOpen": "ignore", "visibility": "private"}, {"port": 7474, "onOpen": "ignore", "visibility": "private"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "WIKI", "command": "sudo apt-get update\ncurl https://raw.githubusercontent.com/freeflowuniverse/crystaltools/development_install_patch/install.sh > /tmp/install.sh\nbash /tmp/install.sh\nsource /workspace/env.sh\npubltools_check\ncd wiki_config && publishtools flatten \ncd ..\necho ' - do \"./wiki_run\" to run wiki.'\necho ' - do \"open workspace.code-workspace\" to open all relevant dirs in your editor.'\n"}], "ports": [{"port": 9998, "onOpen": "open-browser"}, {"port": 8080, "onOpen": "open-browser"}, {"port": 6379, "onOpen": "ignore"}], "vscode": {"extensions": ["vlanguage.vscode-vlang", "telesoho.vscode-markdown-paste-image", "yzhang.markdown-all-in-one", "shd101wyy.markdown-preview-enhanced", "bierner.markdown-mermaid", "darkriszty.markdown-table-prettify", "bpruitt-goddard.mermaid-markdown-syntax-highlighting", "shuworks.vscode-table-formatter"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": false, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}}
{"github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false}}, "tasks": [{"name": "Nextcloud Server", "command": "git config core.fileMode false\nsudo chown -R www-data:www-data .\nsudo chmod -R 777 .\ncd gitpod\ndocker-compose up\n"}, {"name": "Dependency install and Frontend", "init": "curl -sS https://getcomposer.org/installer -o ~/composer-setup.php\nsudo php ~/composer-setup.php --install-dir=/bin --filename=composer\ncomposer --version\nmake dev-setup\n", "command": "make watch-js"}, {"name": "Terminal", "command": "clear"}], "ports": [{"port": 8080, "onOpen": "open-browser", "visibility": "private"}, {"port": 8081, "visibility": "private", "onOpen": "ignore"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "mkdir -p /home/gitpod/.config/nix && echo 'sandbox = false' >> /home/gitpod/.config/nix/nix.conf\n"}, {"name": "nix", "command": "direnv allow\n"}, {"name": "tailscaled", "command": "sudo tailscaled\n"}, {"name": "tailscale", "command": "sudo -E tailscale up --hostname \"gitpod-${GITPOD_WORKSPACE_ID}\" \\\n                     --authkey \"${TAILSCALE_AUTHKEY}\"\n"}], "vscode": {"extensions": ["bbenoist.Nix"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"tasks": [{"init": "npm ci && npm run build", "command": "npm run dev"}], "ports": [{"port": 5173, "onOpen": "open-preview"}], "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": true, "master": true, "branches": true, "pullRequestsFromForks": true}}}
{"tasks": [{"init": "yarn install", "command": "yarn run dev"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Mongoose", "init": "npm install && gp sync-done install", "command": "cp .env.example .env\nmkdir -p /workspace/data && mongod --dbpath /workspace/data\n"}, {"name": "Nodemon", "init": "gp sync-await install", "command": "npm start", "openMode": "split-right"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Start Couchbase", "command": "./startcb.sh && gp sync-done startcb"}, {"name": "Log use", "command": "curl -s 'https://da-demo-images.s3.amazonaws.com/runItNow_outline.png?couchbase-example=ottomanjs-quickstart-repo&source=gitpod' > /dev/null"}, {"name": "Start app", "init": "npm install", "command": "gp sync-await startcb && npm run init-db && while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' -u Administrator:password localhost:8091/pools/default/buckets/user_profile)\" != \"200\" ]]; do sleep 5; done && npm start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": 8091, "onOpen": "open-browser"}, {"port": "8092-10000", "onOpen": "ignore"}, {"port": 4369, "onOpen": "ignore"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "addCheck": true}}}
{"image": "hhvm/hhvm-proxygen", "ports": [{"port": 8080}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "echo 'PATH_add ~/julia-1.8.0/bin' > /workspace/.envrc  \\ && echo 'export SEARCHLIGHT_USERNAME=\"gitpod\"' >> /workspace/.envrc"}, {"command": "python3 -m http.server 8080 -d docs/build"}, {"command": "gp preview $(gp url 8080)"}, {"command": "julia -e 'using Pkg; Pkg.activate(\".\"); Pkg.instantiate();include(\"testsCreateContract.jl\"); include(\"testPendingMutations.jl\")'"}]}
{"tasks": [{"command": "gp await-port 6006 && gp preview $(gp url 6006)"}, {"init": "yarn install", "command": "yarn dev"}], "ports": [{"port": 6006, "onOpen": "ignore"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": ". ${GITPOD_REPO_ROOT}/install.sh"}, {"name": "Terminal", "command": "echo \"\"; echo \"Commands you can try:\"; echo \" * apachectl stop\"; echo \" * apachectl start\"; echo \" * gp open /var/log/apache2/access.log\"; echo \" * gp open /var/log/apache2/error.log\";\n"}, {"name": "Apache", "command": "apachectl start && multitail /var/log/apache2/access.log -I /var/log/apache2/error.log\n"}]}
{"image": {"file": "Dockerfile.gitpod"}, "ports": [{"port": 6080, "onOpen": "notify"}, {"port": 5900, "onOpen": "ignore"}], "tasks": [{"command": "npm install && npm run start:ui\n"}]}
{"tasks": [{"name": "Development", "init": "npm install && gp sync-done install", "command": "npm run dev"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "EditorConfig.EditorConfig", "bradlc.vscode-tailwindcss", "christian-kohler.path-intellisense"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "GPG & tailscaled", "before": "bash $GITPOD_REPO_ROOT/prep_gpg.sh\n", "command": "bash $GITPOD_REPO_ROOT/tailscale.sh\n"}]}
{"tasks": [{"name": "Setup forge and install dependency", "before": "curl -L https://foundry.paradigm.xyz | bash\necho \"export PATH=$PATH:/home/gitpod/.foundry/bin\" >> /home/gitpod/.bashrc\nsource /home/gitpod/.bashrc\nfoundryup\n", "init": "forge install", "command": "forge build"}], "vscode": {"extensions": ["JuanBlanco.solidity"]}}
{"tasks": [{"init": "mvn install -DskipTests=false"}], "image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Compile Gearlock", "init": "bash makeme"}], "github": {"prebuilds": {"addCheck": false}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"command": "npm install"}]}
{"image": "gitpod/workspace-mongodb", "ports": [{"port": 27017, "onOpen": "ignore"}, {"port": 8000, "onOpen": "open-preview"}, {"port": 9228, "onOpen": "ignore"}, {"port": 3000, "onOpen": "ignore"}, {"port": 9229, "onOpen": "ignore"}], "tasks": [{"name": "db", "before": "mkdir -p /workspace/data && (mongod --dbpath /workspace/data &)\n"}, {"name": "server", "before": "export COOKIE_DOMAIN=gitpod.io && export HOME_LOCATION=$(gp url 8000) && export API_LOCATION=$(gp url 3000)", "init": "cp sample.env .env && npm ci && gp sync-done npm-ci && gp await-port 27017 && npm run seed && mongo --eval \"db.fsyncLock(); db.fsyncUnlock()\"\n", "command": "npm run ensure-env && gp await-port 27017 && npm run develop:server\n"}, {"name": "client", "before": "export HOME_LOCATION=$(gp url 8000) && export API_LOCATION=$(gp url 3000)", "init": "cd ./client && gp sync-await npm-ci && npm run prebuild && npm run build:workers && cd ..\n", "command": "gp await-port 3000 && cd ./client && npm run develop -- -H '0.0.0.0'\n", "openMode": "split-right"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": false, "addLabel": false}}}
{"ports": [{"port": 8080, "onOpen": "notify"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-debug", "pivotal.vscode-spring-boot"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["dbaeumer.vscode-eslint@2.0.15:/v3eRFwBI38JLZJv5ExY5g==", "esbenp.prettier-vscode@3.18.0:SpDMXXww8cAUOXaBCNECgQ=="]}}
{"tasks": [{"init": "npm install && bundle install"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"before": "echo \"export PUPPETEER_CACHE_DIR=/workspace/tester-plugin-tmp-dir/node_modules/.cache/puppeteer\" >> /home/gitpod/.bashrc\ngitpod-env-per-project >> /home/gitpod/.bashrc && source /home/gitpod/.bashrc", "init": "git config --global user.name \"Sebastian Landwehr\"\ngit lfs pull && yarn --frozen-lockfile"}], "vscode": {"extensions": ["https://sebastianlandwehr.com/vscode-extensions/karlito40.fix-irregular-whitespace-0.1.1.vsix", "https://sebastianlandwehr.com/vscode-extensions/adrianwilczynski.toggle-hidden-1.0.2.vsix", "octref.vetur@0.33.1"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "github": {"prebuilds": {"addComment": true, "addBadge": true, "addLabel": "prebuilt-in-gitpod"}}}
{"tasks": [{"name": "deps", "init": "yarn && gp sync-done deps"}, {"name": "Start", "init": "gp sync-await deps && node env.cjs", "command": "yarn dev\n"}], "ports": [{"port": 3000, "visibility": "public", "onOpen": "ignore"}, {"port": 6363, "visibility": "public", "onOpen": "ignore"}]}
{"tasks": [{"init": "./gitpod-init.sh"}, {"command": "./gitpod-command.sh"}]}
{"tasks": [{"init": "./install_full.sh"}]}
{"tasks": [{"init": "sudo apt-get update\nsudo DEBIAN_FRONTEND=noninteractive apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb -y --fix-missing\nnpm install -g pnpm\npnpm install\n"}]}
{"image": "ghcr.io/kubesphere/ks-jenkins-gitpod:sha-ee0a2d3", "tasks": [{"init": "git config --global user.name $GIT_AUTHOR_NAME\ngit config --global user.email $GIT_COMMITTER_EMAIL\ngh repo fork --remote\njcli cwp --install-artifacts --config-path formula.yaml || true\n"}], "vscode": {"extensions": ["eamodio.gitlens"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pip install -r ./requirements.txt && sh scripts/download_neologd_dict.sh"}]}
{"image": "patrickmckernin/rps-bootstrap-2022-spring", "tasks": [{"before": "bin/setup\n"}], "ports": [{"port": 3000, "onOpen": "open-preview"}, {"port": "9500-9999", "onOpen": "ignore"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb", "mbessey.vscode-rufo", "aliariff.vscode-erb-beautify"]}}
{"tasks": [{"before": "brew install hugo", "init": "hugo version || exit", "command": "hugo server --bind=0.0.0.0 --appendPort=false --baseUrl=/"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run dev"}], "ports": [{"port": 8080, "onOpen": "open-preview"}]}
{"tasks": [{"init": "npm instal", "command": "npm run dev"}], "vscode": {"extensions": ["esbenp.prettier-vscode", "bradlc.vscode-tailwindcss", "astro-build.astro-vscode"]}}
{"tasks": [{"init": "npm install", "command": "npm run build:umd:watch"}]}
{"image": "gitpod/workspace-dotnet"}
{"checkoutLocation": ".", "workspaceLocation": "workspace", "tasks": [{"name": "Pull images", "env": {"AIRFLOW_IMAGE_NAME": "dmacademy/airflow:2.3.4"}, "init": "docker-compose --file ../docker-compose.yml pull\ngp sync-done pull\n"}, {"name": "Boot Airflow", "env": {"AIRFLOW_IMAGE_NAME": "dmacademy/airflow:2.3.4"}, "init": "gp sync-await pull\ndocker-compose --file ../docker-compose.yml up airflow-init\n", "before": "mkdir -p ./mount/dags ./mount/logs ./mount/plugins\necho -e \"AIRFLOW_UID=$(id -u)\" >> ../.env\n#      docker build . --tag academy-airflow:2.2.3\n#      echo -e \"AIRFLOW_IMAGE_NAME=academy-airflow:2.2.3\" >> ../.env\n# Make sure to add these to your gitpod variables: https://gitpod.io/variables\n# Their value can be obtained from the \"terraform apply\" outputs.\necho -e \"AWS_ACCESS_KEY_ID=${AIRFLOW_IAM_ACCESS_KEY}\" >> ../.env\necho -e \"AWS_SECRET_ACCESS_KEY=${AIRFLOW_IAM_SECRET_ACCESS_KEY}\" >> ../.env\n", "command": "docker-compose --file ../docker-compose.yml up\n"}], "ports": [{"port": 5555, "onOpen": "ignore"}, {"port": 8080, "onOpen": "open-browser"}], "vscode": {"extensions": ["ms-python.python"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 8080}], "vscode": {"extensions": ["ms-vscode.cmake-tools"]}}
{"tasks": [{"init": "npm install && npm run build && make", "command": "npm run start"}]}
{"tasks": [{"init": "npm install", "command": "npm run dev"}], "ports": [{"port": 3000, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod/.gitpod.dockerfile"}, "ports": [{"port": 4000}, {"port": 3000}], "tasks": [{"name": "Phx", "init": ".gitpod/init.sh", "command": ".gitpod/start.sh"}]}
{"tasks": [{"init": "go get && go build ./... && go test ./...", "command": "go run ."}]}
{"tasks": [{"init": "docker-compose build", "command": "docker-compose up"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "checkoutLocation": ".", "tasks": [{"name": "Clean root and grab useful exercises.", "before": "rm -rfv ./{*,.*}\nsudo mv /home/gitpod/linux-exercises/* ."}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "cabal v2-update\nstack build\n", "command": "stack test\n"}], "vscode": {"extensions": ["haskell.haskell", "justusadam.language-haskell"]}, "ports": [{"port": 8000, "onOpen": "open-preview"}]}
{"tasks": [{"command": "python -m pip install --upgrade pip"}, {"command": "python -m pip install -r requirements.txt"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["almenon.arepl@1.0.20:Uu7lIOwyLgmNWpTwCl/iqQ=="]}}
{"tasks": [{"init": "yarn install", "command": "yarn install"}], "image": {"file": ".gitpod.dockerfile"}}
{"vscode": {"extensions": ["arcanis.vscode-zipfs", "dbaeumer.vscode-eslint", "esbenp.prettier-vscode"]}, "github": {"prebuilds": {"branches": true}}, "tasks": [{"before": "[[ ! -z $GNUGPG  ]] && rm -rf ~/.gnupg && cd / && echo $GNUGPG | base64 -d | tar --no-same-owner -xzvf - && export GPG_TTY=$(tty) && sudo chmod 666 $(tty) && cd $GITPOD_REPO_ROOT\n", "init": "corpack enable && corepack prepare && yarn"}], "image": {"file": ".gitpod.dockerfile"}}
{"tasks": [{"name": "Install Dependencies & Start", "init": "npm install && npx playwright install --with-deps && npm i -g @slidev/cli", "command": "npm run dev"}], "ports": [{"name": "Slides Preview", "description": "Port 3030 for the slides", "port": 3030, "onOpen": "open-browser"}]}
{"tasks": [{"init": "mvn install -DskipTests=false"}], "vscode": {"extensions": ["redhat.java", "vscjava.vscode-java-test"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["dbaeumer.vscode-eslint", "github.copilot", "esbenp.prettier-vscode", "bradlc.vscode-tailwindcss", "svelte.svelte-vscode", "prisma.prisma"]}, "tasks": [{"init": "npm i -g @railway/cli"}, {"init": "npm install"}, {"command": "railway run npm run dev", "name": "dev-server"}, {"command": "railway run npx prisma studio", "name": "db-ui"}], "ports": [{"port": 3000, "onOpen": "open-browser", "name": "server"}, {"port": 5555, "onOpen": "open-browser", "name": "db"}]}
{"image": "gitpod/workspace-full-vnc", "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}], "tasks": [{"init": "pip3 install -r requirements.txt", "command": "python3 union_find_drawing_demo.py"}]}
{"tasks": [{"init": "curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh"}]}
{"tasks": [{"name": "NextJS Frontend", "init": "cd /workspace/salable-discord-python/nextjs-frontend && yarn", "command": "cd /workspace/salable-discord-python/nextjs-frontend && yarn run dev"}, {"name": "Discord Bot Backend", "init": "cd /workspace/salable-discord-python/python-discord-bot && pip install -r requirements.txt", "command": "cd /workspace/salable-discord-python/python-discord-bot && python bot.py"}, {"name": "Fly Installer", "init": "curl -L https://fly.io/install.sh | sh", "command": "export FLYCTL_INSTALL=\"/home/gitpod/.fly\" && export PATH=\"$FLYCTL_INSTALL/bin:$PATH\" && fly auth token"}], "ports": [{"name": "Open Me!", "port": 3000, "onOpen": "open-browser", "visibility": "public"}]}
{"tasks": [{"init": "npm install", "command": "if [ -z ${ADYEN_HMAC_KEY+x} ] || [[ -z ${ADYEN_API_KEY+x} ]] || [[ -z ${ADYEN_CLIENT_KEY+x} ]] || [[ -z ${ADYEN_MERCHANT_ACCOUNT+x} ]]; then\n    echo \"Expected environment variables not found. Please set the ADYEN_HMAC_KEY, ADYEN_API_KEY, ADYEN_CLIENT_KEY, ADYEN_MERCHANT_ACCOUNT environment variables and rerun session https://gitpod.io/variables.\"\nelse\n    npm run server\nfi\n"}], "ports": [{"port": 8080, "onOpen": "open-preview", "visibility": "public"}], "vscode": {"extensions": ["esbenp.prettier-vscode", "dbaeumer.vscode-eslint"]}}
{"tasks": [{"name": "todonativemobileapp", "before": "cd /workspace/todonativemobileapp\nnvm install node\nnpm install\nnpm install -g expo-cli\nnpm install -g netlify-cli\nnpm install astra-setup\nnpm install whatwg-fetch\nnpm install -g @expo/ngrok\nnpm install @expo/ngrok@4.1.0\nnpm install react-native-gesture-handler\nnpm install @react-native-segmented-control/segmented-control\nnpm install @expo-google-fonts/inter --legacy-peer-deps\nnpm install babel-plugin-inline-dotenv --legacy-peer-deps\n", "command": "gp open README.md\necho \"todonativemobileapp gitpod ready - LET'S DO THIS!\"\n"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": true, "addLabel": false}}, "ports": [{"port": 8888, "onOpen": "open-browser", "visibility": "public"}, {"port": 19000, "onOpen": "ignore", "visibility": "public"}, {"port": 19001, "onOpen": "ignore", "visibility": "public"}, {"port": 19002, "onOpen": "ignore", "visibility": "public"}, {"port": 3000, "onOpen": "ignore"}, {"port": 4040, "onOpen": "ignore", "visibility": "public"}, {"port": 5037, "onOpen": "ignore", "visibility": "public"}]}
{"image": {"file": "Dockerfile"}, "ports": [{"port": 6080}], "tasks": [{"init": "mkdir src/images && cp /home/gitpod/windows95.img src/images && npm install\n", "command": "npm start"}]}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "open-preview"}], "tasks": [{"init": "/usr/bin/python3 main.py", "command": "/usr/bin/python3 main.py"}]}
{"tasks": [{"init": "bundle install"}]}
{"tasks": [{"name": "HTML generation", "command": "docker run --rm -it -v $PWD:/documents/ asciidoctor/docker-asciidoctor asciidoctor -B /documents/ -b html5 --failure-level WARN -v docs/index.adoc"}, {"name": "Web server", "command": "python -m http.server 8000 --directory docs"}], "ports": [{"port": 8000, "onOpen": "open-preview"}], "vscode": {"extensions": ["asciidoctor.asciidoctor-vscode"]}}
{"vscode": {"extensions": ["tabnine.tabnine-vscode", "dbaeumer.vscode-eslint", "christian-kohler.npm-intellisense", "hookyqr.beautify", "eg2.vscode-npm-script", "eamodio.gitlens"]}}
{"image": "lasery/gitpod-workspace-full:latest"}
{"tasks": [{"init": "pip install -r requirements.txt"}, {"before": "npm install -g stepzen"}]}
{"image": "ghcr.io/cpp-review-dune/introductory-review/dumux", "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}}
{"tasks": [{"init": "npm install"}], "ports": [{"port": 5173, "onOpen": "open-preview", "description": "Website preview"}]}
{"image": {"file": "./.devcontainer/Dockerfile"}}
{"image": "gitpod/workspace-full", "workspaceLocation": "/workspace/example-fastapi-app/fast_api_server", "vscode": {"extensions": ["digma.digma"]}, "tasks": [{"init": "pip install -r ./requirements.txt"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "LaTeX auto-rebuild", "command": "while find . -name '*.tex' | xargs inotifywait -qqre modify .; do \\\n  pdflatex -pdf -aux-directory=./Workspace/temp -output-directory=./Workspace/Output; \\\ndone\n"}, {"name": "Terminal"}]}
{"tasks": [{"before": "wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb"}, {"init": "sudo dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb"}, {"command": "sudo apt-get update"}, {"command": "sudo apt-get install -y dotnet-sdk-6.0"}]}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": ". ${GITPOD_REPO_ROOT}/.vscode/init_tasks.sh", "command": "/home/gitpod/.pg_ctl/bin/pg_start > /dev/null"}, {"command": ". ${GITPOD_REPO_ROOT}/.vscode/uptime.sh &"}], "vscode": {"extensions": ["formulahendry.auto-close-tag", "eventyret.bootstrap-4-cdn-snippet", "hookyqr.beautify", "matt-rudge.auto-open-preview-panel", "ms-toolsai.jupyter", "ms-toolsai.jupyter-keymap", "ms-toolsai.jupyter-renderers", "ms-toolsai.vscode-jupyter-cell-tags"]}}
{"image": "gitpod/workspace-full", "tasks": [{"name": "Startup", "init": "sudo apt-get -q update\nsudo apt-get install -y libpython3.6 rust-lldb\nsudo rm -rf /var/lib/apt/lists/*\ncd src\n"}], "vscode": {"extensions": ["rust-lang.rust-analyzer", "yzhang.markdown-all-in-one", "DavidAnson.vscode-markdownlint"]}}
{"image": "dclong/gitpod", "ports": [{"port": 8888}], "tasks": [{"command": ". /scripts/gitpod.sh"}], "vscode": {"extensions": ["vscodevim.vim@1.23.2", "ms-python.python"]}}
{"image": {"file": ".gitpod.dockerfile"}, "tasks": [{"init": ". ${GITPOD_REPO_ROOT}/.vscode/init_tasks.sh"}], "vscode": {"extensions": ["ms-python.python", "formulahendry.auto-close-tag", "mkaufman.HTMLHint", "eventyret.bootstrap-4-cdn-snippet", "kevinglasson.cornflakes-linter", "hookyqr.beautify"]}}
{"image": "drud/ddev-gitpod-base:20221018", "tasks": [{"name": "ddev-gitpod-launcher", "before": "if [ $GITPOD_IDE_ALIAS = \"phpstorm\" ]; then echo -e 'alias npm=\"ddev exec npm \" \\n alias php=\"ddev exec php\"  ' >> ~/.bashrc  ;fi\napt-get update\napt-get install -y ddev\nddev start -y\nexport DDEV_NONINTERACTIVE=true\nddev exec \"cat .env.example | sed  -E 's/DB_(HOST|DATABASE|USERNAME|PASSWORD)=(.*)/DB_\\1=db/g' > .env\"\nddev exec 'sed -i \"s#APP_URL=.*#APP_URL=${DDEV_PRIMARY_URL}#g\" .env'\nddev exec \"php artisan key:generate\"\nddev exec \"php artisan migrate\"\nddev exec \"php artisan db:seed\"\nddev exec \"php artisan storage:link\"\n", "init": "ddev composer install\nddev npm i -g npm@latest\nddev npm install\nddev npm audit fix --force\n\nddev npm run dev\n", "command": "\nddev launch\n"}], "vscode": {"extensions": ["felixfbecker.php-debug", "timonwong.shellcheck", "rogalmic.bash-debug"]}, "jetbrains": {"phpstorm": {"prebuilds": {"version": "stable"}, "plugins": ["ru.adelf.idea.dotenv", "de.docs_as_co.intellij.plugin.diagramsnet", "com.github.googee.laravelgenerator", "com.laravel_idea.plugin"]}}, "github": {"prebuilds": {"master": true, "main": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": true, "addBadge": true, "addLabel": true}}, "ports": [{"port": 2222, "onOpen": "ignore"}, {"port": 3306, "onOpen": "ignore"}, {"port": 6942, "onOpen": "ignore"}, {"port": 8080, "onOpen": "ignore"}, {"port": 8025, "onOpen": "ignore"}, {"port": 8026, "onOpen": "ignore"}, {"port": 8036, "onOpen": "ignore"}, {"port": 8037, "onOpen": "ignore"}, {"port": 8888, "onOpen": "ignore"}, {"port": 8889, "onOpen": "ignore"}, {"port": 9000, "onOpen": "ignore"}, {"port": 9999}]}
{"image": "gitpod/workspace-python-3.9", "tasks": [{"name": "Set up analysis env", "init": "wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh\nbash Miniconda3-py39_4.12.0-Linux-x86_64.sh -b -p /workspace/miniconda3\nrm Miniconda3-py39_4.12.0-Linux-x86_64.sh\nexport PATH=\"/workspace/miniconda3/bin/:$PATH\"\nconda init bash\nsource $HOME/.bashrc\nconda config --add channels r --add channels anaconda --add channels bioconda --add channels conda-forge --add channels pytorch \n# conda create -n torch_env pytorch torchvision torchaudio cudatoolkit=11.3\nconda env create -n torch_env -f analysis/torch_env.yml\nconda activate torch_env\necho \"Prebuild is almost ready -- please be patient...\"\n", "command": "printf 'export PATH=\"%s:$PATH\"\\n' \"/workspace/miniconda3/bin\" >> $HOME/.bashrc\nsource $HOME/.bashrc\nconda init bash\nsource $HOME/.bashrc\nconda config --add channels r --add channels anaconda --add channels bioconda --add channels conda-forge --add channels pytorch \nconda activate torch_env\n"}], "vscode": {"extensions": ["ms-python.python", "ms-azuretools.vscode-docker", "GitHub.copilot"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}}
{"vscode": {"extensions": ["formulahendry.auto-rename-tag"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["dizy.lex-flex-yacc-bison@0.0.2:Deasv+1ugI2zUMLVSmvIoQ=="]}}
{"tasks": [{"init": "bundle install && rails db:setup && rails runner scripts/create_data.rb"}], "vscode": {"extensions": ["vortizhe.simple-ruby-erb"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pip install -U pip && pip install .[dev] && PIP_USER=no pre-commit install && PIP_USER=no pre-commit run && unset PIP_USER"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview", "visibility": "public"}, {"port": 5900, "onOpen": "ignore"}, {"port": 6080, "onOpen": "ignore"}], "tasks": [{"init": "npm install", "command": "npm run dev"}, {"command": "gp ports await 3000\nexport CYPRESS_BASE_URL=$(gp url 3000)\nnpm run cypress:run"}]}
{"ports": [{"port": 8080}], "tasks": [{"command": "pip install -r requirements.txt"}]}
{"tasks": [{"init": "npm install", "command": "export HMR_HOST='gp url 5173'\nnpm run dev\n"}], "ports": [{"port": 5173, "onOpen": "open-browser"}], "vscode": {"extensions": ["svelte.svelte-vscode"]}, "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true}}}
{"tasks": [{"init": "./mvnw install -DskipTests=false"}], "ports": [{"port": 8080, "onOpen": "ignore"}]}
{"image": "gitpod/workspace-mongodb", "ports": [{"port": 5000}, {"port": 8080}, {"port": 27017}, {"port": 8888}, {"port": 1050}], "tasks": [{"command": "cp -r .jupyter /home/gitpod/"}, {"command": "mongod"}, {"command": "pip3 install -r requirements.txt && (python3 data_acquire.py & python3 app.py)"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "npm install && npm run build", "command": "npm run dev"}], "ports": [{"port": 3000, "onOpen": "ignore"}]}
{"tasks": [{"name": "Setup ennvironment", "init": "poetry config virtualenvs.create true && poetry config virtualenvs.in-project true && poetry config virtualenvs.path \".venv\"", "command": "poetry install --no-root\npoetry run spacy download \"en_core_web_sm\"\ngit lfs pull\n"}], "vscode": {"extensions": ["ms-toolsai.vscode-jupyter-cell-tags", "ms-toolsai.jupyter-keymap", "ms-toolsai.jupyter-renderers", "ms-toolsai.vscode-jupyter-slideshow", "ms-python.python", "LaurentTreguier.vscode-simple-icons", "ms-toolsai.jupyter"]}}
{"tasks": [{"name": "Install Ionic & Angular CLI", "command": "npm install && npm i -D -E @angular/cli && npx --yes ionic serve"}]}
{"tasks": [{"name": "aws-cli", "env": {"AWS_CLI_AUTO_PROMPT": "on-partial"}, "init": "cd /workspace\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\ncd $THEIA_WORKSPACE_ROOT\n"}, {"name": "postgres", "init": "curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg\necho \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" |sudo tee  /etc/apt/sources.list.d/pgdg.list\nsudo apt update\nsudo apt install -y postgresql-client-13 libpq-dev\n", "command": "export GITPOD_IP=$(curl ifconfig.me)\nsource \"$THEIA_WORKSPACE_ROOT/backend-flask/bin/rds/update-sg-rule\"\n"}, {"name": "react-js", "init": "cd frontend-react-js\nnpm i\n"}, {"name": "flask", "command": "cd backend-flask\npip install -r requirements.txt\n"}], "vscode": {"extensions": ["42Crunch.vscode-openapi", "cweijan.vscode-postgresql-client2"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"name": "Setup, Install & Build", "init": "pnpm install", "command": "pnpm run dev"}], "ports": [{"port": 3000, "onOpen": "open-preview", "name": "undb docs", "description": "undb docs Preview"}]}
{"tasks": [{"init": "gem install cfhighlander kurgan rspec --no-doc"}]}
{"vscode": {"extensions": ["GitHub.copilot"]}}
{"tasks": [{"init": "make --always-make\nexport PATH=\"$(pwd)/tmp/bin:${PATH}\"\ncat > ${PWD}/.git/hooks/pre-commit <<EOF\n#!/bin/bash\n\necho \"Checking jsonnet fmt\"\nmake fmt > /dev/null 2>&1\necho \"Checking if manifests are correct\"\nmake generate > /dev/null 2>&1\n\ngit diff --exit-code\nif [[ \\$? == 1 ]]; then\n  echo \"\n\nThis commit is being rejected because the YAML manifests are incorrect or jsonnet needs to be formatted.\"\n  echo \"Please commit your changes again!\"\n  exit 1\nfi\nEOF\nchmod +x ${PWD}/.git/hooks/pre-commit\n"}], "vscode": {"extensions": ["heptio.jsonnet@0.1.0:woEDU5N62LRdgdz0g/I6sQ=="]}}
{"tasks": [{"name": "Install and run core wiki", "init": "corepack enable\nyarn\nyarn build:theme && yarn build:plugins\nyarn build:all\n", "command": "yarn serve"}], "github": {"prebuilds": {"pullRequestsFromForks": true}}}
{"tasks": [{"before": "clear; npm config set loglevel silent && npm config set update-notifier false && npm i --silent @serverless/cloud@latest -g", "command": "cloud --ide=gitpod --initial"}]}
{"tasks": [{"init": "exit 1", "command": "echo 'start script'"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addComment": false, "addBadge": false, "addCheck": "prevent-merge-on-error"}}}
{"tasks": [{"init": "npm install\nmkdir /workspace/wasm-git-storage\n", "command": "GIT_PROJECT_ROOT=/workspace/wasm-git-storage npm run start"}]}
{"tasks": [{"init": "deploy/build_linux.sh"}], "image": {"file": ".gitpod.Dockerfile"}, "vscode": {"extensions": ["llvm-vs-code-extensions.vscode-clangd"]}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "./gitpod-init.sh\n"}, {"command": "./gitpod-command.sh\n"}], "ports": [{"port": 3000, "onOpen": "ignore"}, {"port": 5000, "onOpen": "ignore"}, {"port": 5001, "onOpen": "ignore"}, {"port": 5601, "onOpen": "open-browser"}, {"port": 9200, "onOpen": "ignore"}, {"port": 9300, "onOpen": "ignore"}, {"port": 9600, "onOpen": "ignore"}, {"port": 9601, "onOpen": "ignore"}, {"port": 9602, "onOpen": "ignore"}]}
{"tasks": [{"init": "yarn install"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addCheck": true, "addComment": false, "addBadge": true}}}
{"image": {"file": ".docker/Dockerfile"}, "ports": [{"port": 8000}, {"port": 8080, "onOpen": "ignore"}], "tasks": [{"init": "npm install", "command": "npm run watch"}], "github": {"prebuilds": {"pullRequestsFromForks": true, "addComment": true}}, "vscode": {"extensions": ["christian-kohler.path-intellisense", "wayou.vscode-todo-highlight", "mrmlnc.vscode-scss", "Ionide.Ionide-fsharp"]}}
{"image": {"file": ".gitpod.Dockerfile"}}
{"image": {"file": "dev_tools/Dockerfile"}, "ports": [{"port": 8005, "onOpen": "open-preview"}], "tasks": [{"command": "echo \"Starting sqlite workspace\""}, {"command": "php -S localhost:8005 ./dev_tools/phpliteadmin.php"}, {"command": "cat ./dev_tools/aliases.sh > ~/.bash_aliases && source ~/.bashrc"}], "vscode": {"extensions": ["austenc.laravel-blade-spacer@1.0.3:iQ+wc1o3sg9U3k+I1g1J2w=="]}}
{"image": {"file": ".gitpod.dockerfile"}, "ports": [{"port": 6080}], "tasks": [{"init": "yarn", "command": "./scripts/code.sh"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": true, "addComment": true, "addBadge": false, "addLabel": "prebuilt-in-gitpod"}}}
{"image": "gitpod/workspace-full", "tasks": [{"init": "make", "command": "echo hello world"}]}
{"tasks": [{"name": "Install and run Hugo", "before": "brew install hugo\n", "init": "echo \"Hugo version: `hugo version`\"\n", "command": "hugo server -D -F --baseUrl $(gp url 1313) --liveReloadPort=443 --appendPort=false --bind=0.0.0.0\n"}], "ports": [{"port": 1313, "onOpen": "open-preview"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run dev"}], "image": {"file": ".gitpod.Dockerfile"}}
{"image": "gitpod/workspace-full:latest", "tasks": [{"init": "${GITPOD_REPO_ROOT}/init.sh", "command": "echo 'some task'"}], "github": {"prebuilds": {"master": true, "branches": true, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": false}}}
{"tasks": [{"init": "go install golang.org/dl/go1.18beta2@latest\ngo1.18beta2 download\ngo1.18beta2 version\nalias go=go1.18beta2=\ngo version\n", "command": "echo \"Hello\"\n"}], "vscode": {"extensions": ["golang.go"]}}
{"image": {"file": ".gitpod.dockerfile"}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": false, "addComment": true, "addBadge": false, "addLabel": false}}, "tasks": [{"command": "mkdir -p /home/gitpod/.android\ntouch /home/gitpod/.android/repositories.cfg\nexport PATH=/usr/lib/dart/bin:$FLUTTER_HOME/bin:$ANDROID_HOME/bin:$PATH\n/home/gitpod/android-sdk/tools/bin/sdkmanager \"platform-tools\" \"platforms;android-28\" \"build-tools;28.0.3\"\n"}], "vscode": {"extensions": ["Dart-Code.flutter@3.5.0:/kOacEWdiDRLyN/idUiM4A=="]}}
{"image": {"file": ".gitpod.Dockerfile"}, "ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"init": "yarn install", "command": "yarn start"}]}
{"tasks": [{"init": "npm install && npm run build", "command": "npm run start"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "cabal update\ncabal build\n# stack build\n", "command": "cabal test\n# stack test\n"}], "vscode": {"extensions": ["haskell.haskell"]}}
{"image": {"file": ".gitpod/.gitpod.Dockerfile"}, "ports": [{"port": 8080, "onOpen": "notify", "visibility": "public"}, {"port": 8181, "onOpen": "notify", "visibility": "public"}], "tasks": [{"name": "Install Node modules", "init": "nvm install\nnvm use\nnpm ci\nnpx --yes playwright install --with-deps\nnpm test\ngp sync-done installation\n"}, {"name": "Serenity Reports", "init": "gp sync-await installation", "command": "npx http-server -p 8080 target/site/serenity/\n"}, {"name": "Playwright Report", "init": "gp sync-await installation", "command": "npx http-server -p 8181 playwright-report      \n"}, {"name": "Welcome", "init": "gp sync-await installation", "command": "echo \"To view Serenity Reports, visit:\"\ngp url 8080\necho \"To view Playwright Report, visit:\"\ngp url 8181\n"}], "vscode": {"extensions": ["dbaeumer.vscode-eslint", "EditorConfig.EditorConfig", "ms-playwright.playwright"]}, "github": {"prebuilds": {"master": true, "branches": false, "pullRequests": true, "pullRequestsFromForks": false, "addCheck": true, "addComment": false, "addBadge": true}}}
{"image": "gitpod/workspace-python-3.10", "tasks": [{"init": "sudo apt-get update && sudo apt-get -y upgrade && \\\nsudo apt -y install openssh-server && \\\npip3 install -r requirements-test.txt\n"}]}
{"tasks": [{"init": "yarn install && yarn run build", "command": "yarn run start"}], "ports": [{"port": 3000, "onOpen": "open-preview"}], "github": {"prebuilds": {"addBadge": true, "addComment": false, "addCheck": false, "master": true, "branches": true, "pullRequestsFromForks": true}}}
{"tasks": [{"init": "echo \"init\"", "command": "mvn test -P single"}]}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pip install -r ./requirements.txt"}], "vscode": {"extensions": ["almenon.arepl@2.0.1:JWXhed/Ti1CHdOqmOfP5wg==", "dendron.dendron-markdown-preview-enhanced@0.10.22:iKz57LDwKh6E4XlWzcsIVA=="]}, "github": {"prebuilds": {"master": true, "pullRequests": true, "addComment": true}}}
{"image": {"file": ".gitpod.Dockerfile"}, "tasks": [{"init": "pip3 install -r requirements.txt", "command": "python3 src/app.py"}], "ports": [{"port": 3245, "onOpen": "open-preview"}], "vscode": {"extensions": ["ms-azuretools.vscode-docker", "ms-python.python"]}}
{"vscode": {"extensions": ["esbenp.prettier-vscode@2.3.0:1F0Pvb/ORZ/T+b60LIMs8w==", "eamodio.gitlens@10.2.1:WIWu3zHU4VPT8r/v866LUw=="]}}
{"tasks": [{"init": "echo \"Replace me with a build script for the project.\"", "command": "echo \"Replace me with omething that should run on every start, or just remove me entirely.\""}], "image": {"file": ".gitpod.Dockerfile"}}
{"ports": [{"port": 3000, "onOpen": "open-preview"}], "tasks": [{"name": "Get Core & Configure", "before": "wget https://downloads.lambdatest.com/hyperexecute/linux/hyperexecute\nchmod u+x hyperexecute\n", "init": "echo \"Performing test\"\n./hyperexecute --user=$LT_USERNAME --key=$LT_ACCESS_KEY --config yaml/win/.hyperexecute_autosplits.yaml --download-artifacts --force-clean-artifacts\necho \"Test completion\"\n"}]}
